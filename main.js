const {
  default: makeWASocket,
  DisconnectReason,
  MessageType,
  Presence,
  MessageTypeProto,
  emitGroupParticipantsUpdate,
  MessageOptions,
  Mimetype,
  BufferJSON,
  downloadAndSaveMediaMessage,
  WA_DEFAULT_EPHEMERAL,
  proto,
  WAUrlInfo,
  MediaConnInfo,
  WAContextInfo,
  generateWAMessage,
  areJidsSameUser,
  getContentType,
  useSingleFileAuthState,
  prepareWAMessageMedia,
  delay,
  generateWAMessageFromContent,
  generateMessageID,
  downloadContentFromMessage,
  makeInMemoryStore,
  jidDecode,
} = require("@adiwajshing/baileys");

//M√öDULOS
let limit = 50;
const { youtubedl, youtubedlv2, youtubedlv3, merdeka } = require("@bochilteam/scraper");
const fs = require("fs");
const config = require('./config.json')
const P = require("pino");
const fetch = require("node-fetch");
const chalk = require("chalk");
const mimetype = require("mime-types");
const speed = require("performance-now");
const ffmpeg = require("fluent-ffmpeg");
const base64 = require("base-64");
const moment = require("moment-timezone");
const { Aki } = require("aki-api");
const axios = require("axios");
const ms = require("parse-ms");
const request = require("request-promise");
const cheerio = require("cheerio");
const { color } = require('./lib/color');
const toMs = require("ms");
const thiccysapi = require("textmaker-thiccy");
const hx = require("hxz-api");
const gis = require("g-i-s");
const googleIt = require("google-it");
const linkfy = require("linkifyjs");
const yts = require("yt-search");
const { igApi, getCookie } = require("insta-fetcher");
const ig = new igApi("oVaYqI8ZPEZUVPLa7V9nw5F8zYP5jPd5");
const { EmojiAPI } = require("emoji-api");
const emoji = new EmojiAPI();
const os = require("os");
const phaticusthiccy = require("@phaticusthiccy/open-apis");
const store = makeInMemoryStore({
  logger: P().child({ level: "debug", stream: "store" }),
});
const { WSF, createSticker } = require("wa-sticker-formatter");
const { exec } = require('child_process')
const Downloader = require("nodejs-file-downloader");
// LIBS

const { validmove, setGame } = require("./db/tictactoe");
const level = require("./lib/level.js");
const webp_mp4 = require("./db/js/webp_mp4.js");
const { getRandom, runtime, formatp, getBuffer } = require("./lib/myfunc");
const { getAdmins, getMembers } = require("./lib/utils");
const { webp2gifFile } = require("./lib/gif22.js");
const ytmate = require('./lib/ytmate')
const tiktok = require("./lib/tiktok.js");
const { data, data2, data3, hora, hora2 } = require("./lib/functions.js");
const {
  addToken,
  removeToken,
  getAllTokens,
  getTokenByNumber,
} = require("./lib/fichas.js");
const { sendVideoAsSticker, sendImageAsSticker } = require('./lib/rename.js');
const { sendVideoAsSticker2, sendImageAsSticker2 } = require('./lib/rename2.js');

//ARQUIVOS JSON

const { state, saveState } = useSingleFileAuthState("auth-info-multi.json");
const bemvindo2 = JSON.parse(fs.readFileSync("./db/json/bemvindo2.json"));
const _level = JSON.parse(fs.readFileSync("./db/json/level.json"));
const simipv = JSON.parse(fs.readFileSync("./db/json/simipv.json"));
const countMessage = JSON.parse(fs.readFileSync("./db/json/countmsg.json"));
const _premium = JSON.parse(fs.readFileSync("./db/json/premium.json"));
const premium = require("./function/premium.js");
const mensagem = JSON.parse(fs.readFileSync("./db/json/menssagem.json"));
const dinheiro = JSON.parse(fs.readFileSync("./db/json/dinheiro.json")); //ONDE FICA ARMAZENADO OS DADOS
const antifake = JSON.parse(fs.readFileSync("./db/json/antifake.json"));
const bye_group = JSON.parse(fs.readFileSync("./db/json/byegp.json"));
const bye_group2 = JSON.parse(fs.readFileSync("./db/json/byegp2.json"));
const welcome_group2 = JSON.parse(fs.readFileSync("./db/json/welcomegp2.json"));
const welcome_group = JSON.parse(fs.readFileSync("./db/json/welcomegp.json"));
const termos = JSON.parse(fs.readFileSync("./db/json/termos.json"));
const welkom = JSON.parse(fs.readFileSync("./db/json/welkom.json"));
const welkom2 = JSON.parse(fs.readFileSync("./db/json/vacilo.json"));
const antilinkgp = JSON.parse(fs.readFileSync("./db/json/antilinkgp.json"));
const antilink = JSON.parse(fs.readFileSync("./db/json/antilink.json"));
// const profissao_group = JSON.parse(fs.readFileSync('./db/json/profiss√£o.json'));
const simi = JSON.parse(fs.readFileSync("./db/json/simi.json"));
const ban = JSON.parse(fs.readFileSync("./db/json/banned.json"));
const akinator = JSON.parse(fs.readFileSync("./db/json/akinator.json"));
const adeuscara = JSON.parse(fs.readFileSync("./db/json/adeuscara.json"));
const antiviewonce = JSON.parse(fs.readFileSync("./db/json/antiviewonce.json"));
const game = JSON.parse(fs.readFileSync("./db/json/game.json"));
const nsfw = JSON.parse(fs.readFileSync("./db/json/nsfw.json"));
const antipala = JSON.parse(fs.readFileSync("./db/json/antipala.json"));

//FIM

//RPG

const nomerpg = JSON.parse(fs.readFileSync("./db/json/nomerpg.json"));
const profissao = JSON.parse(fs.readFileSync("./db/json/profissao.json"));
const rancarpg = JSON.parse(fs.readFileSync("./db/json/rancca.json"));

//PARTE JS

const { convertSticker } = require("./lib/swm.js");

blocked = [];
BotName = "Tomioka-MD";
prefix = ["#", "$", "/", "!", "&", "."];
prefixobot = ["/"];

global.blocked;

const vcard =
  "BEGIN:VCARD\n" + // Formato Vcard
  "VERSION:3.0\n" +
  "FN:Tio Tomioka\n" + // Nome
  "ORG:Criador do Tomioka bot hihi;\n" + // ORGANIZA√á√ÉO
  "TEL;type=CELL;type=VOICE;waid=554497433716:+55 99743 3716\n" + // N√öMERO
  "END:VCARD";

  const descFig = {
    type: 'full',
    
    pack: `‚¨î ‡£™€™ üåº ◊Ñ‚ÇäùïÆùñóùñéùñÜùñâùñîùñó:\n‚§∑   Í™∂Õ¢Õ¢Õ¢ùêìùêàÕ¢ùöØ ùêìùöØÕ¢ùêåùêàÕ¢ùöØùêäùúüÍ´Ç\n\nÍí∫ ◊Ñ‚ÇäüëëÃ∑ ùôÅùôñùô°ùôñùôß ùôòùô§ùô¢ ùô§ ùô©ùô§ùô¢ùôûùô§ùô†ùôñ:\n‚§∑   (44) 99743-3716         `,
    author: `‚¨î ‡£™€™ ‚ú® ùìºùì≤ùìΩùìÆ:\nlinktr.ee/Tokibot    ‚Ü≤\n\nÍí∫ ◊Ñ‚Çäü§ñÃ∑ ùòΩùôäùôè:\n(44) 99822-0867    ‚Ü≤`,
    categories: [
    'üåπ'
    ]
    }

function connect() {
  const conn = makeWASocket({
    printQRInTerminal: true,
    logger: P({ level: "silent" }),
    defaultQueryTimeoutMs: undefined,
    auth: state,
  });

  conn.ev.on("connection.update", (update) => {
    if (update.connection == "close") {
      if (
        update.lastDisconnect.error.output.statusCode ==
        DisconnectReason.connectionClosed
      ) {
        console.log("conex√£o fechada, reconectando...");
        connect();
      } else if (
        update.lastDisconnect.error.output.statusCode ==
        DisconnectReason.connectionLost
      ) {
        console.log("conex√£o com a internet foi perdida, reconectando...");
        connect();
      } else if (
        update.lastDisconnect.error.output.statusCode ==
        DisconnectReason.connectionReplaced
      ) {
        console.log("conex√£o substituida, reconectando...");
        connect();
      } else if (
        update.lastDisconnect.error.output.statusCode ==
        DisconnectReason.timedOut
      ) {
        console.log("tempo de conex√£o esgotado, reconectando...");
        connect();
      } else if (
        update.lastDisconnect.error.output.statusCode ==
        DisconnectReason.loggedOut
      ) {
        console.log("usuario desconectado, reconectando...");
        connect();
      } else if (
        update.lastDisconnect.error.output.statusCode ==
        DisconnectReason.badSession
      ) {
        console.log("sess√£o ruim, reconectando...");
        connect();
      } else if (
        update.lastDisconnect.error.output.statusCode ==
        DisconnectReason.restartRequired
      ) {
        console.log("reiniciamento exigido, reiniciando...");
        connect();
      } else if (
        update.lastDisconnect.error.output.statusCode ==
        DisconnectReason.multideviceMismatch
      ) {
        console.log(
          "icompatibilidade com varios dispositivos, reconectando..."
        );
        connect();
      }
    }
  });

  //===============(BEM VINDO)=============\\

  conn.ev.on("group-participants.update", async (ale) => {
    const isGroup = ale.id.endsWith("@g.us");
    const mdata = isGroup ? await conn.groupMetadata(ale.id) : {};

    if (Object.keys(mdata).length == 0) return;

    // PEGAR DESCRI√á√ÉO DO GRUPO.
    const groupDesc = !mdata.desc ? "" : mdata.desc.toString();

    // CONST DO CMD DE BANIR QUEM ESTIVER NA LISTA N
    const adeuscara = JSON.parse(fs.readFileSync("./db/json/adeuscara.json"));
    const dbackid = [];
    for (i = 0; i < adeuscara.length; ++i) dbackid.push(adeuscara[i].groupId);
    console.log(ale);
    if (dbackid.indexOf(ale.id) >= 0) {
      if (ale.action == "add") {
        num = ale.participants[0];
        var ind = dbackid.indexOf(ale.id);
        if (
          adeuscara[ind].actived &&
          adeuscara[ind].number.indexOf(num.split("@")[0]) >= 0
        ) {
          await conn.sendMessage(mdata.id, {
            text: "*Olha quem deu as cara por aqui, sente o poder do ban caba√ßo*",
          });
          conn.groupParticipantsUpdate(
            mdata.id,
            [ale.participants[0]],
            "remove"
          );
          return;
        }
      }
    }
    // FIM LISTANEGRA CONST ^

    // ANTIFAKE QUE EST√Å JUNTO COM BEM VINDO
    if (antifake.includes(ale.id)) {
      if (ale.action === "add" && !ale.participants[0].startsWith(55)) {
        num = ale.participants[0];
        conn.sendMessage(mdata.id, {
          text: "Bya bya n√∫mero fake, voc√™ n√£o e bem vindo aqui",
        });
        await delay(1000);
        conn.groupParticipantsUpdate(mdata.id, [ale.participants[0]], "remove");
      }
    }

    if (antifake.includes(ale.id)) {
      if (ale.action === "add" && ale.participants[0].startsWith(55800)) {
        num = ale.participants[0];
        conn.sendMessage(mdata.id, {
          text: "Suma daqui, voc√™ n√£o e bem vindo",
        });
        await delay(1000);
        conn.groupParticipantsUpdate(mdata.id, [ale.participants[0]], "remove");
      }
    }
    // FIM ANTIFAKE ^

    // BEM VINDO COMPLETO
    if (welkom.includes(ale.id)) {
      if (antifake.includes(ale.id) && !ale.participants[0].startsWith(55))
        return;
      try {
        try {
          ppimg = await conn.profilePictureUrl(ale.participants[0]);
        } catch {
          ppimg = "https://telegra.ph/file/b5427ea4b8701bc47e751.jpg";
        }

        try {
          ppgp = await conn.profilePictureUrl(mdata.id);
        } catch {
          ppgp = "https://image.flaticon.com/icons/png/512/124/124034.png";
        }

        shortpc = await axios.get(
          `https://tinyurl.com/api-create.php?url=${ppimg}`
        );
        shortgc = await axios.get(
          `https://tinyurl.com/api-create.php?url=${ppgp}`
        );

        const groupIdWelcomed = [];
        const groupIdBye = [];
        for (let obj of welcome_group) groupIdWelcomed.push(obj.jid);
        for (let obj of bye_group) groupIdBye.push(obj.jid);

        const isByed = groupIdBye.indexOf(ale.id) >= 0 ? true : false;

        const isWelcomed = groupIdWelcomed.indexOf(ale.id) >= 0 ? true : false;

        if (ale.action === "add") {
          if (isWelcomed) {
            var ind = groupIdWelcomed.indexOf(ale.id);
            teks = welcome_group[ind].mek
              .replace("#hora#", time)
              .replace("#nomedogp#", mdata.subject)
              .replace("#numerodele#", "@" + ale.participants[0].split("@")[0])
              .replace("#numerobot#", conn.user.id)
              .replace("#prefixo#", prefix)
              .replace("#descri√ß√£o#", groupDesc);
          } else {
            teks = welcome(ale.participants[0].split("@")[0], mdata.subject);
          }
          let buff = await getBuffer(ppimg);
          ran = getRandom(".jpg");
          await fs.writeFileSync(ran, buff);

          fs.unlinkSync(ran);
          imgbuff = await getBuffer(
            `https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRdAmc_FJxlY3xYDoLURHHYmJzmQsSzlkmt7AuyYvcrOu_mjPYR5z8IZLO0&s=10`
          );
          conn.sendMessage(mdata.id, {
            image: imgbuff,
            mentions: ale.participants,
            caption: teks,
          });
        } else if (ale.action === "remove") {
          mem = ale.participants[0];

          try {
            ppimg = await conn.profilePictureUrl(`${mem.split("@")[0]}@c.us`);
          } catch {
            ppimg = "https://telegra.ph/file/b5427ea4b8701bc47e751.jpg";
          }

          if (isByed) {
            var ind = groupIdBye.indexOf(ale.id);
            teks = bye_group[ind].mek
              .replace("#hora#", time)
              .replace("#nomedogp#", mdata.subject)
              .replace("#numerodele#", ale.participants[0].split("@")[0])
              .replace("#numerobot#", conn.user.id)
              .replace("#prefixo#", prefix)
              .replace("#descri√ß√£o#", groupDesc);
          } else {
            teks = bye(ale.participants[0].split("@")[0]);
          }

          let buff = await getBuffer(ppimg);
          ran = getRandom(".jpg");
          fs.writeFileSync(ran, buff);

          imgbuff = await getBuffer(
            `https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSj3QSujsWG0LtzgE_2qRWA5ynruykS246CqQ&usqp=CAU`
          );
          conn.sendMessage(mdata.id, {
            image: imgbuff,
            caption: teks,
            mentions: ale.participants,
          });
          fs.unlinkSync(ran);
        }
      } catch (e) {
        console.log(e);
      }
    }
  });
  // FIM ^

  // BEM VINDO 2 ( SEM FOTO )

  conn.ev.on("creds.update", saveState);
  conn.ev.on("group-participants.update", async (ale) => {
    const isGroup = ale.id.endsWith("@g.us");
    const mdata = isGroup ? await conn.groupMetadata(ale.id) : {};

    if (Object.keys(mdata).length == 0) return;

    // PEGAR DESCRI√á√ÉO DO GRUPO
    const groupDesc = !mdata.desc ? "" : mdata.desc.toString();

    // CONST DO CMD DE BANIR QUEM ESTIVER NA LISTA N
    if (welkom2.includes(ale.id)) {
      if (antifake.includes(ale.id) && !ale.participants[0].startsWith(55))
        return;
      try {
        const welcome_group2 = JSON.parse(
          fs.readFileSync("./db/json/welcomegp2.json")
        );
        const welcome_group = JSON.parse(
          fs.readFileSync("./db/json/welcomegp.json")
        );
        const groupIdWelcomed2 = [];
        const groupIdBye2 = [];
        for (let obj of welcome_group2) groupIdWelcomed2.push(obj.jid);
        for (let obj of bye_group2) groupIdBye2.push(obj.jid);

        const isByed2 = groupIdBye2.indexOf(ale.id) >= 0 ? true : false;

        const isWelcomed2 =
          groupIdWelcomed2.indexOf(ale.id) >= 0 ? true : false;

        if (ale.action === "add") {
          if (isWelcomed2) {
            var ind = groupIdWelcomed2.indexOf(ale.id);
            teks = welcome_group2[ind].mek
              .replace("#hora#", time)
              .replace("#nomedogp#", mdata.subject)
              .replace("#numerodele#", "@" + ale.participants[0].split("@")[0])
              .replace("#numerobot#", conn.user.id)
              .replace("#prefixo#", prefix)
              .replace("#descri√ß√£o#", groupDesc);
          } else {
            teks = welcome(ale.participants[0].split("@")[0], mdata.subject);
          }

          conn.sendMessage(
            mdata.id,
            { text: teks },
            { mentions: ale.participants }
          );
        } else if (ale.action === "remove") {
          mem = ale.participants[0];

          if (isByed2) {
            var ind = groupIdBye2.indexOf(ale.id);
            teks = bye_group2[ind].mek
              .replace("#hora#", time)
              .replace("#nomedogp#", mdata.subject)
              .replace("#numerodele#", ale.participants[0].split("@")[0])
              .replace("#numerobot#", conn.user.id)
              .replace("#prefixo#", prefix)
              .replace("#descri√ß√£o#", groupDesc);
          } else {
            teks = bye(ale.participants[0].split("@")[0]);
          }

          conn.sendMessage(
            mdata.id,
            { text: teks },
            { mentions: ale.participants }
          );
          fs.unlinkSync(ran);
        }
      } catch (e) {
        console.log(e);
      }
    }
  });

  conn.ev.on("creds.update", saveState);

  conn.ev.on("messages.upsert", async (updateM) => {
    if (updateM.type != "notify") return;
    const mek = updateM.messages[0];
    if (!mek.key.participant) mek.key.participant = mek.key.remoteJid;
    mek.key.participant = mek.key.participant.replace(/:[0-9]+/gi, "");
    if (mek.key.fromMe) return;
    if (!mek.message) return;
    const from = mek.key.remoteJid;
    const info = mek.message;
    const pushname = mek.pushName || "Undefined";
    const type = require("@adiwajshing/baileys").getContentType(info);
    // console.log(mek);

    const body =
      type == "conversation"
        ? info[type]
        : type == "imageMessage"
        ? info[type].caption
        : type == "videoMessage"
        ? info[type].caption
        : type == "extendedTextMessage"
        ? info[type].text
        : type == "buttonsResponseMessage"
        ? info[type].selectedButtonId
        : type == "listResponseMessage"
        ? info[type].singleSelectReply.selectedRowId
        : type == "templateButtonReplyMessage"
        ? info[type].selectedId
        : "";

    selectedButton =
      type == "buttonsResponseMessage"
        ? mek.message.buttonsResponseMessage.selectedButtonId
        : "";
    const argsButton = selectedButton.trim().split(/ +/);

    var budy =
      type === "conversation"
        ? mek.message.conversation
        : type === "extendedTextMessage"
        ? mek.message.extendedTextMessage.text
        : "";
    var pes =
      type === "conversation" && mek.message.conversation
        ? mek.message.conversation
        : type == "imageMessage" && mek.message.imageMessage.caption
        ? mek.message.imageMessage.caption
        : type == "videoMessage" && mek.message.videoMessage.caption
        ? mek.message.videoMessage.caption
        : type == "extendedTextMessage" && mek.message.extendedTextMessage.text
        ? mek.message.extendedTextMessage.text
        : "";
    function env(text) {
      conn.sendMessage(from, { text: text }, { quoted: mek });
    }
    function env2(text, emoji){
  
      env(text);
     
      const sendReaction2 = {
         react: {
             text: null, 
             key: mek.key
         }
     }
     const sendReagir2 = conn.sendMessage(from, sendReaction2)
     
     setTimeout(() =>{  const sendReactionn2 = {
         react: {
             text: emoji, 
             key: mek.key
         }
     }
     const sendReagirr2 = conn.sendMessage(from, sendReactionn2) }, 1)
     }
     function env3(text, text3, emoji){
  
      sendButtonText(from, text, text3, {quoted: mek});
     
      const sendReaction3 = {
         react: {
             text: null, 
             key: mek.key
         }
     }
     const sendReagir3 = conn.sendMessage(from, sendReaction3)
     
     setTimeout(() =>{  const sendReactionn3 = {
         react: {
             text: emoji, 
             key: mek.key
         }
     }
     const sendReagirr3 = conn.sendMessage(from, sendReactionn3) }, 1)
     }
    const envJSON = (text) => {
      env(JSON.stringify(text, null, 2));
    };

    function mention(text, quoted = true) {
      conn.sendMessage(
        from,
        { text: text, mentions: addMentionsInArray(text, "@s.whatsapp.net") },
        quoted ? { quoted: mek } : {}
      );
    }
    //IMPORTANTES, N√ÉO MEXA AQUI

    const botN = conn.user.id.replace(/:[0-9]+/gi, "");
    const isBot = mek.key.fromMe;
    const owner = ["5544997433716@s.whatsapp.net"];
    const mods = ["554497433716@s.whatsapp.net"];
    const mito = "17144092135@s.whatsapp.net";
    const vini = ["5519983528567@s.whatsapp.net"];
    const akashi = "559291687728@s.whatsapp.net";

    const isGroup = mek.key.remoteJid.endsWith("g.us");
    const metadata = isGroup ? await conn.groupMetadata(from) : {};
    const IsDonoGo = metadata.owner;
    const groupMetadata = isGroup ? await conn.groupMetadata(from) : "";
    const groupName = isGroup ? groupMetadata.subject : "";
    const groupDesc = isGroup ? groupMetadata.desc : "";
    const groupMembers = isGroup ? groupMetadata.participants : [];
    const sender = mek.key.participant;
    const adivinha =
      mek.key.id.length > 21
        ? "Android üì±"
        : mek.key.id.substring(0, 2) == "3A"
        ? "IOS üì±"
        : "WEB  üíª";
    const sleep = async (ms) => {
      return new Promise((resolve) => setTimeout(resolve, ms));
    };

    const ants = body;
    const args = body.trim().split(/ +/).slice(1);
    const argss = body.split(/ +/g);
    const texto = args.join(" ");
    const q = args.join(" ");
    const p = args.join(" ");
    const command = body.slice(1).trim().split(/ +/).shift().toLowerCase();
    const quoted = mek.quoted ? mek.quoted : mek;
    const content = JSON.stringify(mek.message);

    //CONSOLE

    console.log(
      "\n\033[31mENDERE√áO IP: \033[34m" +
        mek.key.remoteJid +
        "\n" +
        "\033[31mID DE MENSAGEM: \033[34m" +
        mek.key.id +
        "\n" +
        "\033[31mUSU√ÅRIO: \033[34m" +
        mek.key.participant +
        "\n" +
        "\033[31mPUSHNAME: \033[34m" +
        pushname +
        "\n" +
        "\033[31mCOMANDO: \033[34m" +
        texto +
        "\n" +
        "\033[31mData e hora: \033[34m" +
        data2 +
        " " +
        "as" +
        " " +
        hora() +
        "\n\n"
    );

    //VERIFICADOS
    const selo = {
      key: {
        participant: "0@s.whatsapp.net",
        remoteJid: "120363023849383476@g.us",
      },
      message: { conversation: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD" },
    };
    const whatsapp = {
      key: { fromMe: false, participant: `0@s.whatsapp.net` },
      message: { extendedTextMessage: { text: `Toki Bot`, title: "hmm" } },
    };
    const imagemek = {
      key: { fromMe: false, participant: `0@s.whatsapp.net` },
      message: { extendedTextMessage: { text: `Toki Bot`, title: "hmm" } },
    };
    const videomek = {
      key: { fromMe: false, participant: `0@s.whatsapp.net` },
      message: { extendedTextMessage: { text: `Toki Bot`, title: "hmm" } },
    };
    const stickermek = {
      key: { fromMe: false, participant: `0@s.whatsapp.net` },
      message: { stickerMessage: { text: `Toki Bot`, title: "hmm" } },
    };
    const documentomek = {
      key: { fromMe: false, participant: `0@s.whatsapp.net` },
      message: { documentMessage: { text: `Toki Bot`, title: "hmm" } },
    };
    const contatomek = {
      key: { fromMe: false, participant: `0@s.whatsapp.net` },
      message: { contactMessage: { text: `Toki Bot`, title: "hmm" } },
    };
    const audiomek = {
      key: { fromMe: false, participant: `0@s.whatsapp.net` },
      message: { audioMessage: { text: `Toki Bot`, title: "hmm" } },
    };

    /*  const groupTabela = []	
    for(let obj of profissao_group) groupTabela.push(obj.jid)*/

    //FRASES DE USU√ÅRIOS
    const isMito = sender != mito;
    const isAkashi = sender != akashi;
    const isVini = sender != vini;
    const keyale = config.keyale
    const isOwner = owner.indexOf(sender) < 0;
    const isMods = mods.indexOf(sender) < 0;
    const isPremium = premium.checkPremiumUser(sender, _premium);
    const isSimiPv = simipv.includes(sender);
    const isAdmins = isGroup ? getAdmins(groupMembers) : "";
    const isMemberAdmin = isGroup ? isAdmins.indexOf(sender) > -1 : false;
    const isBotAdm = isGroup ? isAdmins.indexOf(botN) > -1 : false;
    const allMembers = isGroup ? getMembers(groupMembers) : [];
    const isWelkom = isGroup ? welkom.includes(from) : false;
    const isWelkom2 = isGroup ? welkom2.includes(from) : true;
    const isAntiPala = isGroup ? antipala.includes(from) : false;
    const isNsfw = isGroup ? nsfw.includes(from) : true;
    const isGame = isGroup ? game.includes(from) : false;
    const isAntifake = isGroup ? antifake.includes(from) : false;
    const isAntiVO = isGroup ? antiviewonce.includes(from) : false;
    const isSimi = isGroup ? simi.includes(from) : false;
    const isLevelingOn = isGroup ? _level.includes(from) : false;
    const isAntiLink = isGroup ? antilink.includes(from) : false;
    const isAntilinkgp = isGroup ? antilinkgp.includes(from) : false;
    const isBanned = ban.includes(sender);
    const isCmd = prefix.indexOf(body.slice(0, 1)) > -1;
    const senderfix = mek.key.fromMe ? tomioka.user.jid : isGroup ? mek.participant : mek.key.remoteJid
    const mentions = (teks, memberr, id) => {
      id == null || id == undefined || id == false
        ? conn.sendMessage(from, { text: teks.trim(), mentions: memberr })
        : conn.sendMessage(from, { text: teks.trim(), mentions: memberr });
    };
    const createMessageByContent = (id, content) => {
      conn.relayMessage(id, content, {
        messageId: require("@adiwajshing/baileys").generateMessageID(),
        additionalAttributes: {},
      });
    };
    const messagesC = pes.slice(0).trim().split(/ +/).shift().toLowerCase();
    const isUrl = (url) => {
      if (linkfy.find(url)[0]) return true;
      return false;
    };
    const getExtension = async (type) => {
      return await mimetype.extension(type);
    };
    //=========(isQuoted/consts)=============\\
    const isImage = type == "imageMessage";
    const isVideo = type == "videoMessage";
    const isAudio = type == "audioMessage";
    const isSticker = type == "stickerMessage";
    const isContact = type == "contactMessage";
    const isLocation = type == "locationMessage";
    const isProduct = type == "productMessage";
    const isMedia =
      type === "imageMessage" ||
      type === "videoMessage" ||
      type === "audioMessage";
    typeMessage = body.substr(0, 50).replace(/\n/g, "");
    if (isImage) typeMessage = "Image";
    else if (isVideo) typeMessage = "Video";
    else if (isAudio) typeMessage = "Audio";
    else if (isSticker) typeMessage = "Sticker";
    else if (isContact) typeMessage = "Contact";
    else if (isLocation) typeMessage = "Location";
    else if (isProduct) typeMessage = "Product";

    const isQuotedMsg =
      type === "extendedTextMessage" && content.includes("textMessage");

    const isQuotedImage =
      type === "extendedTextMessage" && content.includes("imageMessage");

    const isQuotedVideo =
      type === "extendedTextMessage" && content.includes("videoMessage");

    const isQuotedDocument =
      type === "extendedTextMessage" && content.includes("documentMessage");

    const isQuotedAudio =
      type === "extendedTextMessage" && content.includes("audioMessage");

    const isQuotedSticker =
      type === "extendedTextMessage" && content.includes("stickerMessage");

    const isQuotedContact =
      type === "extendedTextMessage" && content.includes("contactMessage");

    const isQuotedLocation =
      type === "extendedTextMessage" && content.includes("locationMessage");

    const isQuotedProduct =
      type === "extendedTextMessage" && content.includes("productMessage");
      

 
  // ENVIAR BOT√ÉO COM TEXTO
  var sendBtext = async (id, text1, desc1, but = [], vr) => {
  buttonMessage = {
  text: text1,
  footer: desc1,
  buttons: but,
  headerType: 1
  }
  conn.sendMessage(id, buttonMessage, {quoted: vr})
  }
  
  
    function sendButtonText(contentText, footerText, options = {}) {
      const content = {
        buttonsMessage: {
          contentText: contentText,
          footerText: footerText,
          buttons: [],
          contextInfo: {
            isForwarded: true,
            forwardingScore: 0,
          },
          headerType: 1,
        },
      };
      const key = Object.keys(content)[0];
      content[key].contextInfo.mentionedJid =
        "contextInfo" in options ? options.contextInfo.mentionedJid : [];
      if ("quoted" in options) {
        const { quoted } = options;
        content[key].contextInfo.participant = quoted.key.participant;
        content[key].contextInfo.quotedMessage = quoted.message;
      } else if ("contextInfo" in options) {
      }
      conn.relayMessage(from, content, {
        messageId: require("@adiwajshing/baileys").generateMessageID(),
        additionalAttributes: {},
      });
    }

    const getFileBuffer = async (mediakey, MediaType) => {
      const stream = await downloadContentFromMessage(mediakey, MediaType);

      let buffer = Buffer.from([]);
      for await (const chunk of stream) {
        buffer = Buffer.concat([buffer, chunk]);
      }
      return buffer;
    };

    const fetchJson = (url) => {
      return fetch(url)
        .then((response) => response.json())
        .catch((err) => {
          throw new Error(err);
        });
    };
    const addMentionsInArray = (me, idWA) => {
      if (!/@[0-9]+/g.test(me)) {
        const mentioneds = [];
        return mentioneds;
      }
      const mentioneds = [];
      const regExp = /@[0-9]+/g;
      const NumberMentioneds = me.match(regExp);

      for (let i of NumberMentioneds) {
        var ending = i.replace(/@/g, "");
        var format = ending + idWA;
        mentioneds.push(format);
      }
      return mentioneds;
    };

    //===============(APAGA MENSAGEM AUTOM√ÅTICO)=============\\

    /*if (mek.key.participant == '558183341993@s.whatsapp.net') {
        const key = {
          remoteJid: from,
          fromMe: conn.user.id.replace(/:[0-9]+/gi, '') == mek.key.participant,
          id: mek.key.id,
          participant: mek.key.participant
        };
        conn.sendMessage(from, {delete: key});
      }
    
    /*if (from == '120363043790271792@g.us ') {
        const key = {
          remoteJid: from,
          fromMe: conn.user.id.replace(/:[0-9]+/gi, '') == mek.key.participant,
          id: mek.key.id,
          participant: mek.key.participant
        };
        conn.sendMessage(from, {delete: key});
      }*/

    //===============(AUTO-BAN)=============\\
    const dbids = [];
    for (i = 0; i < adeuscara.length; ++i) {
      dbids.push(adeuscara[i].groupId);
    }
    const isAdeusCara = isGroup && dbids.indexOf(from) >= 0 ? true : false;

    //======================================\\
    letcentralrpg = "120363023849383476@g.us";

    //ARMADURA
    const addProfissaoId = (userId, chatId) => {
      const obj = {
        grupo: chatId,
        pessoa: userId,
        profissao: "Camisa simples",
      };
      profissao.push(obj);
      fs.writeFileSync("./db/json/profissao.json", JSON.stringify(profissao));
    };
    const addProfissao = (userId, chatId, quanto) => {
      let position = false;
      Object.keys(profissao).forEach((i) => {
        if (profissao[i].pessoa === userId && profissao[i].grupo === chatId) {
          position = i;
        }
      });
      if (position !== false) {
        profissao[position].profissao = quanto;
        fs.writeFileSync("./db/json/profissao.json", JSON.stringify(profissao));
      }
    };
    const getProfissao = (userId, chatId) => {
      let position = false;
      Object.keys(profissao).forEach((i) => {
        if (profissao[i].pessoa === userId && profissao[i].grupo === chatId) {
          position = i;
        }
      });
      if (position !== false) {
        return profissao[position].profissao;
      }
    };
    const getProfissao2 = (userId, chatId) => {
      let position = false;
      Object.keys(profissao).forEach((i) => {
        if (profissao[i].pessoa === userId && profissao[i].grupo === chatId) {
          position = i;
        }
      });
      if (position !== false) {
        return profissao[position];
      }
    };

    if (isGroup && !mek.key.fromMe) {
      cg = getProfissao2(
        sender.includes(":")
          ? sender.split(":")[0] + "@s.whatsapp.net"
          : sender,
        letcentralrpg
      );
      if (cg == undefined)
        addProfissaoId(
          sender.includes(":")
            ? sender.split(":")[0] + "@s.whatsapp.net"
            : sender,
          letcentralrpg
        );
    }

    //NOME
    const addNomerpg = (userId, chatId) => {
      const obj = {
        grupo: chatId,
        pessoa: userId,
        nomerpg: "*Nome:* Desconhecido\n*Idade:* Desconhecida",
      };
      nomerpg.push(obj);
      fs.writeFileSync("./db/json/nomerpg.json", JSON.stringify(nomerpg));
    };
    const addNome = (userId, chatId, quanto) => {
      let position = false;
      Object.keys(nomerpg).forEach((i) => {
        if (nomerpg[i].pessoa === userId && nomerpg[i].grupo === chatId) {
          position = i;
        }
      });
      if (position !== false) {
        nomerpg[position].nomerpg = quanto;
        fs.writeFileSync("./db/json/nomerpg.json", JSON.stringify(nomerpg));
      }
    };
    const getNome = (userId, chatId) => {
      let position = false;
      Object.keys(nomerpg).forEach((i) => {
        if (nomerpg[i].pessoa === userId && nomerpg[i].grupo === chatId) {
          position = i;
        }
      });
      if (position !== false) {
        return nomerpg[position].nomerpg;
      }
    };
    const getNome2 = (userId, chatId) => {
      let position = false;
      Object.keys(nomerpg).forEach((i) => {
        if (nomerpg[i].pessoa === userId && nomerpg[i].grupo === chatId) {
          position = i;
        }
      });
      if (position !== false) {
        return nomerpg[position];
      }
    };

    if (isGroup && !mek.key.fromMe) {
      cg = getNome2(
        sender.includes(":")
          ? sender.split(":")[0] + "@s.whatsapp.net"
          : sender,
        letcentralrpg
      );
      if (cg == undefined)
        addNomerpg(
          sender.includes(":")
            ? sender.split(":")[0] + "@s.whatsapp.net"
            : sender,
          letcentralrpg
        );
    }

    //RAN√áA
    const addRancarpg = (userId, chatId) => {
      const obj = {
        grupo: chatId,
        pessoa: userId,
        rancarpg: "*Ran√ßa:* Desconhecido\n*Regi√£o:* Desconhecida",
      };
      rancarpg.push(obj);
      fs.writeFileSync("./db/json/rancca.json", JSON.stringify(rancarpg));
    };

    const addRanca = (userId, chatId, quanto) => {
      let position = false;
      Object.keys(rancarpg).forEach((i) => {
        if (rancarpg[i].pessoa === userId && rancarpg[i].grupo === chatId) {
          position = i;
        }
      });
      if (position !== false) {
        rancarpg[position].rancarpg = quanto;
        fs.writeFileSync("./db/json/rancca.json", JSON.stringify(rancarpg));
      }
    };

    const getRanca = (userId, chatId) => {
      let position = false;
      Object.keys(rancarpg).forEach((i) => {
        if (rancarpg[i].pessoa === userId && rancarpg[i].grupo === chatId) {
          position = i;
        }
      });
      if (position !== false) {
        return rancarpg[position].rancarpg;
      }
    };

    const getRanca2 = (userId, chatId) => {
      let position = false;
      Object.keys(rancarpg).forEach((i) => {
        if (rancarpg[i].pessoa === userId && rancarpg[i].grupo === chatId) {
          position = i;
        }
      });
      if (position !== false) {
        return rancarpg[position];
      }
    };

    if (isGroup && !mek.key.fromMe) {
      cg = getRanca2(
        sender.includes(":")
          ? sender.split(":")[0] + "@s.whatsapp.net"
          : sender,
        letcentralrpg
      );
      if (cg == undefined)
        addRancarpg(
          sender.includes(":")
            ? sender.split(":")[0] + "@s.whatsapp.net"
            : sender,
          letcentralrpg
        );
    }

    //

    // Automate

    premium.expiredCheck(_premium);

    //=================================\\

    if (isUrl(body) && isAntiLink && isMemberAdmin && isBotAdm) {
      linkgpp = await conn.groupInviteCode(from);
      if (!isUrl(body)) return;
      if (budy.match(`${linkgpp}`)) return;
      if (isBot) return;
    }

    if (isUrl(body) && isAntiLink && !isMemberAdmin && isBotAdm) {
      linkgpp = await conn.groupInviteCode(from);
      if (budy.match(`${linkgpp}`))
        return env("Link do nosso grupo, n√£o irei remover.. ");
      if (!isUrl(body)) return;
      env("*Link detectado...*");
      conn.groupParticipantsUpdate(from, [sender], "remove");
    }

    if (!isGroup && isBotAdm && isAntiLink) {
      if (mek.key.fromMe) return;
      if (type == "stickerMessage") return;
      if (type == "audioMessage") return;
      linkgppp = await conn.groupInviteCode(from);
      if (
        (!budy.match(linkgppp) && budy.includes("chat.whatsapp.com/")) ||
        budy.includes("whatsapp.com/")
      ) {
        if (budy.match(linkgppp)) return env("Link de nosso grupo üôÇ");
        if (mek.key.fromMe) return;
        if (isMemberAdmin && isOwner) return;
        env("Adeus bosta");
        conn.groupParticipantsUpdate(from, [sender], "remove");
      }
    }

    //=========(isQuoted/consts)=============\\

    const sendStickerFromUrl = async (to, url) => {
      var names = Date.now() / 10000;
      var download = function (uri, filename, callback) {
        request.head(uri, function (err, res, body) {
          request(uri)
            .pipe(fs.createWriteStream(filename))
            .on("close", callback);
        });
      };
      download(url, "./complement/sticker" + names + ".png", async function () {
        console.log("enviando sticker");
        let filess = "./complement/sticker" + names + ".png";
        let asw = "./complement/sticker" + names + ".webp";
        exec(
          `ffmpeg -i ${filess} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 800:800 ${asw}`,
          (err) => {
            let media = fs.readFileSync(asw);
            conn.sendMessage(
              to,
              { sticker: media },
              {
                sendEphemeral: true,
                contextInfo: { forwardingScore: 50, isForwarded: true },
                quoted: mek,
              }
            );
            fs.unlinkSync(filess);
            fs.unlinkSync(asw);
          }
        );
      });
    };

    //======================================\\

    const getGroup = async function (totalchat) {
      let grup = [];
      let a = [];
      let b = [];
      for (c of totalchat) {
        a.push(c.id);
      }
      for (d of a) {
        if (d && d.includes("g.us")) {
          b.push(d);
        }
      }
      for (e of b) {
        let ingfo = await conn.groupMetadata(e);
        grup.push(ingfo);
      }
      return grup;
    };

    /********** sendFileFromUrl ***************/

    function sendFileFromUrl(link) {
      conn
        .sendMessage(from, { image: { url: link } }, { quoted: mek })
        .catch((e) => {
          env("Erro ao baixar e enviar m√≠dia.");
          console.log(e);
        });
    }

    const sendFileFromUrl2 = async (link, type, options) => {
      hasil = await getBuffer(link);
      await conn.sendMessage(from, hasil, type, options).catch((e) => {
        fetch(link).then((hasil) => {
          conn.sendMessage(from, hasil, type, options).catch((e) => {
            conn.sendMessage(from, { url: link }, type, options).catch((e) => {
              env("_[ ! ] Erro ao baixar e enviar m√≠dia_");
              console.log(e);
            });
          });
        });
      });
    };

    const sendMediaURL = async (to, url, text = "", mids = []) => {
      if (mids.length > 0) {
        text = normalizeMention(to, text, mids);
      }
      const fn = Date.now() / 10000;
      const filename = fn.toString();
      let mime = "";
      var download = function (uri, filename, callback) {
        request.head(uri, function (err, res, body) {
          mime = res.headers["content-type"];
          request(uri)
            .pipe(fs.createWriteStream(filename))
            .on("close", callback);
        });
      };
      download(url, filename, async function () {
        console.log("done");
        let media = fs.readFileSync(filename);
        let type = mime.split("/")[0] + "Message";
        if (mime === "image/gif") {
          type = MessageType.video;
          mime = Mimetype.gif;
        }
        if (mime.split("/")[0] === "audio") {
          mime = Mimetype.mp4Audio;
        }
        conn.sendMessage(to, media, type, {
          quoted: mek,
          Mimetype: mime,
          caption: text,
          contextInfo: { mentionedJid: mids },
        });
        fs.unlinkSync(filename);
      });
    };

    /********** M√ìDULO TOGIF ***************/

    const sendStickerUrl = async (to, url) => {
      console.log(
        color(time, "magenta"),
        color(moment.tz("Asia/Jakarta").format("HH:mm:ss"), "gold"),
        color("Downloading sticker...")
      );
      var names = getRandom(".webp");
      var namea = getRandom(".png");
      var download = function (uri, filename, callback) {
        request.head(uri, function (err, res, body) {
          request(uri)
            .pipe(fs.createWriteStream(filename))
            .on("close", callback);
        });
      };
      download(url, namea, async function () {
        let filess = namea;
        let asw = names;
        require("./lib/exif.js");
        exec(
          `ffmpeg -i ${filess} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${asw}`,
          (err) => {
            exec(
              `webpmux -set exif ./complementos/sticker/data.exif ${asw} -o ${asw}`,
              async (error) => {
                let media = fs.readFileSync(asw);
                connsendMessage(to, media, sticker, zits);
                console.log(
                  color(time, "magenta"),
                  color(moment.tz("Asia/Jakarta").format("HH:mm:ss"), "gold"),
                  color("Enviando sticker com sucesso!")
                );
              }
            );
          }
        );
      });
    };

    // RANKS para leveis
    {
      const levelRole = level.getLevelingLevel(sender, _level);
      var role = "Bronze 5";
      if (levelRole >= 5 && levelRole <= 9) {
        role = "Bronze 4";
      } else if (levelRole >= 10 && levelRole <= 14) {
        role = "Bronze 3";
      } else if (levelRole >= 15 && levelRole <= 19) {
        role = "Bronze 2";
      } else if (levelRole >= 20 && levelRole <= 24) {
        role = "Bronze 1";
      } else if (levelRole >= 25 && levelRole <= 29) {
        role = "Prata 5";
      } else if (levelRole >= 30 && levelRole <= 34) {
        role = "Prata 4";
      } else if (levelRole >= 35 && levelRole <= 39) {
        role = "Prata 3";
      } else if (levelRole >= 40 && levelRole <= 44) {
        role = "Prata 2";
      } else if (levelRole >= 45 && levelRole <= 49) {
        role = "Prata 1";
      } else if (levelRole >= 50 && levelRole <= 54) {
        role = "Ouro 5";
      } else if (levelRole >= 55 && levelRole <= 59) {
        role = "Ouro 4";
      } else if (levelRole >= 60 && levelRole <= 64) {
        role = "Ouro 3";
      } else if (levelRole >= 65 && levelRole <= 69) {
        role = "Ouro 2";
      } else if (levelRole >= 70 && levelRole <= 74) {
        role = "Ouro 1";
      } else if (levelRole >= 75 && levelRole <= 79) {
        role = "Platina 5";
      } else if (levelRole >= 80 && levelRole <= 84) {
        role = "Platina 4";
      } else if (levelRole >= 85 && levelRole <= 89) {
        role = "Platina 3";
      } else if (levelRole >= 90 && levelRole <= 94) {
        role = "Platina 2";
      } else if (levelRole >= 95 && levelRole <= 99) {
        role = "Platina 1";
      } else if (levelRole >= 100 && levelRole <= 124) {
        role = "DEUS ASH 3";
      } else if (levelRole >= 125 && levelRole <= 149) {
        role = "DEUS ASH 2";
      } else if (levelRole >= 150 && levelRole <= 174) {
        role = "DEUS ASH 1";
      } else if (levelRole >= 175 && levelRole <= 199) {
        role = "ASH MAX 2";
      } else if (levelRole >= 200) {
        role = "ASH MAX";
      }
    }

    // Leveling

    if (isGroup && isCmd && !level.isGained(sender) && isLevelingOn) {
      try {
        const currentLevel = level.getLevelingLevel(sender, _level);
        const requiredXp =
          5 * Math.pow(currentLevel, 2) + 50 * currentLevel + 100;
        level.addLevelingXp(sender, 1, _level);
        if (requiredXp <= level.getLevelingXp(sender, _level)) {
          level.addLevelingLevel(sender, 1, _level);
          const userLevel = level.getLevelingLevel(sender, _level);
          const fetchXp = 5 * Math.pow(userLevel, 2) + 50 * userLevel + 100;
          await env(
            `*‚îÄ‚îÄ „Äå LEVEL UP „Äç ‚îÄ‚îÄ*\n\n‚û∏ *Nome*: ${pushname}\n‚û∏ *XP*: ${level.getLevelingXp(
              sender,
              _level
            )} / ${fetchXp}\n‚û∏ *Level*: ${currentLevel} -> ${level.getLevelingLevel(
              sender,
              _level
            )} üÜô \n‚û∏ *Rank*: *${role}*\n\n*‚ïê‚ïê‚ïê„Äò ASH BOT „Äô‚ïê‚ïê‚ïê*`
          );
        }
      } catch (err) {
        console.log(err);
      }
    }

    //========(CONTADOR-DE-MENSAGENS)========\\

    const groupIdscount = [];
    const numbersIds = [];
    for (let obj of countMessage) {
      groupIdscount.push(obj.groupId);
    }
    if (isGroup && groupIdscount.indexOf(from) >= 0) {
      var ind = groupIdscount.indexOf(from);
      for (let obj of countMessage[ind].numbers) {
        numbersIds.push(obj.jid);
      }
      if (numbersIds.indexOf(sender) >= 0) {
        var indnum = numbersIds.indexOf(sender);
        countMessage[ind].numbers[indnum].messages += 1;
        countMessage[ind].numbers[indnum].cmd_messages += isCmd ? 1 : 0;
        fs.writeFileSync(
          "./db/json/countmsg.json",
          JSON.stringify(countMessage, null, 2) + "\n"
        );
      } else {
        const messages = 1;
        const cmd_messages = isCmd ? 1 : 0;
        countMessage[ind].numbers.push({
          jid: sender,
          messages: messages,
          cmd_messages: cmd_messages,
        });
        fs.writeFileSync(
          "./db/json/countmsg.json",
          JSON.stringify(countMessage, null, 2) + "\n"
        );
      }
    } else if (isGroup) {
      countMessage.push({
        groupId: from,
        numbers: [
          {
            jid: sender,
            messages: 2,
            cmd_messages: isCmd ? 1 : 0,
          },
        ],
      });
      fs.writeFileSync(
        "./db/json/countmsg.json",
        JSON.stringify(countMessage, null, 2) + "\n"
      );
    }
    //======================================\\

    //come√ßo do dinheiro
    // ADICIONA UMA QUANTIA DE DINHEIRO NA CONTA DO USU√ÅRIO
    const addATM = (sender) => {
      const obj = { id: sender, dinheiro: 0 };
      dinheiro.push(obj);
      fs.writeFileSync("./db/json/dinheiro.json", JSON.stringify(dinheiro));
    };
    // SISTEMA PARA ADICIONAR/RETIRAR O DINHEIRO DO USU√ÅRIO

    const addKoinUser = (sender, amount) => {
      let position = false;
      Object.keys(dinheiro).forEach((i) => {
        if (dinheiro[i].id === sender) {
          position = i;
        }
      });
      if (position !== false) {
        dinheiro[position].dinheiro += amount;
        fs.writeFileSync("./db/json/dinheiro.json", JSON.stringify(dinheiro));
      }
    };

    //CHECAR O DINHEIRO
    const checkATMuser = (sender) => {
      let position = false;
      Object.keys(dinheiro).forEach((i) => {
        if (dinheiro[i].id === sender) {
          position = i;
        }
      });
      if (position !== false) {
        return dinheiro[position].dinheiro;
      }
    };

    //COMFIRMAR ATM
    const confirmATM = (sender, amount) => {
      let position = false;
      Object.keys(dinheiro).forEach((i) => {
        if (dinheiro[i].id === sender) {
          position = i;
        }
      });
      if (position !== false) {
        dinheiro[position].dinheiro -= amount;
        fs.writeFileSync("./db/json/dinheiro.json", JSON.stringify(dinheiro));
      }
    };

    //BALANCEAMENTO DA MOEDA/DINHERO DO BOT

    const checkATM = checkATMuser(sender);
    try {
      if (checkATM === undefined) addATM(sender);
      const dinheirosaku = Math.floor(Math.random() * 1) + 2; //GANHA ENTRA 10 * 50 POR CADA MSG
      addKoinUser(sender, dinheirosaku);
    } catch (err) {
      console.error(err);
    }

    //======(JOGO-DA-VELHA)=======(Fun√ß√£o)===\\

    //////////_FUN√á√ïES DO JOGO DA VELHA_//////
    const cmde = budy.toLowerCase().split(" ")[0] || "";
    let arrNum = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
    if (fs.existsSync(`./db/tictactoe/db/${from}.json`)) {
      const boardnow = setGame(`${from}`);
      if (budy == "Cex") return env("why");
      if (
        budy.toLowerCase() == "s" ||
        budy.toLowerCase() == "sim" ||
        budy.toLowerCase() == "ok"
      ) {
        if (boardnow.O == sender.replace("@s.whatsapp.net", "")) {
          if (boardnow.status) return env(`O jogo j√° come√ßou antes!`);
          const matrix = boardnow._matrix;
          boardnow.status = true;
          fs.writeFileSync(
            `./db/tictactoe/db/${from}.json`,
            JSON.stringify(boardnow, null, 2)
          );
          const chatAccept = `*üéÆ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏üïπÔ∏è*
                    
‚ùå : @${boardnow.X}
‚≠ï : @${boardnow.O}
               
Sua vez... : @${boardnow.turn == "X" ? boardnow.X : boardnow.O}

${matrix[0][0]}  ${matrix[0][1]}  ${matrix[0][2]}
${matrix[1][0]}  ${matrix[1][1]}  ${matrix[1][2]}
${matrix[2][0]}  ${matrix[2][1]}  ${matrix[2][2]}
`;
          mention(chatAccept);
        }
      } else if (
        budy.toLowerCase() == "n" ||
        budy.toLowerCase() == "n√£o" ||
        budy.toLowerCase() == "no"
      ) {
        if (boardnow.O == sender.replace("@s.whatsapp.net", "")) {
          if (boardnow.status) return env(`O jogo j√° come√ßou!`);
          fs.unlinkSync(`./db/tictactoe/db/${from}.json`);
          mention(
            `@${boardnow.X} *_Infelizmente seu oponente n√£o aceitou o desafio ‚ùåüòï_*`
          );
        }
      }
    }

    if (arrNum.includes(cmde)) {
      const boardnow = setGame(`${from}`);
      if (!boardnow.status)
        return env(`Parece que seu oponente n√£o aceitou o desafio ainda...`);
      if (
        (boardnow.turn == "X" ? boardnow.X : boardnow.O) !=
        sender.replace("@s.whatsapp.net", "")
      )
        return;
      const moving = validmove(Number(budy), `${from}`);
      const matrix = moving._matrix;
      if (moving.isWin) {
        if (moving.winner == "SERI") {
          const chatEqual = `*üéÆ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏üïπÔ∏è*
          
Jogo termina empatado üòê
`;
          env(chatEqual);
          fs.unlinkSync(`./db/tictactoe/db/${from}.json`);
          return;
        }
        const abt = Math.ceil(Math.random() + 4000);
        const winnerJID = moving.winner == "O" ? moving.O : moving.X;
        const looseJID = moving.winner == "O" ? moving.X : moving.O;
        const limWin = Math.floor(Math.random() * 1) + 10;
        const limLoose = Math.floor(Math.random() * 1) + 5;
        const chatWon = `*üéÆ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏üïπÔ∏è*
          
Vencido por @${winnerJID} üòéüëë
`;
        level.addLevelingXp(winnerJID + "@s.whatsapp.net", abt, _level);
        mention(chatWon);
        setTimeout(() => {
          if (fs.existsSync("./db/tictactoe/db/" + from + ".json")) {
            fs.unlinkSync("./db/tictactoe/db/" + from + ".json");
            env(`*üïπÔ∏èJOGO DA VELHA RESETADO...üïπÔ∏è*`);
          } else {
            console.log(
              color(time, "red"),
              color("[ ESPIRADO ]", "magenta"),
              color("Jogo da velha espirado", "red")
            );
          }
        }, 2000000); //20 minutos
        mention(
          `_*ü•≥Parab√©ns @${winnerJID} Voc√™ ganhou "${abt}" em xp por ter ganhado o jogo da velhaüéâ...*_`
        );
        fs.unlinkSync(`./db/tictactoe/db/${from}.json`);
      } else {
        const chatMove = `*üéÆ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏üïπÔ∏è*
          
‚ùå : @${moving.X}
‚≠ï : @${moving.O}

Sua vez : @${moving.turn == "X" ? moving.X : moving.O}

${matrix[0][0]}  ${matrix[0][1]}  ${matrix[0][2]}
${matrix[1][0]}  ${matrix[1][1]}  ${matrix[1][2]}
${matrix[2][0]}  ${matrix[2][1]}  ${matrix[2][2]}
`;
        mention(chatMove);
      }
    }

    //PALA
    if (isAntiPala) {
      if (
        body === `Puta` ||
        body === `Fdp` ||
        body === `Pqp` ||
        body === `Lixo` ||
        body === `Mamaco` ||
        body === `Preto` ||
        body === `Seu preto` ||
        body === `Mendigo` ||
        body === `Vsf` ||
        body === `Bts` ||
        body === `Viado`
      ) {
        if (isMemberAdmin) return;
        if (!isBotAdm) return env(mensagem[0].botadmin);
        setTimeout(() => {
          conn.groupParticipantsUpdate(from, [sender], "remove");
        }, 1000);
      }
    }

    //=================================\\
   

    
     
     
    
    /********** IF DE AUTO RESPONDE TXT ***************/

    if (body === `bot` || body === `Bot` || body === `BOT`) {
      env("Euuuuuu");
      conn.sendMessage(
        from,
        { sticker: { url: `./complement/sticker/eu.webp` } },
        { quoted: mek }
      );
    }

    //VISU MSG
    //await conn.sendReadReceipt(from, mek.key.participant, [mek.key.id]);

    //=================================\\
    if (!isCmd && !isGroup && !bemvindo2.includes(sender)) {
      var menuzin = ` _*Ol√° ${pushname}*_
*Prazer em conhec√™-lo(a), me chamo Toki Bot.üòä*
_Sou uma intelig√™ncia artificial 100% automatizado para ajudar em todo que for poss√≠vel nessa plataforma._

*Estou a sua disposi√ß√£o o dia todo, 24h horas por dia para te ajudar!*

Tenho +300 fun√ß√µes disponiveis para voc√™, dentre elas s√£o:

‚úÖÔ∏è Fazer figurinhas
‚úÖÔ∏è Baixar m√∫sicas/videos
‚úÖ Logos personalizadas
‚úÖÔ∏è Gerenciamento de grupos
‚úÖÔ∏è Edi√ß√µes e envio de fotos
‚úÖ Mini jogos
‚úÖ Pesquisas 

*‚ú®‚ù§Ô∏èEspero que goste e aproveite bastante! ‚ù§Ô∏è‚ú®*

A baixo segue o link do grupo oficial, onde voc√™ pode acompanhar as novidades, e dar as suas sugest√µes!

Obs: 
-para fazer figurinhas mande a midia para depois comentar com /s para ele identificar!
se n√£o fizer isso e mandar direto na foto ele n√£o identifica e cai...

‚ÄºÔ∏è _*LEIA ATENTAMENTE AS REGRAS PARA EVITAR BANIMENTO*_ ‚Äº`;
      conn.sendMessage(
        from,
        {
          text: menuzin,
          footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD",
          buttons: [
            {
              buttonId: `${prefixobot}menu`,
              buttonText: { displayText: "MENU PRINCIPAL üìñ" },
              type: 1,
            },
            {
              buttonId: `${prefixobot}menufigu`,
              buttonText: { displayText: "MENU FIGURINHA üß©" },
              type: 1,
            },
            {
              buttonId: `${prefixobot}regras`,
              buttonText: { displayText: "REGRAS ‚ö†Ô∏è" },
              type: 1,
            },
          ],
        },
        { quoted: whatsapp }
      );

      bemvindo2.push(sender);
      fs.writeFileSync("./db/json/bemvindo2.json", JSON.stringify(bemvindo2));
    }

     //autofigu
 
     
        if(type === "imageMessage") {
          rane = getRandom('.'+'webp')
          buffimg = await getFileBuffer(mek.message.imageMessage, 'image')
        
  const fig_enviar = await createSticker(buffimg, descFig)
  conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})
  
        } else if (type === "videoMessage") {
          var pack = `‚¨î ‡£™€™ üåº ◊Ñ‚ÇäùïÆùñóùñéùñÜùñâùñîùñó:\n‚§∑   Í™∂Õ¢Õ¢Õ¢ùêìùêàÕ¢ùöØ ùêìùöØÕ¢ùêåùêàÕ¢ùöØùêäùúüÍ´Ç\n\nÍí∫ ◊Ñ‚ÇäüëëÃ∑ ùôÅùôñùô°ùôñùôß ùôòùô§ùô¢ ùô§ ùô©ùô§ùô¢ùôûùô§ùô†ùôñ:\n‚§∑   (44) 99743-3716         `
           var author2 = `‚¨î ‡£™€™ ‚ú® ùìºùì≤ùìΩùìÆ:\nlinktr.ee/Tokibot    ‚Ü≤\n\nÍí∫ ◊Ñ‚Çäü§ñÃ∑ ùòΩùôäùôè:\n(44) 99822-0867    ‚Ü≤`
           boij = isQuotedVideo ? mek.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : mek.message.videoMessage
            owgi = await getFileBuffer(boij, 'video')
           await sendVideoAsSticker2(conn, from, owgi, mek, { packname:pack, author:author2})
           
          } 
    
    /*********** SIMI PV ***********/

    /*if (!isCmd && !isGroup && !isSimiPv && !simipv.includes(sender)) {
    
    let simii = args.join(" ") 
    let simihpv = await fetchJson(`https://api-sv2.simsimi.net/v2/?text=${simii}&lc=pt&cf=false`)
    env(simihpv.success);
    fs.writeFileSync('./db/json/simipv.json', JSON.stringify(simipv))
    
    if(type == 'imageMessage') return 
    if(type == 'audioMessage') return 
    if(type == 'stickerMessage') return   
    if(mek.key.fromMe) return 
    
    }

    if (from.endsWith('@s.whatsapp.net') && !isCmd) {
      try {
        const res = await fetchJson(`https://api-sv2.simsimi.net/v2/?text=${body}&lc=pt&cf=false`);
        env(res.success);
      } catch (a) {
        conn.sendMessage(owner, { text: `erro no simi ‚Üì\n\n${a.stack}` });
      }
    }
    */

    switch (argsButton[0]) {
      case "finaki":
        if (argsButton[1] == "nao") return env("*Puxa n√£o foi desta vez üòî*");
        env("*SABIA! EU VENCI KK ü•≥*");
        akinator[0][from] = undefined;
        fs.writeFileSync(
          "./db/json/akinator.json",
          JSON.stringify(akinator, null, 2)
        );
        break;
      case "akinator":
        if (argsButton[1] == "nao") return env("*At√© a pr√≥xima amigo*");
        if (akinator[0][from])
          return env(
            "*Desculpe-me amigo alguem ja est√° jogando, aguarde pra chegar sua vez*"
          );
        akinator[0][from] = {
          id: from,
          player: sender,
          game: new Aki({ region: "pt" }),
        };
        await akinator[0][from].game.start();
        listMessage = {
          text: akinator[0][from].game.question,
          footer: "Mostrar op√ß√µes",
          buttonText: "Op√ß√µes",
          title: "Pergunta",
          sections: [
            {
              title: "Op√ß√µes",
              rows: [
                {
                  rowId: `${prefixobot}respaki 0`,
                  title: "Sim",
                  description: "",
                },
                {
                  rowId: `${prefixobot}respaki 1`,
                  title: "N√£o",
                  description: "",
                },
                {
                  rowId: `${prefixobot}respaki 2`,
                  title: "N√£o sei",
                  description: "",
                },
                {
                  rowId: `${prefixobot}respaki 3`,
                  title: "Provavelmente sim",
                  description: "",
                },
                {
                  rowId: `${prefixobot}respaki 4`,
                  title: "Provavelmente n√£o",
                  description: "",
                },
              ],
            },
          ],
        };
        conn.sendMessage(from, listMessage, { quoted: mek });
        fs.writeFileSync(
          "./db/json/akinator.json",
          JSON.stringify(akinator, null, 2)
        );
        break;
    }

    if (prefix.indexOf(body.slice(0, 1)) < 0) return;

    switch (command) {
      //MENUS

      /* $eval dados = ("")
 numero = dados.replace('-', '')
 number = numero.replace(' ', '')
 num = number.replace(' ', '')
 nums = num.replace('+', '')
 env(nums) */

      case "templatemessageee":
        conn.sendMessage(from, {
          text: "text1",
          footer: "text2 ",
          templateButtons: [
            {
              index: 1,
              urlButton: {
                displayText: "Meu site ",
                url: "https://linktr.ee/tokibot",
              },
            },
            {
              index: 2,
              callButton: {
                displayText: "call me",
                phoneNumber: "+55 44 99743-3716",
              },
            },
            {
              index: 3,
              quickReplyButton: {
                displayText: "teste",
                id: `${prefixobot}tac`,
              },
            },
          ],
        });
        break;

      case "menu":
      case "help":
      case "comandos":
        let menuft = `${Math.floor(Math.random() * 12)}`;

        var menuzin = `‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ‚ñë BEM VINDO AO MENU‚ñë
‚ïû‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚ñΩ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
‚îÇ
‚îÇToki-Beta MD
‚îÇSeu dispositivo: ${adivinha}
‚îÇReportar erro *${prefixobot}reporte <erro>
‚ïû‚ïê‚ü™ *STICKER* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}figupacks*
‚îÇ‚û™ *${prefixobot}attp*
‚îÇ‚û™ *${prefixobot}toimg*
‚îÇ‚û™ *${prefixobot}togif*
‚îÇ
‚ïû‚ïê‚ü™ *ADMINISTRA√á√ÉO* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}rankgm*
‚îÇ‚û™ *${prefixobot}setnome*
‚îÇ‚û™ *${prefixobot}setdesc*
‚îÇ‚û™ *${prefixobot}notreleaseconfig*
‚îÇ‚û™ *${prefixobot}releaseconfig*
‚îÇ‚û™ *${prefixobot}closed*
‚îÇ‚û™ *${prefixobot}open*
‚îÇ‚û™ *${prefixobot}notif*
‚îÇ‚û™ *${prefixobot}promote*
‚îÇ‚û™ *${prefixobot}ban*
‚îÇ‚û™ *${prefixobot}demote*
‚îÇ‚û™ *${prefixobot}add*
‚îÇ‚û™ *${prefixobot}rstlink*
‚îÇ‚û™ *${prefixobot}leave*
‚îÇ
‚ïû‚ïê‚ü™ *ADMINISTRA√á√ÉO* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}antilink [1/0]*
‚îÇ‚û™ *${prefixobot}antifake [1/0]*
‚îÇ‚û™ *${prefixobot}game [1/]*
‚îÇ‚û™ *${prefixobot}nsfw [1/]*
‚îÇ‚û™ *${prefixobot}antipala [1/]*
‚îÇ
‚ïû‚ïê‚ü™ *AKINATOR* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}akinator* 
‚îÇ‚û™ *${prefixobot}resetaki*
‚îÇ
‚ïû‚ïê‚ü™ *JOGOS* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}diga*
‚îÇ
‚ïû‚ïê‚ü™ *JOGOS* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}tac*
‚îÇ‚û™ *${prefixobot}euja*
‚îÇ‚û™ *${prefixobot}rr*
‚îÇ‚û™ *${prefixobot}round6*
‚îÇ‚û™ *${prefixobot}slot*
‚îÇ‚û™ *${prefixobot}slot2*
‚îÇ
‚ïû‚ïê‚ü™ *ENTRETENIMENTO* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}rankbaiano*
‚îÇ‚û™ *${prefixobot}ranklindo*
‚îÇ‚û™ *${prefixobot}ranknazista*
‚îÇ‚û™ *${prefixobot}rankgostoso*
‚îÇ‚û™ *${prefixobot}rankfeio*
‚îÇ‚û™ *${prefixobot}rankmacaco*
‚îÇ‚û™ *${prefixobot}rankgay*
‚îÇ‚û™ *${prefixobot}rankcorno*
‚îÇ‚û™ *${prefixobot}perfil*
‚îÇ‚û™ *${prefixobot}abra√ßar*
‚îÇ‚û™ *${prefixobot}beijar*
‚îÇ‚û™ *${prefixobot}tapa*
‚îÇ‚û™ *${prefixobot}chance* 
‚îÇ‚û™ *${prefixobot}gay* [@]
‚îÇ‚û™ *${prefixobot}pau*
‚îÇ‚û™ *${prefixobot}gado* [@]
‚îÇ‚û™ *${prefixobot}morte*
‚îÇ
‚ïû‚ïê‚ü™ *BANCO RUBY* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}saldo*
‚îÇ‚û™ *${prefixobot}pix*
‚îÇ‚û™ *${prefixobot}profissao*
‚îÇ
‚ïû‚ïê‚ü™ *LOGOS* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}logos* nome
‚îÇ‚û™ *${prefixobot}loli
‚îÇ
‚ïû‚ïê‚ü™ *ESCRITAS* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}liza*
‚îÇ‚û™ *${prefixobot}bart*
‚îÇ‚û™ *${prefixobot}monica*
‚îÇ‚û™ *${prefixobot}bolsonaro*
‚îÇ‚û™ *${prefixobot}papel* 
‚îÇ‚û™ *${prefixobot}plaquinha*
‚îÇ
‚ïû‚ïê‚ü™ *HENTA +18* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}ahegao*
‚îÇ‚û™ *${prefixobot}hentai*
‚îÇ‚û™ *${prefixobot}ero*
‚îÇ‚û™ *${prefixobot}pussyanime*
‚îÇ‚û™ *${prefixobot}masturbation*
‚îÇ
‚ïû‚ïê‚ü™ *HENTA LITE* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}waifu*
‚îÇ‚û™ *${prefixobot}shinobu*
‚îÇ‚û™ *${prefixobot}thighs*
‚îÇ
‚ïû‚ïê‚ü™ *+18* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}utaka*
‚îÇ‚û™ *${prefixobot}mia*
‚îÇ‚û™ *${prefixobot}pussy*
‚îÇ‚û™ *${prefixobot}malkova*
‚îÇ‚û™ *${prefixobot}belle*
‚îÇ
‚ïû‚ïê‚ü™ *IMAGEM* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}placas*
‚îÇ‚û™ *${prefixobot}coffee*
‚îÇ‚û™ *${prefixobot}personagem
‚îÇ‚û™ *${prefixobot}metadinha*
‚îÇ
‚ïû‚ïê‚ü™ *V√çDEO* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}saycat*
‚îÇ
‚ïû‚ïê‚ü™ *DONWLOADS* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}play*
‚îÇ‚û™ *${prefixobot}ytmp3* 
‚îÇ‚û™ *${prefixobot}ytaudio2* 
‚îÇ‚û™ *${prefixobot}ytmp4*
‚îÇ‚û™ *${prefixobot}ytmp42*
‚îÇ‚û™ *${prefixobot}ytsrc* 
‚îÇ‚û™ *${prefixobot}Instagram*
‚îÇ‚û™ *${prefixobot}tiktok*
‚îÇ‚û™ *${prefixobot}twitter*
‚îÇ‚û™ *${prefixobot}facebook*
‚îÇ
‚ïû‚ïê‚ü™ *PESQUISAR* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}jogo*
‚îÇ‚û™ *${prefixobot}google*
‚îÇ‚û™ *${prefixobot}achar*
‚îÇ‚û™ *${prefixobot}wallpaper*
‚îÇ‚û™ *${prefixobot}celular*
‚îÇ‚û™ *${prefixobot}wikipedia*
‚îÇ‚û™ *${prefixobot}pinterest*
‚îÇ‚û™ *${prefixobot}cep*
‚îÇ‚û™ *${prefixobot}ddd*
‚îÇ‚û™ *${prefixobot}cep*
‚îÇ
‚ïû‚ïê‚ü™ *PREMIUM* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}cc*
‚îÇ‚û™ *${prefixobot}cc2*
‚îÇ‚û™ *${prefixobot}gerarcpf*
‚îÇ‚û™ *${prefixobot}gnum*
‚îÇ‚û™ *${prefixobot}formatnum*
‚îÇ‚û™ *${prefixobot}tempmail*
‚îÇ‚û™ *${prefixobot}play*
‚îÇ‚û™ *${prefixobot}ytmp3*
‚îÇ‚û™ *${prefixobot}ytaudio2*
‚îÇ
‚ïû‚ïê‚ü™ *FERRAMENTAS* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}tomp3* 
‚îÇ‚û™ *${prefixobot}parimp* 
‚îÇ‚û™ *${prefixobot}fotogb*
‚îÇ‚û™ *${prefixobot}admins* 
‚îÇ‚û™ *${prefixobot}infogp* 
‚îÇ‚û™ *${prefixobot}calcular*
‚îÇ‚û™ *${prefixobot}misturar* 
‚îÇ‚û™ *${prefixobot}semoji* 
‚îÇ
‚ïû‚ïê‚ü™ *DONO* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇ‚û™ *${prefixobot}criarlista*
‚îÇ‚û™ *${prefixobot}prem*
‚îÇ‚û™ *${prefixobot}tmprem*
‚îÇ‚û™ *${prefixobot}gtoken*
‚îÇ‚û™ *${prefixobot}crashuser*
‚îÇ‚û™ *${prefixobot}idchat*
‚îÇ‚û™ *${prefixobot}joingroup*
‚îÇ‚û™ *${prefixobot}unblock*
‚îÇ‚û™ *${prefixobot}block*
‚îÇ‚û™ *${prefixobot}eval*
‚îÇ‚û™ *${prefixobot}exec*
‚îÇ‚û™ *${prefixobot}mek*
‚îÇ‚û™ *${prefixobot}ping*
‚îÇ‚û™ *${prefixobot}bug*
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;
        conn.sendMessage(
          from,
          {
            image: { url: `./complement/menus/${menuft}.jpg` },
            caption: menuzin,
            footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD",
            buttons: [
              {
                buttonId: `${prefixobot}menu`,
                buttonText: { displayText: "MENU PRINCIPAL üìñ" },
                type: 1,
              },
              {
                buttonId: `${prefixobot}menufigu`,
                buttonText: { displayText: "MENU FIGURINHA üß©" },
                type: 1,
              },
              {
                buttonId: `${prefixobot}dono`,
                buttonText: { displayText: "DONO üëë" },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;

      /*case 'menu2':
      let { imageMessage: image } = await require('@adiwajshing/baileys').prepareWAMessageMedia({image: {url: './sla.jpg'}}, {upload: conn.waUploadToServer});
     
     image.fileLength.low = 1073741824;
     image.caption = `${menuzin}`;
     image.contextInfo = {
      mentionedJid: [],
      stanzaId: mek.key.id,
      participant: sender,
      quotedMessage: info
     };
     
     conn.relayMessage(from, {imageMessage: image}, {messageId: require('@adiwajshing/baileys').generateMessageID(), additionalAttributes: {}});
     break
     */
      //COMANDOS OWNER

      case "aluguel":
      case "alugar": 
      case "vip":
        let alugarr = `‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ                PRE√áOS 
‚ïû‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚ñΩ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
‚îÇ
‚îÇ‚û™ üí∞M√©todo de pagamento: *PIX*
‚îÇ
‚îÇ
‚îÇ‚û™ *üíµR$ 4,00* = VIP (por 7 dias)
‚îÇ‚û• poder√° add o bot em 3 grupos
‚îÇ
‚îÇ‚û™ *üíµR$ 6,99* = VIP (por 15 dias)
‚îÇ‚û• poder√° add o bot em 3
‚îÇ
‚îÇ‚û™ *üíµR$ 15,00* = VIP (por 30 dias)
‚îÇ‚û• poder√° add o bot em 5 grupos
‚îÇ
‚îÇ‚û™ *üíµR$ 90,00* = VIP (vip anual)
‚îÇ‚û• poder√° add o bot em 7 grupos
‚îÇ
‚îÇ‚û™ *üíµR$ 200,00* = VIP (Permanente)
‚îÇ‚û• poder√° add o bot em 7 grupos
‚îÇ
‚ïû‚ïê‚ü™ *‚îÇ‚úÖVANTAGENS‚îÇ‚úÖ* ‚ü´‚ïê‚ïê‚ïê‚ïê
‚îÇ
‚îÇüî∏Ô∏èAdicionar o bot em grupos
‚îÇüî∏Ô∏èAcesso a conte√∫do +18
‚îÇüî∏Ô∏èGerenciamento de grupos.
‚îÇüî∏Ô∏èAdministra√ß√£o do grupo
‚îÇüî∏Ô∏èAcesso a mini games exclusivos.
‚îÇüî∏Ô∏èAcesso a comandos/menus exclusivos.
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;
        conn.sendMessage(
          from,
          {
            text: alugarr,
            footer: "Escolha um formato de contato abaixo",
            buttons: [
              {
                buttonId: `${prefixobot}dono`,
                buttonText: { displayText: "Contato" },
                type: 1,
              },
              {
                buttonId: `${prefixobot}linkdono`,
                buttonText: { displayText: "link" },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;
      case "linkdono":
        env("wa.me/5544997433716");
        break;
      /*case 'doar':
      exec('cd pix && php index.php', (err, msg) => {
       if (err) return env(err.message);
      env('‚ö†Ô∏è *PIX DE DOA√á√ÉO DE {valor} GERANDO COM SUCESSO*‚ö†Ô∏è');
       setTimeout(() => {  if (msg) return env(msg);
      }, 500)
      });
      break*/
      case "cpf":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!texto)
          return env(
            `Informe o CPF.\nExemplo de como usar: ${prefixobot}cpf 97067580200`
          );
        let cpf = args.join(" ");
        let cpff = cpf.replace(/\D+/g, "");
        if (isNaN(cpff)) return env("O cpf precisa estar em n√∫mero!");
        if (cpff.length > 11)
          return env(
            "O cpf  ultrapassar 11 d√≠gitos, talvez voc√™ tenha adicionado um n√∫mero a mais!"
          );
        if (cpff.length < 11) return env("O cpf deve conter 11 D√≠gitos!");
        try {
          let cpfn1 = await fetchJson(
            `https://merriodafuu-api.herokuapp.com/api/consulta/cpf3?cpf=${cpff}&apikey=Gremory`
          );
          env(cpfn1.dados.resultado);
        } catch (err) {
          sendButtonText(
            `Cpf ${cpff} n√£o encontrando‚ùó`,
            "Talvez api tenha parado de funcionar, ou caiu apenas.",
            { quoted: mek }
          );
        }
        break;

      case "cpf2":
      case "cpf3":
      case "cpf4":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!texto)
          return env(
            `Informe o CPF.\nExemplo de como usar: ${
              prefixobot + command
            }cpf 97067580200`
          );
        let ccpf = args.join(" ");
        let cpfff = ccpf.replace(/\D+/g, "");
        if (isNaN(cpfff)) return env("O cpf precisa estar em n√∫mero!");
        if (cpfff.length > 11)
          return env(
            "O cpf  ultrapassar 11 d√≠gitos, talvez voc√™ tenha adicionado um n√∫mero a mais!"
          );
        if (cpfff.length < 11) return env("O cpf deve conter 11 D√≠gitos!");
        try {
          let cpfn2 = await fetchJson(
            `https://merriodafuu-api.herokuapp.com/api/consulta/${command}?cpf=${cpfff}&apikey=Gremory`
          );
          env(cpfn2.dados.resultado);
        } catch (err) {
          sendButtonText(
            `Cpf ${cpfff} n√£o encontrando‚ùó`,
            "Talvez api tenha parado de funcionar, ou caiu apenas.",
            { quoted: mek }
          );
        }
        break;

      case "addficha":
        [number, token] = body
          .replace(new RegExp(`${command} `, "gi"), "")
          .slice(1)
          .split("/");
        if (body.replace(new RegExp(`${command} `, "gi"), "").slice(1) == "")
          return env("use assim: ¬øaddficha 558898078824/ficha");
        if (!number) return env("defina o numero");
        if (!token) return env("defina a ficha");
        env(addToken(number, token));
        break;

      case "removerficha":
        if (body.replace(new RegExp(`${command} `, "gi"), "").slice(1) == "")
          return env("coloque o numero do portador da ficha!");
        env(
          removeToken(
            body.replace(new RegExp(`${command} `, "gi"), "").slice(1)
          )
        );
        break;

      case "listarfichas":
        env(getAllTokens().list || getAllTokens());
        break;

      case "fichas":
        env(getTokenByNumber(sender));
        break;

      case "bug":
      case "reporte":
      case "reporta":
        if (!texto) return env("Cad√™ o a mensagem do bug");
        if (texto.length > 500) return env("At√© 500 caracter√≠sticas");
        try {
          let reportt = `[‚ùïùêëùêÑùêèùêéùêëùêì‚ùï]
üë§Reportado por @${sender.split("@")[0]} 
‚úèÔ∏èMensagem: ${texto}`;
          conn.sendMessage("554497433716@s.whatsapp.net", {
            text: reportt,
            mentions: [sender],
          });
        } catch (a) {
          env("Falha ao fazer suporte‚ùó");
        }
        break;
      case "chatvip":
        if (isOwner)
          return env("Voc√™ n√£o tem permiss√£o para estar usando esse comando");
        if (!texto) return env("...");
        conn.sendMessage(
          "120363023849383476@g.us",
          { text: texto, mentions: allMembers },
          { quoted: whatsapp }
        );
        break;

      case "chatnet":
        if (isVini)
          return env("Voc√™ n√£o tem permiss√£o para estar usando esse comando");
        if (!texto) return env("Cad√™ o aviso!?");
        const whatsappv = {
          key: { fromMe: false, participant: `0@s.whatsapp.net` },
          message: {
            extendedTextMessage: {
              text: `Fast 4G - Atualiza√ß√µes`,
              title: "hmm",
            },
          },
        };

        const totic = args.join(" ") || BotName;
        if (
          ((isMedia && !mek.message.videoMessage) || isQuotedSticker) &&
          args.length == 0
        ) {
          media = isQuotedSticker
            ? mek.message.extendedTextMessage.contextInfo.quotedMessage
                .stickerMessage
            : mek.message.stickerMessage;
          rane = getRandom("." + (await getExtension(media.mimetype)));
          img = await getFileBuffer(media, "sticker");
          fs.writeFileSync(rane, img);
          fig = fs.readFileSync(rane);
          var options = {
            sticker: fig,
            mentions: groupMembers.map((i) => i.id),
          };
          conn.sendMessage("120363041425189640@g.us", options);
        } else if (
          ((isMedia && !mek.message.videoMessage) || isQuotedImage) &&
          args.length == 0
        ) {
          media = isQuotedImage
            ? mek.message.extendedTextMessage.contextInfo.quotedMessage
                .imageMessage
            : mek.message.imageMessage;
          rane = getRandom("." + (await getExtension(media.mimetype)));
          img = await getFileBuffer(media, "image");
          fs.writeFileSync(rane, img);
          buff = fs.readFileSync(rane);
          conn.sendMessage(
            "120363041425189640@g.us",
            {
              image: buff,
              caption: totic,
              mentions: groupMembers.map((i) => i.id),
            },
            { quoted: whatsappv }
          );
        } else if (
          ((isMedia && !mek.message.videoMessage) || isQuotedVideo) &&
          args.length == 0
        ) {
          media = isQuotedVideo
            ? mek.message.extendedTextMessage.contextInfo.quotedMessage
                .videoMessage
            : mek.message.videoMessage;
          rane = getRandom("." + (await getExtension(media.mimetype)));
          vid = await getFileBuffer(media, "video");
          fs.writeFileSync(rane, vid);
          buff = fs.readFileSync(rane);
          conn.sendMessage(
            "120363041425189640@g.us",
            {
              video: buff,
              caption: toti,
              mimetype: "video/mp4",
              mentions: groupMembers.map((i) => i.id),
            },
            { quoted: whatsappv }
          );
        } else if (
          ((isMedia && !mek.message.videoMessage) || isQuotedAudio) &&
          args.length == 0
        ) {
          media = isQuotedAudio
            ? mek.message.extendedTextMessage.contextInfo.quotedMessage
                .audioMessage
            : mek.message.audioMessage;
          rane = getRandom("." + (await getExtension(media.mimetype)));
          aud = await getFileBuffer(media, "audio");
          fs.writeFileSync(rane, aud);
          buff = fs.readFileSync(rane);
          conn.sendMessage(
            "120363041425189640@g.us",
            {
              audio: buff,
              mimetype: "audio/mp4",
              ptt: true,
              mentions: groupMembers.map((i) => i.id),
            },
            { quoted: whatsappv }
          );
        } else if (
          ((isMedia && !mek.message.videoMessage) || isQuotedDocument) &&
          args.length == 0
        ) {
          media = isQuotedDocument
            ? mek.message.extendedTextMessage.contextInfo.quotedMessage
                .documentMessage
            : mek.message.documentMessage;
          rane = getRandom("." + (await getExtension(media.mimetype)));
          doc = await getFileBuffer(media, "document");
          fs.writeFileSync(rane, doc);
          buff = fs.readFileSync(rane);
          conn.sendMessage(
            "120363041425189640@g.us",
            {
              document: buff,
              mimetype: "text/plain",
              mentions: groupMembers.map((i) => i.id),
            },
            { quoted: whatsappv }
          );
        } else if (budy) {
          if (q.length < 1) return env("Citar oq?");
          //if(q.startsWith('/'))return env('sai dae arrombado')
          conn.sendMessage(
            "120363041425189640@g.us",
            { text: texto, mentions: groupMembers.map((i) => i.id) },
            { quoted: whatsappv }
          );
        } else {
          env(
            `Responder imagem/documento/gif/adesivo/√°udio/v√≠deo com legenda ${
              prefixobot + command
            }`
          );
        }
        break;

      case "menufigu":
      case "menufig":
        var menufigu = ["figumenu2.mp4", "figumenu.mp4"];
        var menufig = menufigu[Math.floor(Math.random() * menufigu.length)];
        let menufigut = `‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ         MENU FIGURINHA
‚ïû‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚ñΩ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
‚îÇ
‚ïû‚û∏ *${prefixobot}toimg* [Converter figu em foto]
‚ïû‚û∏ *${prefixobot}togif* [Converter figu animada em gif]
‚ïû‚û∏ *${prefixobot}figupack* [Figu de memes]
‚ïû‚û∏ *${prefixobot}attp* [Sua frase]
‚ïû‚û∏ *${prefixobot}renomear* [Renomear figu]
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;

        await conn.sendMessage(
          from,
          {
            video: fs.readFileSync(`./complement/menus/${menufig}`),
            caption: menufigut,
            gifPlayback: true,
          },
          { quoted: selo }
        );
        break;

      case "regra":
      case "regras":
        let textregra = `‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ           REGRAS           
‚ïû‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚ñΩ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
‚îÇ
‚ïû‚û∏Telefonar para o *TokiBot-MD*
‚ïû‚û∏Telefonar para *Propriet√°rio*
‚ïû‚û∏ Floodar comandos
‚ïû‚û∏ Enviar travar
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;
        conn.sendMessage(
          from,
          {
            text: textregra,
            buttons: [
              {
                buttonId: `/termos`,
                buttonText: { displayText: "TERMOS DE RESPONSABILIDADE üìñ" },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;

      case "termos":
        const termm = ["termo1.jpg", "termo2.jpg", "termo3.jpg"];
        const termof = termm[Math.floor(Math.random() * termm.length)];
        var menuzin = `
*üìù TERMOS E POL√çTICAS DE PRIVACIDADE*

1) - Aquele que vier a prejudicar nosso servi√ßo, estar√° permanentemente BANIDO de usufruir-lho.

2) - Ap√≥s a confirma√ß√£o do pagamento, n√£o ser√° poss√≠vel solicitar reembolso.

3) - O cliente n√£o poder√° transferir seu vip para terceiros.

4) A Lei Geral de Prote√ß√£o de Dados Pessoais (LGPD) tem como fundamentos:
O principal objetivo da LGPD √© dar √†s pessoas maior controle sobre suas pr√≥prias informa√ß√µes. A lei estabelece regras para empresas e organiza√ß√µes sobre coleta, uso, armazenamento e compartilhamento de dados pessoais, impondo multas e san√ß√µes no caso de descumprimento.

I - o respeito √† privacidade e a seguran√ßa;
II- a inviolabilidade da intimidade, da honra e da imagem.

5) Todos est√£o sujeito a banimento no bot (caso n√£o siga as regras).

6) Em caso de nossos bots ficar fora de servi√ßo, os clientes ter√£o direito de um aumento no seu prazo de vencimento do vip (relativo ao tempo em que ficou inativo).`;
        conn.sendMessage(
          from,
          {
            image: { url: `./complement/termos/${termof}` },
            caption: menuzin,
            footer: `${BotName}`,
            buttons: [
              {
                buttonId: `$termosaceitoss`,
                buttonText: { displayText: "LI E CONCORDO üìñ" },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;
        case 'tm': case 'bcgroup': case 'transmitir': case 'transmiss√£o': {
          if (!isOwner) return env('n √© dono ')
          if (!q) return env('cade o texto? ')
          let chats = Object.entries(conn.chats).filter(([jid, chat]) => !jid.endsWith('@g.us') && chat.isChats).map(v => v[0])
          let txt = `„Äå TRANSMISS√ÉO DO CRIADOR „Äç\n\n ${q}`
         /// env(`enviando para: ${chats.length} chats`)
          for (let id of chats) {
               let bcbg = 'https://telegra.ph/file/beae9ae0e9bc8a2f54e11.jpg'
               await conn.delay(1500)
               await conn.send2ButtonImg(id, bcbg, text.trim(), wm, 'Menu', '.menu', 'Owner', '.owner', mek)
               conn.sendMessage(
                from,
                {
                  image: { url: `https://telegra.ph/file/beae9ae0e9bc8a2f54e11.jpg` },
                  caption: txt,
                  footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD",
                  buttons: [
                    {
                      buttonId: `${prefixobot}menu`,
                      buttonText: { displayText: "MENU PRINCIPAL üìñ" },
                      type: 1,
                    },
                    {
                      buttonId: `${prefixobot}menufigu`,
                      buttonText: { displayText: "MENU FIGURINHA üß©" },
                      type: 1,
                    },
                    {
                      buttonId: `${prefixobot}dono`,
                      buttonText: { displayText: "DONO üëë" },
                      type: 1,
                    },
                  ],
                },
                { quoted: mek }
              );
             }
          env('enviando...')
        }
          break
      case "termosaceitoss":
        termos.push(sender);
        fs.writeFileSync("./db/json/termos.json", JSON.stringify(termos));
        env("Termos assinados com sucesso ‚úÖ");
        break;
      case "tmpvgp":
        if (isOwner) return env("Apenas meu criador pode utilizar");
        if (!texto) return env("Qual o tema da tm?");
        let texttmpv = texto;
        for (const chat of allMembers) {
          conn.sendMessage(chat, {
            text: texttmpv,
            footer: `‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD`,
            buttons: [
              {
                buttonId: `/owner`,
                buttonText: { displayText: "DONO" },
                type: 1,
              },
            ],
          });
        }
        break;
        case 'attp':     
          puxe = encodeURI(`http://aleatoryapi.herokuapp.com/api/attp?q=${q}&apikey=${keyale}`)
          attp = await getBuffer(puxe)
          fig_enviar = await createSticker(attp, descFig)
          conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})
          break
      case "cekvip":
        let cekvip = `Status vip
*STATUS:* ${isPremium ? "‚úÖ" : "‚ùé"}`;
        env(cekvip);
        break;

      case "criarlista":
        if (isOwner) return env("Apenas meu criador pode utilizar");
        pkt = `‚îè‚îÅ‚îÅ‚îÅ‚îÅ „Äé *ùôµùô∏ùô≤ùô∑ùô∞ ùôøùöÅùô¥ùôºùô∏ùöÑùôº* „Äè ‚îÅ‚îÅ‚îÅ‚îì     
‚î£ *üë§ùôΩùöòùöñùöé:*
‚î£ *üìûùô≤ùöòùöóùöùùöäùöùùöò:* wa.me/
‚î£ *üí∞ùôµùöòùöõùöñùöä ùöçùöé ùöôùöäùöê.:* 
‚î£ *üíµùöÖùöäùöïùöòùöõ ùöôùöäùöêùöò:*
‚î£ *üìÖùô≥ùöäùöùùöä ùöçùöä ùöåùöòùöñùöôùöõùöä:* ${data2}
‚î£ *‚è≥ùô≥ùöäùöùùöä ùöçùöé ùöüùöéùöóùöåùöíùöñùöéùöóùöùùöò:*
‚î£ *üì±ùöùùöíùöôùöò:*
‚îÉ‚û•*üìçùô∂ùöõùöûùöôùöò(ùöú):* `;
        conn.sendMessage(from, { text: pkt }, { quoted: whatsapp });
        break;

      case "joingroup":
        if (!isGroup) return env("Comando apenas para grupo");
        if (isOwner) return env("Apenas meu criador pode utilizar");
        if (!texto) return env("Qual o nome do grupo papai");
        const group = await conn.groupCreate(texto, [
          "554497433716@s.whatsapp.net",
        ]);
        conn.sendMessage(group.id, { text: "Bem vindo papai" });
        break;

      case "idchat":
        if (!isGroup) return env("Comando apenas para grupo");
        env(metadata.id);
        break;
      case "addautorm":
      case "addautoban":
      case "listanegra":
        if (isOwner) return env(";-;");
        if (args.length < 1) return env("Diga o numero sem espa√ßo, + ou tra√ßo");
        var ind = dbids.indexOf(from);
        if (isAdeusCara) {
          var numind = adeuscara[ind].number.indexOf(args[0]);
          if (numind >= 0) return env("*Esse N√∫mero ja esta incluso*");
          adeuscara[ind].number.push(args[0]);
        } else {
          adeuscara.push({
            groupId: from,
            actived: false,
            number: [args[0]],
          });
        }
        fs.writeFileSync(
          "./db/json/adeuscara.json",
          JSON.stringify(adeuscara, null, 2) + "\n"
        );
        env(`*N√∫mero adicionado a lista de autoban*`);
        break;

      case "autoban":
        if (isOwner) return env(";-;");
        if (args.length < 1) return env("Hmmmm");
        if (Number(args[0]) === 1) {
          var ind = dbids.indexOf(from);
          if (isAdeusCara) {
            adeuscara[ind].actived = true;
          } else {
            adeuscara.push({
              groupId: from,
              actived: true,
              number: [],
            });
          }
          fs.writeFileSync(
            "./db/json/adeuscara.json",
            JSON.stringify(adeuscara, null, 2) + "\n"
          );
          env(`Ativou com sucesso o recurso de autoban neste grupo‚úîÔ∏è`);
        } else if (Number(args[0]) === 0) {
          var ind = dbids.indexOf(from);
          if (isAdeusCara) {
            adeuscara[ind].actived = false;
          } else {
            adeuscara.push({
              groupId: from,
              actived: false,
              number: [],
            });
          }
          fs.writeFileSync(
            "./db/json/adeuscara.json",
            JSON.stringify(adeuscara, null, 2) + "\n"
          );
          env(`Desativou com sucesso o recurso de autoban neste grupo‚úîÔ∏è`);
        } else {
          env("1 para ativar, 0 para desativar");
        }
        break;

      case "suiced":
      case "suicida":
      case "crashuser":
        if (isOwner && isAzevedo)
          return env("Voc√™ n√£o t√™m permiss√£o para usar esse comando.");
        if (!texto) return env("Cade o n√∫mero da v√≠tima");
        env("Toki trava zip zapüò°ü•µ");
        let telpr = args.join(" ");
        let craahspp = {
          key: { participant: "0@s.whatsapp.net", remoteJid: "0@g.us" },
          message: { conversation: "nada haver isso a√≠ animal" },
        };

        if (telpr == "11966491483")
          return env("N√£o e poss√≠vel usar crashuser o n√∫mero do silasn.");
        if (telpr == "Seu N√∫mero")
          return env("N√£o e poss√≠vel usar crashuser o n√∫mero do Meliodas.");
        if (telpr == "N√∫mero do bot")
          return env("N√£o e poss√≠vel usar crashuser meu n√∫mero.");
        conn.sendMessage(
          `${telpr}@s.whatsapp.net`,
          { text: "bom dia!" },
          { quoted: craahspp }
        );
        break;

      case "suic√≠dio":
      case "suicidio":
        if (!isGroup) return env("Comando apenas para grupo");
        env("A miguinho cometeu suic√≠dioüòî");
        let seloso = {
          key: { participant: "0@s.whatsapp.net", remoteJid: "0@g.us" },
          message: { conversation: "nada haver isso a√≠ animal" },
        };
        conn.sendMessage(sender, { text: "tess" }, { quoted: seloso });
        break;

      /*case 'suiced':
      case 'suicida':
      case 'crashuser':
      env('Toki trava zip zapüò°ü•µ') 
      if (!texto) return env('Cade o n√∫mero?');
      if (isNaN(texto)) return env('Apenas n√∫mero...')
      if (isOwner && isMods && isMito && isAkashi) return env(';-;')
      const tiimm = args.join(" ") 
      const numsh = tiimm.replace(/\D+/g, '');
      if (numsh == '554497433716') return env('Muito engra√ßadinho vc kkk')
      
      let ccountt = 0;
      let intervall;
      
      selopvk = { key: { participant: "0@s.whatsapp.net", remoteJid: "0@g.us", }, message: {conversation: "nada haver isso a√≠ animal" } }
      
      intervall = setInterval(() => {
       ccountt++;
       if (ccountt == 50) {
         clearInterval(intervall);
       }
      conn.sendMessage(`${numsh}@s.whatsapp.net`, {text: 'tess'}, {quoted: selopvk})
      }, 500);
      
      break*/

      case "suicidagp":
        if (isOwner) return env(";-;");
        env("Toki trava zip zapüò°ü•µ");

        const seloogp = {
          key: { participant: "0@s.whatsapp.net", remoteJid: "0@g.us" },
          message: { conversation: "nada haver isso a√≠ animal" },
        };

        conn.sendMessage(from, { text: "sexo" }, { quoted: seloogp });
        break;

      /*case 'tmmmprem':
       const listvip  = JSON.parse(fs.readFileSync('./db/json/premium.json'))
      const deret = premium.getAllPremiumUser(_premium)
                     teks = '‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ \n‚îÇ            *LISTA DE VIPS*\n‚ïû‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚ñΩ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚îÇ\n'
      let count = 1;
                for (let i = 0; i < deret.length; i++) {
      const pitin = `${premium.getAllPremiumUser(_premium)[i].replace('@c.us', '')}`;
      const tes7 = pitin.replace('@s.whatsapp.net', '')
      const checkExp = ms(premium.getPremiumExpired(deret[i], _premium) - Date.now())
                  teks += `‚îÇVip ${count}\n‚îÇ*Usu√°rio:* @${tes7.split("@")[0]}\n‚îÇ*Tempo*: ${checkExp.days} dia(s) ${checkExp.hours} hora(s) ${checkExp.minutes} minuto(s)\n‚îÇ\n`
      count++;
                }
                teks += `‚îÇüë®üèΩ‚ÄçüíªTotal : ${listvip.length}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`
      env(teks)
      break*/

      case "grupos":
        if (isOwner) return env("recurso so pro dono");
        let groups = require("./db/json/countmsg.json");
        let grouplength = [];
        let texts =
          "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ *Lista de Grupos:* \n‚ïû‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚ñΩ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚îÇ\n";
        for (const group of groups) {
          try {
            const { subject, participants } = await conn.groupMetadata(
              group.groupId
            );
            grouplength.push(group.groupId);
            texts += `‚îÇ *Nome:* ${subject}\n‚îÇ *Id:* ${group.groupId}\n‚îÇ *Membros:*  ${participants.length}\n‚îÇ\n`;
          } catch (a) {}
        }
        texts += `‚îÇ+ Total : ${grouplength.length}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*„Äå *Toki bot* „Äç*‚îÄ‚îÄ‚îÄ‚îÄ`;
        env(texts);
        break;
      case "tmprem":
        if (isOwner) return env("recurso so pro dono");
        const listvip = JSON.parse(fs.readFileSync("./db/json/premium.json"));
        const deret = premium.getAllPremiumUser(_premium);
        teks =
          "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ \n‚îÇ            *LISTA DE VIPS*\n‚ïû‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚ñΩ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚îÇ\n";
        let count = 1;
        let users = [];
        for (let i = 0; i < deret.length; i++) {
          const pitin = `${premium
            .getAllPremiumUser(_premium)
            [i].replace("@c.us", "")}`;
          const tes7 = pitin.replace("@s.whatsapp.net", "");
          const checkExp = ms(
            premium.getPremiumExpired(deret[i], _premium) - Date.now()
          );
          pinga = `Dia ${checkExp.days}`;
          const day = checkExp.days || "0";
          const hours = checkExp.hours || "0";
          const minuto = checkExp.minutes || "0";
          const segudos = "sim";
          const tpem =
            (day != "0" ? day + " dias " : "") +
            (hours != "0" ? hours + " horas e " : "") +
            (minuto != "0" ? minuto + " minutos" : "");
          teks += `‚îÇ *Usu√°rio:* @${tes7}\n‚îÇ *Tempo*: ${tpem}\n‚îÇ\n`;
          users.push(tes7 + "@s.whatsapp.net");
        }
        teks += `‚îÇüë®üèΩ‚Äçüíª *Total* : ${listvip.length}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;
        conn.sendMessage(from, { text: teks.trim(), mentions: users });
        break;
      case "prem":
        if (isOwner) return env("recurso so pro dono");
        mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid;
        if (args[0] === "add") {
          if (mentioned.length === 1) {
            for (let prem of mentioned) {
              if (prem === isOwner)
                return await env("Apenas meu Owner pode usar esse comando");
              premium.addPremiumUser(prem, args[2], _premium);
              await env(
                `*‚îÄ‚îÄ „Äå PREMIUM „Äç ‚îÄ‚îÄ*\n\n‚û∏ *ID*: ${prem}\n‚û∏ *Expira em:* ${
                  ms(toMs(args[2])).days
                } dia(s) ${ms(toMs(args[2])).hours} hora(s) ${
                  ms(toMs(args[2])).minutes
                } minuto(s)`
              );
              conn.sendMessage(prem, {
                text: `‚îÄ‚îÄ „Äå PREMIUM „Äç ‚îÄ‚îÄ\n\nVoc√™ agora √© um membro vip‚ù§Ô∏è\n\n‚û∏ *seu vip expira em:* ${
                  ms(toMs(args[2])).days
                } dia(s) ${ms(toMs(args[2])).hours} hora(s) ${
                  ms(toMs(args[2])).minutes
                } minuto(s)*`,
              });
            }
          } else {
            premium.addPremiumUser(
              args[1] + "@s.whatsapp.net",
              args[2],
              _premium
            );
            await env(
              `*‚îÄ‚îÄ „Äå PREMIUM „Äç ‚îÄ‚îÄ*\n\n‚û∏ *ID*: ${
                args[1]
              }@c.us\n‚û∏ *Expira em:* ${ms(toMs(args[2])).days} dia(s) ${
                ms(toMs(args[2])).hours
              } hora(s) ${ms(toMs(args[2])).minutes} minuto(s)`
            );
            await conn.sendMessage(args[1] + "@s.whatsapp.net", {
              text: `‚îÄ‚îÄ „Äå PREMIUM „Äç ‚îÄ‚îÄ\n\nVoc√™ agora √© um membro vip‚ù§Ô∏è\n\n‚û∏ *seu vip expira em:* ${
                ms(toMs(args[2])).days
              } dia(s) ${ms(toMs(args[2])).hours} hora(s) ${
                ms(toMs(args[2])).minutes
              } minuto(s)`,
            });
          }
        } else if (args[0] === "del") {
          if (!premium.checkPremiumUser(args[1] + "@s.whatsapp.net", _premium))
            return await env(`O usu√°rio ${args[1]} n√£o √© um membro vip!`);
          _premium.slice(
            premium.getPremiumPosition(args[1] + "@s.whatsapp.net", _premium),
            1
          );
          fs.writeFileSync("./db/json/premium.json", JSON.stringify(_premium));
          await env("Erro");
        } else {
          await env(
            `${prefixobot + command} add ou ${prefixobot + command} del`
          );
        }
        break;
      case "gtoken":
        if (isOwner) return env("Comando apenas pro meu dono");
        if (body.slice(7).trim() == "") env("Pra quem ser√° gerando o token?");
        [nome, temp] = body.slice(7).split("|");
        if (!nome || !temp)
          return env(
            "coloque os emojis que vc quer juntar separando-os com +\n exemplo: ¬øjoiemoji üòé+üòù"
          );
        const generateRandomString = (num) => {
          const characters =
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
          let result1 = "";
          const charactersLength = characters.length;
          for (let i = 0; i < num; i++) {
            result1 += characters.charAt(
              Math.floor(Math.random() * charactersLength)
            );
          }

          return result1;
        };

        const displayRandomString = () => {
          let randomStringContainer = document.getElementById("random_string");
          randomStringContainer.innerHTML = generateRandomString(8);
        };
        console.log(generateRandomString(5));

        a = `*Nome:* ${nome}
*Tempo:* ${temp}
*Token:* ${generateRandomString(5)}-${generateRandomString(
          5
        )}-${generateRandomString(5)}-${generateRandomString(5)}`;
        env(a);
        break;
      case "block":
      case "unblock":
        if (isOwner) return env("Comando apenas pro meu dono");
        const tim = args.join(" ");

        var mentioned = mek.message.extendedTextMessage.contextInfo.participant;
        var nuumero = mentioned.replace("@s.whatsapp.net", "");

        var numero = tim.replace("-", "");
        var number = numero.replace(" ", "");
        var num = number.replace(" ", "");
        var numss = num.replace("+", "");
        if (command == "block") {
          await conn.updateBlockStatus(
            `${numss + nuumero}@s.whatsapp.net`,
            "block"
          );
          env("bloqueado com sucesso");
        } else if (command == "unblock") {
          conn.updateBlockStatus(
            `${numss + nuumero}@s.whatsapp.net`,
            "unblock"
          );
          env("Desbloqueado com sucesso!");
        }
        break;
      case "join":
      case "entrar":
        if (isOwner) return env("Comando apenas para meus donos");
        if (!texto) return env("Cade o link do grupo");
        if (!isUrl(args[0]) && !args[0].includes("whatsapp.com"))
          return env("Cade o link do grupo");
        let grupin = args[0].split("https://chat.whatsapp.com/")[1];
        await conn.groupAcceptInvite(grupin);
        env("Entrandoooo");
        break;

      case "owner":
      case "dono":
        pinga = `Nome: silasn
Idade: False,
Frase preferida: H√° duas coisas infinitas: o Universo e a tolice dos Homens.`;
        // em menu de link..//conn.sendMessage(from, {text: pinga, footer: 'Escolha um formato de contato abaixo', templateButtons: [ {index: 1, urlButton: {displayText: 'Whatsapp', url: 'https://wa.me/qr/LCOHSK2URVRXG1'}}, {index: 2, urlButton: {displayText: 'Instagram', url: 'https://instagram.com/sla_silasn?utm_medium=copy_link'}} ]});
        await conn.sendMessage(
          from,
          { contacts: { displayName: "silasn", contacts: [{ vcard }] } },
          { quoted: contatomek }
        );
        break;
      case "vcardowner":
        const sentMsg = await conn.sendMessage(
          from,
          { contacts: { displayName: "silasn", contacts: [{ vcard }] } },
          { quoted: contatomek }
        );
        break;

      case "eval":
        if (!texto) return;
        if (texto == "main") return env("...");
        if (texto == "rm") return env("...");
        if (isOwner && isMods) return env("recurso so pro dono");
        try {
          eval(`(async () => {
          try {
           ${texto};
          } catch(err) {
           env(String(err));
          }
        })();`);
        } catch (err) {
          env(String(err));
        }
        break;

      case "exec":
        if (isOwner) return env("Somente meu propriet√°rio");
        let exexv = texto || "ls";

        exec(exexv, (err, msg) => {
          if (err) return env(err.message);
          if (msg) return env(msg);
        });
        break;

      case "mek":
        conn.sendMessage(
          from,
          { text: JSON.stringify(updateM, null, "\t") },
          { quoted: mek }
        );
        break;

      case "reiniciar":
      case "resetar":
        if (isOwner && isMods) return env(";-;");
        env(`reiniciando...`);
        setTimeout(() => {
          process.exit(1);
          env(`Prontinho ${pushname}`);
        }, 3000);
        break;

      case "ping":
      case "status":
        {
          const used = process.memoryUsage();
          const ram2 = `${(process.memoryUsage().heapUsed / 859 / 859).toFixed(
            2
          )}MB / ${Math.round(require("os").totalmem / 859 / 859)}MB`;
          const cpus = os.cpus().map((cpu) => {
            cpu.total = Object.keys(cpu.times).reduce(
              (last, type) => last + cpu.times[type],
              0
            );
            return cpu;
          });
          const cpu = cpus.reduce(
            (last, cpu, _, { length }) => {
              last.total += cpu.total;
              last.speed += cpu.speed / length;
              last.times.user += cpu.times.user;
              last.times.nice += cpu.times.nice;
              last.times.sys += cpu.times.sys;
              last.times.idle += cpu.times.idle;
              last.times.irq += cpu.times.irq;
              return last;
            },
            {
              speed: 0,
              total: 0,
              times: {
                user: 0,
                nice: 0,
                sys: 0,
                idle: 0,
                irq: 0,
              },
            }
          );
          let timestamp = speed();
          let latensi = speed() - timestamp;
          neww = performance.now();
          oldd = performance.now();
          const platform =
            os.platform()[0].toUpperCase() + os.platform().slice(1);

          respon = `
‚ï≠‚îÄ‚îÄ‚îÄ„Äà *INFORMA√á√ïES DO BOT* „Äâ
‚îÇ
‚îÇ‚û∏ *Nome do bot:* _${BotName}_
‚îÇ‚û∏ *Total de chats:* Null
‚îÇ‚û∏ *Total de grupos:* Null
‚îÇ‚û∏ *Total de pessoas no pv:* Null
‚îÇ‚û∏ *Velocidade:* ${latensi.toFixed(4)} _Secs_
‚îÇ‚û∏ *Tempo ativo:* ${runtime(process.uptime())} 
‚îÇ‚û∏ *Mem√≥ria sendo usada:* 
‚îÇ
${Object.keys(used)
  .map(
    (key, _, arr) =>
      `‚îÇ${key.padEnd(Math.max(...arr.map((v) => v.length)), " ")}: ${formatp(
        used[key]
      )}`
  )
  .join("\n")} 
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

‚ï≠‚îÄ‚îÄ‚îÄ„Äà *INFORMA√á√ïES DO CELULAR* „Äâ
‚îÇ
‚îÇ‚û∏ Bateria : Null
‚îÇ‚û∏ Carregando : N√£o
‚îÇ‚û∏ Uso da ram : *${ram2}*
‚îÇ‚û∏ Plataforma : ${platform}
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;
          env(respon);
        }
        break;
      //FIM

      //RPG MEDIEVAL

      case "manualrpg":
        if (!isGroup) return env("Comando apenas para grupo");
        var sections = [
          {
            title: "Registro de dados.",
            rows: [
              {
                title: "Cadastrar nome e Idade ",
                rowId: `${prefixobot}nickname`,
              },
            ],
          },
        ];

        const racatxtma = `Para est√° participando do rpg via whatsapp, bastar seguir as etapas abaixo.üòâ`;

        const sendbemtx = {
          text: racatxtma,
          footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD-PRIVATE",
          title: "\t\t\t*MANUAL DO RPG*",
          buttonText: "Selecione aqui para come√ßar.",
          sections,
        };

        const sendene = await conn.sendMessage(from, sendbemtx, {
          quoted: mek,
        });
        break;
      case "test":
        if (isOwner) return env("recurso so pro dono");

        let ferroarma = `Blonze\n\nDefesa: +7   Ataque: +5\nResid√™ncia: 9+    Velocidade: +4`;
        let bronzearm = `Ferro\n\nDefesa: +10     Ataque: +5\nResid√™ncia: 11+      Velocidade: +8`;
        let diamarm = `Escalating Diamond\n\nDefesa: +15     Ataque: +7\nResid√™ncia: 15+      Velocidade: +11`;
        let underarma = `Underworld Soul Reaper\n\nDefesa: +21     Ataque: +19\nResid√™ncia: 19+      Velocidade: +14`;

        var sections = [
          {
            title: "üáµ üá™ üáÆ üáπ üá¥ üá∑ üá¶ üá± ",
            rows: [
              {
                title: "Blonze",
                rowId: `${prefixobot}helmetrpg Bronze\n\nDefesa: +7   Ataque: +5\nResid√™ncia: 9+    Velocidade: +4`,
                description:
                  "Defesa: +7   Ataque: +5\nResid√™ncia: 9+    Velocidade: +4",
              },

              {
                title: "Ferro",
                rowId: `${prefixobot}helmetrpg Ferro\n\nDefesa: +10     Ataque: +5\nResid√™ncia: 11+      Velocidade: +8`,
                description:
                  "Defesa: +10     Ataque: +5\nResid√™ncia: 11+      Velocidade: +8",
              },

              {
                title: "Escalating Diamond",
                rowId: `${prefixobot}helmetrpg Escalating Diamond\n\nDefesa: +15     Ataque: +7\nResid√™ncia: 15+      Velocidade: +11`,
                description:
                  "Defesa: +15     Ataque: +7\nResid√™ncia: 15+      Velocidade: +11",
              },

              {
                title: "Underworld Soul Reaper",
                rowId: `${prefixobot}helmetrpg Underworld Soul Reaper\n\nDefesa: +21     Ataque: +19\nResid√™ncia: 19+      Velocidade: +14`,
                description:
                  "Defesa: +21     Ataque: +19\nResid√™ncia: 19+      Velocidade: +14",
              },
            ],
          },
          {
            title:
              "üá¶ üá¥     üá∏ üá™ üá± üá™ üá® üáÆ üá¥ üá≥ üá¶ üá∑     üá™ üá∏ üá∏ üá¶     üá¥ üáµ üá® üá¶ üá¥ ,    üáª üá¥ üá± üáπ üá¶ üá∑ üá¶     üá¶ üá¥     üá≤ üá™ üá≥ üá∫     üá© üá™     üá® üá¥ üá≤ üáµ üá∑ üá¶ üá∑",
            rows: [{ title: "‚Ü©Ô∏è", rowId: "option4" }],
          },
        ];

        const listArmadu = {
          text: "Fa√ßa sua armadura e elimine seus oponentes atrav√©s de criatividade!",
          title: "‚öîÔ∏è *Loja John Witcher* ‚öîÔ∏è",
          buttonText: "Arsenal de armaduras ",
          sections,
        };

        const peituralrpg = await conn.sendMessage(from, listArmadu, {
          quoted: mek,
        });
        break;

      case "invent√°rio":
      case "inventario":
        letcentralrpg = "120363023849383476@g.us";
        let inventariopfg = ` ‚ÑπÔ∏è *DADOS SOBRE USU√ÅRIO* ‚ÑπÔ∏è

${getNome(sender, letcentralrpg)}
*N√≠vel:*
${getRanca(sender, letcentralrpg)}

üì¶ *INVENT√ÅRIO* üì¶

Equipamentos:

*Espada:* Espada de mandeira 

Defesa: +3   Ataque: +5
Resistencia: +3  Velocidade: +7

*Capacete:* pano na cabe√ßa.

*Armadura:* ${getProfissao(sender, letcentralrpg)}

*Cal√ßa:* Cal√ßa de pano.

*Botas:* Botas de couro.`;

        env(inventariopfg);
        break;

      case "nickname":
        if (!isGroup) return env("Comando apenas para grupo");
        if (body.slice(10).trim() == "")
          env(`Informe nome e Idade, separando-os com 
/\n exemplo: ${prefixobot}nickname silas/20`);
        [nomepe, idadepe] = body.slice(10).split("/");
        if (!nomepe || !idadepe)
          return env(
            `coloque o nome e idade separando-os.\n Exemplo: ${prefixobot}nickname silas/20`
          );
        var sections = [
          {
            title: "Selecione uma das op√ß√µes abaixo:",
            rows: [
              {
                title: "Sim",
                rowId: `${
                  prefixobot +
                  `nicknameme10` +
                  ` ` +
                  `*Nome:*` +
                  ` ` +
                  nomepe +
                  `\n` +
                  `*Idade:*` +
                  ` ` +
                  idadepe
                }`,
              },
              { title: "N√£o", rowId: "option4" },
            ],
          },
        ];

        const dadosnomerpg = {
          text: `*Nome:* ${nomepe}\n*Idade!* ${idadepe}`,
          title: "Confirma os dados abaixo?",
          buttonText: "confirmar aqui",
          sections,
        };

        const sendNomeRog = await conn.sendMessage(from, dadosnomerpg, {
          quoted: mek,
        });
        break;

      case "nicknameme10":
        if (!isGroup) return env("Comando apenas para grupo");
        let letcentralrpgg = "120363023849383476@g.us";
        if (args.length < 1) return env("...");
        addNome(sender, letcentralrpgg, args.join(" "));
        let nicktruel = `‚úÖ *Nome e idade registrando* ‚úÖ\n
${args.join(" ")}
`;

        conn.sendMessage(
          from,
          {
            text: nicktruel,
            footer: `Selecione o bot√£o abaixo para pr√≥xima etapa.`,
            buttons: [
              {
                buttonId: `${prefixobot}ran√ßarpg`,
                buttonText: { displayText: "Next step ‚èØÔ∏è" },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;

      case "helmetrpg":
        if (!isGroup) return env("Comando apenas para grupo");
        if (args.length < 1) return env("...");
        let letcentralrpggg = "120363023849383476@g.us";
        addProfissao(sender, letcentralrpggg, args.join(" "));
        env(`‚úÖ *√çtens comprando com sucesso* ‚úÖ*\n
*Armadura:* ${args.join(" ")}
`);
        break;
      //RA√áAS
      case "decentetes10":
        if (!isGroup) return env("Comando apenas para grupo");
        if (args.length < 1) return env("...");
        let letcentrralrpg = "120363023849383476@g.us";
        addRanca(sender, letcentrralrpg, args.join(" "));
        let textran = `‚úÖ Ra√ßa e Regi√£o registrando ‚úÖ*\n
${args.join(" ")}
`;
        conn.sendMessage(
          from,
          {
            text: textran,
            footer: `Selecione o bot√£o abaixo para seu invent√°rio!.`,
            buttons: [
              {
                buttonId: `${prefixobot} invent√°rio`,
                buttonText: { displayText: "Abrir invent√°rio üì¶" },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;

      case "decentes":
        if (!isGroup) return env("Comando apenas para grupo");
        if (body.slice(10).trim() == "")
          env(
            `coloque a ra√ßa e regi√£o separando-os.\n Exemplo: ${prefixobot}decentetes10 Spriggan/Sudeste`
          );
        [especie, regiaorpg] = body.slice(10).split("/");
        if (!especie || !regiaorpg)
          return env(
            `coloque a ra√ßa e regi√£o separando-os.\n Exemplo: ${prefixobot}decentetes10 Spriggan/Sudeste`
          );
        var sections = [
          {
            title: "Selecione uma das op√ß√µes abaixo:",
            rows: [
              {
                title: "Sim",
                rowId: `${prefixobot}decentetes10 *Especie:* ${especie}\n*Regi√£o:* ${regiaorpg}`,
              },
              { title: "N√£o", rowId: "option4" },
            ],
          },
        ];

        const dadoseso = {
          text: `*Esp√©cie:* ${especie}\n*Regi√£o* ${regiaorpg}`,
          title: "Confirma os dados abaixo?",
          buttonText: "Confirmar aqui",
          sections,
        };

        const sendcong = await conn.sendMessage(from, dadoseso, {
          quoted: mek,
        });
        break;

      case "ran√ßarpg":
        if (!isGroup) return env("Comando apenas para grupo");
        var sections = [
          {
            title: "Ra√ßas dispon√≠vel",
            rows: [
              { title: "Spriggan", rowId: `${prefixobot}spriggan` },
              { title: "Salamander", rowId: `${prefixobot}salamander` },
              { title: "Sylph", rowId: `${prefixobot}sylph` },
              { title: "Leprechaun", rowId: `${prefixobot}leprechaun` },
              { title: "Navigation Pixie ", rowId: `${prefixobot}navigation` },
              { title: "Undine", rowId: `${prefixobot}undine` },
              { title: "Cait Sith", rowId: `${prefixobot}caitsith` },
              { title: "Gnomo", rowId: `${prefixobot}gnomo` },
              { title: "Puca", rowId: `${prefixobot}puca` },
              { title: "Imp", rowId: `${prefixobot}imp` },
            ],
          },
        ];

        const racatxt = `Nove ra√ßas de fadas, cujo objetivo √© chegar ao topo!. Voc√™ deve ter certeza de escolha de sua RA√áA, de acordo com sua personalidade e prefer√™ncia. Pois uma vez escolhida, N√ÉO poder√° ser mudado o seu registro. Leia tudo com calma e fa√ßa a escolha certa.`;

        const msgrpgbem = {
          text: racatxt,
          footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD-PRIVATE",
          title: "\t\t\t*Ra√ßas*",
          buttonText: "Selecione aqui",
          sections,
        };

        const rancapersonagem = await conn.sendMessage(from, msgrpgbem, {
          quoted: mek,
        });
        break;

      case "navigation":
        if (!isGroup) return env("Comando apenas para grupo");
        if (isMods) return env("S√≥ mods podem virar Navigation");
        let navigation = `\t\t\t\t*Navigation Pixie [NPC]*

*Nome:* Navigation Pixie [„Éî„ÇØ„Ç∑„Éº„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥].
 
*Capital:* ? 

*Regi√£o:* ?

*Habilidades:* Navega√ß√£o.

*Defini√ß√£o:* Min√∫sculo, cerca de 10cm de altura.

*Descri√ß√£o:* A Navigation Pixie √© um programa de car√°ter pseudo para suporte ao usu√°rio em Alfheim Online. Esses duendes s√£o normalmente utilizados por jogadores que pagar taxas adicionais, a fim de receber informa√ß√µes b√°sicas do sistema atrav√©s de vozes sintetizadas (presumivelmente para servir mapas da √°rea e tal). Eles tamb√©m podem verificar as √°reas para os outros jogadores.
`;

        conn.sendMessage(
          from,
          {
            image: { url: "./rpg/ra√ßas/navigation.jpg" },
            caption: navigation,
            footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD",
            buttons: [
              {
                buttonId: `${prefixobot}decentes ?/?`,
                buttonText: { displayText: "Comfimar." },
                type: 1,
              },
              {
                buttonId: `${prefixobot}ran√ßarpg`,
                buttonText: { displayText: "Escolher outra ra√ßa." },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;

      case "spriggan":
        if (!isGroup) return env("Comando apenas para grupo");
        let spriggan = `\t\t\t\t*Spriggan*

*Nome:* Spriggan [„Çπ„Éó„É™„Ç¨„É≥]

*Capital:* Desconhecida

*Regi√£o:* Fronteira com os Leprechauns para o norte-oeste e as Undines para o sul.

*Habilidades:* Sombras, ilus√£o e ca√ßa ao tesouro.

*Defini√ß√£o:* Asas pretas e tom de pele normalmente escura.

*Descri√ß√£o:* Os Spriggans s√£o uma ra√ßa que se originam a partir da √°rea Ru√≠nas antigas do Oriente. Seu territ√≥rio faz fronteira com os Leprechauns para o norte-oeste e as Undines para o sul. A capital do territ√≥rio Spriggan se assemelha a um templo ou zigurate.
Os Spriggans s√£o conhecidos por terem um tom mais escuro da pele em compara√ß√£o com as outras ra√ßas e s√£o tipicamente associados com a cor preta. Semelhante √†s outras ra√ßas, eles s√£o capazes de voo e s√£o conhecidos por serem mestres da ilus√£o e da ca√ßa ao tesouro. Devido a isso, muitos acreditam que os Spriggans n√£o s√£o uma ra√ßa para ser usado em combate, assim, tornando-a ra√ßa mais impopular em Alfheim Online. 
Os Spriggans s√£o uma das cinco ra√ßas leves, dando-lhes a capacidade de usar a habilidade Run Wall.

*- Habilidades:*

*Flight:*
Como todas as outras ra√ßas, os Spriggans s√£o capazes de usar suas asas para voar. A vibra√ß√£o de suas asas √© conhecido por fazer um som parecido com o de um instrumento de sopro.

*Illusion Magic:*
Embora capazes de usar outros tipos de magia, Spriggans √© o mestre da ilus√£o e, inicialmente, come√ßar com feiti√ßos do tipo ilus√£o.
Treasure Hunting Magic:
Embora capazes de usar outros tipos de magia, Spriggans s√£o conhecidos por serem os mestres de Treasure Hunting Magic, uma magia que os ajude na ca√ßa ao tesouro.

*Wall Run:*
Como uma das ra√ßas leves, os Spriggans s√£o capazes de usar a habilidade Wall Run, que, como o nome sugere, permite-lhes funcionar temporariamente nas paredes. O limite normal a uma dist√¢ncia de dez metros, mas aqueles com uma velocidade extremamente alta corrida s√£o conhecidos por serem capazes de funcionar durante cerca de trinta metros.

*Multi-Weapon Wielding:*
Os Spriggans s√£o capazes de empunhar qualquer tipo de arma.

*Night Vision:*
Spriggans s√£o conhecidos por terem vis√£o noturna, permitindo que eles sejam capazes de ver na escurid√£o quase total. Eles tamb√©m s√£o capazes de lan√ßar um buff que d√° aos outros as mesmas habilidades.`;

        conn.sendMessage(
          from,
          {
            image: { url: "./rpg/ra√ßas/spriggan.jpg" },
            caption: spriggan,
            footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD",
            buttons: [
              {
                buttonId: `${prefixobot}decentes Spriggan/Norte-Oeste `,
                buttonText: { displayText: "Comfimar." },
                type: 1,
              },
              {
                buttonId: `${prefixobot}ran√ßarpg`,
                buttonText: { displayText: "Escolher outra ra√ßa." },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;

      case "salamander":
        if (!isGroup) return env("Comando apenas para grupo");
        let salamander = `\t\t\t\t*Salamander*

*Nome:* Salamander [„Çµ„É≥„Ç∑„Éß„Ç¶„Ç¶„Ç™

*Capital:* Gadan.

*Regi√£o:* Deserto Ares, no sul.

*Habilidades:* Fogo, manejo de armas e ataques ofensivos.
*Defini√ß√£o:* Cabelos normalmente, e asas vermelhas.

*Descri√ß√£o:* Salamanders originam Gadan, localizado no deserto Ares, no sul. Seu territ√≥rio faz fronteira com o territ√≥rio Sylph para o oeste eo territ√≥rio Imp para a direita. Salamanders reivindicar Dragon Valley, um dos tr√™s caminhos para a World Tree.
Devido a seus territ√≥rios adjacentes e da concorr√™ncia na capta√ß√£o de recursos escassos, as Salamanders e os Sylphs t√™m uma rivalidade feroz, a ponto de as duas ra√ßas est√£o atualmente em guerra.

*- Habilidades:*

*Flight:*
Como todas as outras ra√ßas, Salamanders s√£o capazes de brotar asas que lhes permitem voar. No entanto, eles s√£o incapazes de voar subterr√¢neas e dentro masmorras.

*Fire Magic:*
Embora eles s√£o capazes de aprender e usar outros tipos de magia, Salamanders  s√£o os mestres da magia de fogo, tornando-os capazes de conjurar magias de fogo de atributos exclusivos de sua ra√ßa.

*Enhanced Strength:*
Salamaders s√£o conhecidos por serem os jogadores mais fortes em Alfheim Online quando se trata de for√ßa f√≠sica.
`;

        conn.sendMessage(
          from,
          {
            image: { url: "./rpg/ra√ßas/salamander.jpg" },
            caption: salamander,
            footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD",
            buttons: [
              {
                buttonId: `${prefixobot}decentes Salamander/Sul`,
                buttonText: { displayText: "Comfimar." },
                type: 1,
              },
              {
                buttonId: `${prefixobot}ran√ßarpg`,
                buttonText: { displayText: "Escolher outra ra√ßa." },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;

      case "sylph":
        if (!isGroup) return env("Comando apenas para grupo");
        let sylph = `\t\t\t\t*Sylph*

*Nome:* Sylph [„Éï„Çø„Ç™„Éè„ÉÅ„Éâ„É™].

*Capital:* Sylvain.

*Regi√£o:* Sudoeste e situado perto da Ancient Forest. 

*Habilidades:* Vento, alta velocidade e grande capacidade auditiva.
Defini√ß√£o: Asas verdes e cabelos tipicamente verde/loiro.

*Descri√ß√£o:* Sylphs originam de Sylvain , cidade localizada no sudoeste e situado perto da Ancient Forest. Faz fronteira com o territ√≥rio Salamander, a leste e a Cait Sith territ√≥rio no norte.
Devido a seus territ√≥rios adjacentes e da concorr√™ncia na capta√ß√£o de recursos escassos, os Sylphs e as Salamanders t√™m uma rivalidade feroz, a ponto de as duas ra√ßas est√£o atualmente em guerra. 
Os Sylphs s√£o tipicamente associados com a cor verde e, semelhante √†s outras ra√ßas, s√£o capazes de voar. Os Sylphs, juntamente com os Siths Cait, Imps, Spriggans e Undines, s√£o uma das cinco ra√ßas leves, que s√£o capazes de usar o Wall Run.

*- Habilidades:*

*Flight:*
Como todas as outras ra√ßas, os Sylphs s√£o conhecidas por serem capazes de criar asas que lhes permitem voar. A vibra√ß√£o das suas asas, √© conhecido por produzir um som semelhante ao de um instrumento de cordas.

*Stealth:*
Sylphs especializar no uso de magias furtivas que lhes permite esconder de monstros e outros jogadores. Apenas os jogadores com uma capacidade de digitaliza√ß√£o de alto n√≠vel s√£o capazes de ver atrav√©s dessa magia defensiva. Penetra√ß√£o m√°gica √© tamb√©m conhecido por ser capaz de romper esta barreira.

*Enhanced Speed:*
 Sylphs, como os Siths Cait, s√£o conhecidos por serem incrivelmente r√°pido e √°gil. Eles s√£o conhecidos por usar sua velocidade e agilidade maior para fortalecer seus ataques.

*Wind Magic:*
Apesar de serem capazes de aprender outros tipos de magia, atrav√©s da pr√°tica dif√≠cil, Sylphs s√£o conhecidos por serem os mestres da magia do vento.

*Wall Run:*
Como uma das ra√ßas leves, os Sylphs s√£o capazes de usar a habilidade Wall Run, que, como o nome sugere, permite-lhes andar temporariamente nas paredes. O limite normal a uma dist√¢ncia de dez metros, mas aqueles com uma velocidade extremamente alta s√£o conhecidos por serem capazes de funcionar durante cerca de trinta metros.
`;

        conn.sendMessage(
          from,
          {
            image: { url: "./rpg/ra√ßas/sylph.jpg" },
            caption: sylph,
            footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD",
            buttons: [
              {
                buttonId: `${prefixobot}decentes Sylph/Sudoeste`,
                buttonText: { displayText: "Comfimar." },
                type: 1,
              },
              {
                buttonId: `${prefixobot}ran√ßarpg`,
                buttonText: { displayText: "Escolher outra ra√ßa." },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;

      case "leprechaun":
        if (!isGroup) return env("Comando apenas para grupo");
        let leprechaun = `\t\t\t\t*Leprechaun*

*Nome:* Leprechaun [„É¨„Éó„É©„Ç≥„Éº„É≥].

*Capital:* Desconhecida. 

*Regi√£o:* √Årea de recupera√ß√£o do norte.

*Habilidades:* Ferreiros e artesanato.
Defini√ß√£o: Asas mec√¢nicas.

*Descri√ß√£o:* Leprechauns originam da √°rea de recupera√ß√£o do norte. Eles s√£o conhecidos por ser a ra√ßa ferreiro e viver dentro de uma estrutura de f√°brica, como que faz fronteira com o Gnome territ√≥rio no oeste e no Spriggan territ√≥rio no sudeste.
Uma caracter√≠stica marcante que separa o Leprechaun das outras ra√ßas √© das suas asas. Ao contr√°rio das outras ra√ßas que possuem asas de insetos, Leprechauns s√£o aben√ßoados com um par de asas mec√¢nicas.

*- Habilidades:*

*Flight:*
Apesar da diferen√ßa entre a apar√™ncia das suas asas, Leprechauns s√£o capazes de v√¥o, semelhante √† das outras ra√ßas.

*Blacksmith:*
Leprechauns s√£o conhecidos como a ra√ßa ferreiro. Eles s√£o capazes de criar armas de alta qualidade e equipamentos que podem ser vendidos a outros jogadores.
`;

        conn.sendMessage(
          from,
          {
            image: { url: "./rpg/ra√ßas/leprechaun.jpg" },
            caption: leprechaun,
            footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD",
            buttons: [
              {
                buttonId: `${prefixobot}decentes Leprechaun/Norte`,
                buttonText: { displayText: "Comfimar." },
                type: 1,
              },
              {
                buttonId: `${prefixobot}ran√ßarpg`,
                buttonText: { displayText: "Escolher outra ra√ßa." },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;

      case "undine":
        if (!isGroup) return env("Comando apenas para grupo");
        let undine = `\t\t\t\t*Undine*

*Nome:* Undine [„Ç¶„É≥„Éá„Ç£„Éº„Éç].
 
*Capital:* Desconhecido.

*Regi√£o:* Crescent Gulf nas zonas h√∫midas do leste.
 
*Habilidades:* √Ågua, cura e atividades subaqu√°ticas.

*Defini√ß√£o:* Tipicamente cabelo azul.

*Descri√ß√£o:* As Ondinas originam de Crescent Gulf nas zonas h√∫midas do leste e reivindicam o Rainbow Valley um dos tr√™s grandes caminhos para a World Tree. A Capital Unine, √© uma estrutura de castelo, faz fronteira com o territ√≥rio Spriggan no norte e no territ√≥rio Imp no sul.
Os Undines s√£o tipicamente associados com a cor azul. Semelhante √†s outras ra√ßas, os Undines s√£o capazes de voo e s√£o tamb√©m uma das cinco ra√ßas leves, permitindo que os usar a habilidade Run Wall.

*- Habilidades:*

*Support Magic:*
Embora capaz de usar outros tipos de magia, os Undines s√£o especialistas em usar a recupera√ß√£o de alto escal√£o e magia apoio devido √†s suas capacidades m√°gicas de alto n√≠vel.

*Underwater Combat:*
 Devido √† sua afinidade com a √°gua, Undines s√£o especialistas em combate subaqu√°tico.Isso os torna valiosos ativos, quando confrontado com monstros do tipo √°gua.

*Wall Run:*
Como uma das ra√ßas leves, as Ondinas s√£o capazes de usar a habilidade Wall Run, que, como o nome sugere, permite-lhes andar temporariamente nas paredes. O limite normal a uma dist√¢ncia de dez metros, mas aqueles com uma velocidade extremamente alta corrida s√£o conhecidos por serem capazes de durante cerca de trinta metros.
`;

        conn.sendMessage(
          from,
          {
            image: { url: "./rpg/ra√ßas/undine.jpg" },
            caption: undine,
            footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD",
            buttons: [
              {
                buttonId: `${prefixobot}decentes Undine/Leste`,
                buttonText: { displayText: "Comfimar." },
                type: 1,
              },
              {
                buttonId: `${prefixobot}ran√ßarpg`,
                buttonText: { displayText: "Escolher outra ra√ßa." },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;

      case "caitsith":
        if (!isGroup) return env("Comando apenas para grupo");
        let caitsith = `\t\t\t\t*Cait Sith*

*Nome:* Cait Sith [„Ç±„ÉÉ„Éà„Ç∑„Éº].
 
*Capital:* Freelia.

*Regi√£o:* Os Siths Cait provenientes do Oeste e Butterfly Valley

*Habilidades:* Domar besta, agilidade e intelig√™ncia.

*Defini√ß√£o:* Orelhas e rabo de gato.

*Descri√ß√£o:* Os Siths Cait provenientes do Oeste e Butterfly Valley pr√≥pria, um dos tr√™s grandes caminhos para a Butterfly Valley . Castelo da capital Cait Sith de Freelia faz fronteira com o territ√≥rio Puca no norte e no territ√≥rio Sylph no sul.A principal diferen√ßa entre a Cath Sith e as outras ra√ßas √© que a Cath Sith s√£o aben√ßoados com orelhas de gato e caudas que, apesar de n√£o ser um ap√™ndice nativo para os seres humanos, sentindo-se enviar para o c√©rebro atrav√©s de um mecanismo desconhecido. Estes ap√™ndices s√£o excessivamente sens√≠veis e faria com que a Cait Sith para inibir sensa√ß√µes estranhas quando os referidos ap√™ndices s√£o agarrados com for√ßa.
Outra caracter√≠stica √∫nica para a Cait Siths √© a sua capacidade de domar monstros e us√°-los em batalha. Eles tamb√©m s√£o conhecidos por ser uma das cinco ra√ßas de peso leve e s√£o capazes de utilizar a habilidade de andar na parede.

*- Habilidades:*

*Monster Taming:*
Cait Sith s√£o a √∫nica ra√ßa capaz de domar monstros e us√°-los para a batalha. No entanto, eles s√£o incapazes de domar monstros tipo de deus mal, devido √† sua taxa de domar ser igual 0%.

*Enhanced Speed:*
Cait Siths, como os Sylphs, s√£o conhecidos por serem extremamente √°gil. Eles s√£o conhecidos por usar sua velocidade e agilidade maior para fortalecer seus ataques.

*Wall Run:*
Como uma das corridas leves, os Siths Cait s√£o capazes de usar o Wall Run habilidade, que, como o nome sugere, permite-lhes andar temporariamente nas paredes. O limite normal √© uma dist√¢ncia de dez metros, mas aqueles com uma velocidade extremamente alta s√£o conhecidos por serem capazes de fazer durante cerca de trinta metros.`;

        conn.sendMessage(
          from,
          {
            image: { url: "./rpg/ra√ßas/caitsith.jpg" },
            caption: caitsith,
            footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD",
            buttons: [
              {
                buttonId: `${prefixobot}decentes  Cait Sith/Oeste`,
                buttonText: { displayText: "Comfimar." },
                type: 1,
              },
              {
                buttonId: `${prefixobot}ran√ßarpg`,
                buttonText: { displayText: "Escolher outra ra√ßa." },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;

      case "gnomo":
        if (!isGroup) return env("Comando apenas para grupo");
        let gnomo = `\t\t\t\t*Gnomo*

*Nome:* Gnome [„Éé„Éº„É†].

*Capital:* Desconhecido.

*Regi√£o:* Gnomes s√£o os oriundos das √°reas de geada no norte

*Habilidades:* Terra e minera√ß√£o.

*Defini√ß√£o:* Cabelo normalmente castanho.

*Descri√ß√£o:* Gnomes s√£o os oriundos das √°reas de geada no norte. Sua capital √© repleta de cavernas e est√° situado entre o territ√≥rio Leprechaun e o territ√≥rio Puca. Gnomes s√£o tipicamente associados com a cor marrom e s√£o conhecidos por ser a maior ra√ßa Eles s√£o reconhecidos por sua capacidade em minera√ß√£o e sua afinidade com o elemento Terra.

*- Habilidades:*

*Flight:*
Similar √†s outras ra√ßas, gnomos s√£o capazes de brotar asas que lhes permitem voar.

*Earth Magic:*
Embora eles s√£o capazes de aprender outros tipos de magia, atrav√©s da pr√°tica dif√≠cil, Gnomos s√£o conhecidos por serem os mestres da Earth Magic.`;

        conn.sendMessage(
          from,
          {
            image: { url: "./rpg/ra√ßas/gnomo.jpg" },
            caption: gnomo,
            footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD",
            buttons: [
              {
                buttonId: `${prefixobot}decentes Gnomo/Norte`,
                buttonText: { displayText: "Comfimar." },
                type: 1,
              },
              {
                buttonId: `${prefixobot}ran√ßarpg`,
                buttonText: { displayText: "Escolher outra ra√ßa." },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;

      case "puca":
        if (!isGroup) return env("Comando apenas para grupo");
        let puca = `\t\t\t\t*Puca*

*Nome:* Puca [„Éó„Ç´].

*Capital:* Desconhecido

*Regi√£o:* Os Pucas origem no noroeste.

*Habilidades:* M√∫sica.

*Defini√ß√£o:* Cabelo normalmente loiro.

*Descri√ß√£o:* Os Pucas origem no noroeste. Seu capital carnavalesca procurando est√° situado entre o Gnome territ√≥rio no norte e Cait Sith territ√≥rio na regi√£o Sudoeste.Os Pucas s√£o tipicamente associados com a cor dourada e s√£o conhecidos por terem uma afinidade para a m√∫sica, tornando-os capazes de usar a m√∫sica em situa√ß√µes de combate e n√£o-combate.

*- Habilidades:*

*Music Magic:*
Pucas excelentes no uso de sons e m√∫sica em combate. Ao tocar melodias simples, pucas s√£o capazes de atacar e defender e at√© mesmo controlar seus advers√°rios.

*Performance Containment:*
Quando atingem um n√≠vel alto o suficiente, Pucas s√£o capazes de "engarrafamento" e "preservar" as suas performances em um item. Quando o item √© destampado, o desempenho dos Pucas pode ser ouvida como gotas de fluxo de luz prateada para fora da garrafa.`;

        conn.sendMessage(
          from,
          {
            image: { url: "./rpg/ra√ßas/puca.jpg" },
            caption: puca,
            footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD",
            buttons: [
              {
                buttonId: `${prefixobot}decentes Puca/Noroeste`,
                buttonText: { displayText: "Comfimar." },
                type: 1,
              },
              {
                buttonId: `${prefixobot} ran√ßarpg`,
                buttonText: { displayText: "Escolher outra ra√ßa." },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;

      case "imp":
        if (!isGroup) return env("Comando apenas para grupo");
        let improg = `\t\t\t\t*Imp*

*Nome:* Imp [„Ç§„É≥„Éó].

*Capital:* Imps originam da Zona Alpines da regi√£o Sudeste

*Regi√£o:* Zona Alpines da regi√£o Sudeste 

*Habilidades:* Voo subterr√¢neo.

*Defini√ß√£o:* Normalmente cabelo roxo.

*Descri√ß√£o:* Imps originam da Zona Alpines da regi√£o Sudeste. Situado entre a zona des√©rtica das Salamanders no sul e √°rea da Ba√≠a de crescente das Undines , a oeste, o territ√≥rio Imp √© uma regi√£o montanhosa, repleta de cavernas onde os Imps residem. Imps s√£o tipicamente associados com a cor roxa e s√£o conhecidos por terem um toque de roxo em sua pele branca leitosa. Semelhante √†s outras ra√ßas, os Imps s√£o conhecidos criar asas que os tornam capazes de voar. Estas asas assume a forma semelhante √† de um bast√£o de, uma caracter√≠stica √∫nica de as PIM.
Imps, como os Sylphs  Undines, Cait Siths e Spriggans, s√£o uma das cinco corridas leves, dando-lhes a capacidade de usar a habilidade Run Wall.

*- Habilidades:*

*Dark Magic:*
Embora capaz de usar diferentes tipos de magia, Imps excelente no uso de Dark Magic em combate.

*Underground Flight:*
Ao contr√°rio das outras ra√ßas, Imps s√£o conhecidas por serem capazes de voar sem a necessidade de luar e luz solar, tornando poss√≠vel para eles para voar subterr√¢neo e torn√°-los um membro do partido indispens√°vel ao lutar patr√µes subterr√¢neos. No entanto, eles s√£o incapazes de atingir uma altitude de 200 metros.

*Wall Run:*
Como uma das corridas leves, os Imps s√£o capazes de usar a habilidade Run Wall, que, como o nome sugere, permite-lhes funcionar temporariamente nas paredes. O limite normal a uma dist√¢ncia de dez metros, mas aqueles com uma velocidade extremamente alta ra√ßa s√£o conhecidos por serem capazes de funcionar durante cerca de trinta metros. 

*Night Vision:*
 Imps s√£o conhecidos por terem vis√£o noturna, permitindo-lhes ver na escurid√£o quase total. No entanto, esta capacidade √© considerada apenas a ser a segunda √† de um Spriggan.`;

        conn.sendMessage(
          from,
          {
            image: { url: "./rpg/ra√ßas/imp.jpg" },
            caption: imprpg,
            footer: "‚úüüî•‚É¢‚ÉüùôèùôäùôÜùôÑ ùòΩùôä‚Éüùôèüî•‚úü-MD",
            buttons: [
              {
                buttonId: `${prefixobot}decentes Imp/Sudeste`,
                buttonText: { displayText: "Comfimar." },
                type: 1,
              },
              {
                buttonId: `${prefixobot} ran√ßarpg`,
                buttonText: { displayText: "Escolher outra ra√ßa." },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;

      //FIM RPG
      //FRASES

      case "canada":
      case "canad√°":
        if (isMito && isOwner) return env("voc√™ n√£o √© o Canad√°");
        array = ["canada.webp", "canada2.webp"];
        archive = array[Math.floor(Math.random() * array.length)];
        if (type == "extendedTextMessage") {
          MessageKey = {
            key: {
              participant: info.extendedTextMessage.contextInfo.participant,
              id: info.extendedTextMessage.contextInfo.stanzaId,
            },
            message: info.extendedTextMessage.contextInfo.quotedMessage,
          };
          conn.sendMessage(
            from,
            { sticker: { url: `./complement/sticker/${archive}` } },
            { quoted: MessageKey }
          );
        } else {
          conn.sendMessage(
            from,
            { sticker: { url: `./complement/sticker/${archive}` } },
            { quoted: mek }
          );
        }
        break;
      //FIM
      //ATIVOS

      case "game":
        if (!isMemberAdmin && isOwner) return env(mensagem[0].admin);
        if (!isBotAdm) return env(mensagem[0].botadmin);
        if (!isGroup) return env(mensagem[0].grupo);
        if (Number(args[0]) === 1) {
          if (isGame) return env(`Modo ${command} j√° est√° habilitado!`);
          game.push(from);
          fs.writeFileSync("./db/json/game.json", JSON.stringify(game));
          env(
            `Modo *${command} habilitado* üü¢\n\nTodos os jogos foram liberados!`
          );
        } else if (Number(args[0]) === 0) {
          if (!isGame) return env(`${command} j√° est√° desabilitado!`);
          pesquisar = from;
          processo = game.indexOf(pesquisar);
          while (processo >= 0) {
            game.splice(processo, 1);
            processo = welkom.indexOf(pesquisar);
          }
          fs.writeFileSync("./db/json/game.json", JSON.stringify(welkom));
          env(
            `Modo *${command} desabilitado!* üî¥\n\nOs jogos foram bloqueados, para jogar √© preciso que o ADM libere.`
          );
        } else {
          env(`${p + command} 1 para ligar ou ${p + command} 0 para desligar`);
        }
        break;

      case "nsfw":
        if (!isMemberAdmin && isOwner) return env(mensagem[0].admin);
        if (!isBotAdm) return env(mensagem[0].botadmin);
        if (!isGroup) return env(mensagem[0].grupo);
        if (Number(args[0]) === 1) {
          if (isNsfw) return env(`${command} j√° est√° habilitado!`);
          nsfw.push(from);
          fs.writeFileSync("./db/json/nsfw.json", JSON.stringify(nsfw));
          env(
            `Modo *${command} habilitado* üü¢\n\nConte√∫do +18 foi liberado neste grupo (somente usu√°rio VIP pode ter acesso)!`
          );
        } else if (Number(args[0]) === 0) {
          if (!isNsfw) return env(`${command} j√° est√° desabilitado!`);
          pesquisar = from;
          processo = nsfw.indexOf(pesquisar);
          while (processo >= 0) {
            nsfw.splice(processo, 1);
            processo = welkom.indexOf(pesquisar);
          }
          fs.writeFileSync("./db/json/nsfw.json", JSON.stringify(nsfw));
          env(
            `Modo *${command} desabilitado!* üî¥\n\nO conte√∫do +18 foi restringido.`
          );
        } else {
          env(`${p + command} 1 para ligar ou ${p + command} 0 para desligar`);
        }
        break;

      case "antipala":
        if (!isMemberAdmin && isOwner) return env(mensagem[0].admin);
        if (!isBotAdm) return env(mensagem[0].botadmin);
        if (!isGroup) return env(mensagem[0].grupo);
        if (Number(args[0]) === 1) {
          if (isAntiPala) return env(`${command} j√° est√° habilitado!`);
          antipala.push(from);
          fs.writeFileSync("./db/json/antipala.json", JSON.stringify(antipala));
          env(
            `Sistema de *${command} habilitado* üü¢\n\nInsultos n√£o ser√£o tolerados a partir de agora.`
          );
        } else if (Number(args[0]) === 0) {
          if (!isAntiPala) return env(`${command} j√° est√° desabilitado!`);
          pesquisar = from;
          processo = antipala.indexOf(pesquisar);
          while (processo >= 0) {
            antipala.splice(processo, 1);
            processo = antipala.indexOf(pesquisar);
          }
          fs.writeFileSync("./db/json/antipala.json", JSON.stringify(antipala));
          env(
            `Sistema de *${command} desabilitado!* üî¥\n\nQuem mandar palavr√µes n√£o ir√° ser removido do grupo.`
          );
        } else {
          env(`${p + command} 1 para ligar ou ${p + command} 0 para desligar`);
        }
        break;

      case "antiviewonce":
      case "antiview":
        if (!isGroup) return env("Comando apenas para grupo");
        if (args[0] == "1") {
          if (isAntiVO) return env("J√° est√° ativado!!");
          antiviewonce.push(from);
          fs.writeFileSync(
            "./db/json/antiviewonce.json",
            JSON.stringify(antiviewonce)
          );
          env("Antiviewonce foi ativado neste grupo!");
        } else if (args[0] == "0") {
          let akuu = antiviewonce.indexOf(from);
          if (!isAntiVO) return env("J√° est√° desativado");
          antiviewonce.splice(akuu, 1);
          fs.writeFileSync(
            "./db/json/antiviewonce.json",
            JSON.stringify(antiviewonce)
          );
          env("Ativiewonce foi desativado neste grupo!");
        } else {
          env("1 para ativar, 0 para desativar");
        }
        break;

      case "simih":
        if (!isMemberAdmin && isOwner) return env("Comando apenas para admins");
        if (!isGroup) return env("Comando apenas para grupo");
        if (args.length < 1) return env("Hmmmm");
        if (Number(args[0]) === 1) {
          if (isSimi) return env("O modo Simi est√° ativo");
          simi.push(from);
          fs.writeFileSync("./db/json/simi.json", JSON.stringify(simi));
          env("Modo simi ativando com sucesso‚àö");
        } else if (Number(args[0]) === 0) {
          if (isSimi) return env("Simi j√° est√° desativada..");
          simi.splice(from, 1);
          fs.writeFileSync("./db/json/simi.json", JSON.stringify(simi));
          env("Simi desativada com sucesso‚àöÔ∏è");
        } else {
          env(
            `${prefixobot + command} 1 para ativar ou ${
              prefixobot + command
            } 0 para desativar`
          );
        }
        break;

      case "antifake":
        if (!isMemberAdmin && isOwner) return env("Comando apenas para admins");
        if (!isGroup) return env("Comando apenas para grupo");
        if (args.length < 1)
          return env(
            `${prefixobot + command} 1 para ligar ou ${
              prefixobot + command
            } 0 para desligar`
          );
        if (Number(args[0]) === 1) {
          if (isAntifake) return env("Ja esta ativo");
          antifake.push(from);
          fs.writeFileSync("./db/json/antifake.json", JSON.stringify(antifake));
          env("Ativou com sucesso o recurso de antifake neste grupo");
        } else if (Number(args[0]) === 0) {
          if (!isAntifake) return env("Ja esta Desativado");
          pesquisar = from;
          processo = antifake.indexOf(pesquisar);
          while (processo >= 0) {
            antifake.splice(processo, 1);
            processo = antifake.indexOf(pesquisar);
          }
          fs.writeFileSync("./db/json/antifake.json", JSON.stringify(antifake));
          env("Desativou com sucesso o recurso de antifake neste grupo‚úîÔ∏è");
        } else {
          env(
            `${prefixobot + command} 1 para ligar ou ${
              prefixobot + command
            } 0 para desligar`
          );
        }
        break;

      case "antilink":
        if (!isMemberAdmin && isOwner) return env("Comando apenas para admins");
        if (!isGroup) return env("Comando apenas para grupo");
        if (args.length < 1)
          return env(
            `${prefixobot + command} 1 para ligar ou ${
              prefixobot + command
            } 0 para desligar`
          );
        if (Number(args[0]) === 1) {
          if (isAntiLink) return env("Ja esta ativo");
          antilink.push(from);
          fs.writeFileSync("./db/json/antilink.json", JSON.stringify(antilink));
          env("Ativou com sucesso o recurso de antilink neste grupo");
        } else if (Number(args[0]) === 0) {
          if (!isAntiLink) return env("Ja esta Desativado");
          pesquisar = from;
          processo = antilink.indexOf(pesquisar);
          while (processo >= 0) {
            antilink.splice(processo, 1);
            processo = antilink.indexOf(pesquisar);
          }
          fs.writeFileSync("./db/json/antilink.json", JSON.stringify(antilink));
          env("Desativou com sucesso o recurso de antilink neste grupoÔ∏è");
        } else {
          env(
            `${prefixobot + command} 1 para ligar ou ${
              prefixobot + command
            } 0 para desligar`
          );
        }
        break;

      case "leveling":
        if (!isMemberAdmin && isOwner) return env("Comando apenas para admins");
        if (!isGroup) return env("Comando apenas para grupo");
        if (args.length < 1)
          return env(
            `${prefixobot + command} 1 para ligar ou ${
              prefixobot + command
            } 0 para desligar`
          );
        if (Number(args[0]) === 1) {
          if (isLevelingOn) return env("Ja esta ativo");
          _level.push(from);
          fs.writeFileSync("./db/json/level.json", JSON.stringify(_level));
          env("Ativou com sucesso o recurso de leveling neste grupo");
        } else if (Number(args[0]) === 0) {
          if (!isLevelingOn) return env("Ja esta Desativado");
          let levell = from;
          let levell2 = _level.indexOf(levell);
          while (levell2 >= 0) {
            _level.splice(levell2, 1);
            levell2 = antilink.indexOf(levell);
          }
          fs.writeFileSync("./db/json/level.json", JSON.stringify(_level));
          env("Desativou com sucesso o recurso de leveling neste grupoÔ∏è");
        } else {
          env(
            `${prefixobot + command} 1 para ligar ou ${
              prefixobot + command
            } 0 para desligar`
          );
        }
        break;

      //ADMINISTRA√á√ÉO

      case "linkgp":
      case "linkgrupo":
      case "linkgroup":
        if (!isMemberAdmin && isOwner) return env("Comando apenas para admins");
        if (!isGroup) return env("Comando apenas para grupo");
        const codelink = await conn.groupInviteCode(from);
        env("Link do grupo: https://chat.whatsapp.com/" + codelink);
        break;
      case "historico":
      case "atividades":
        if (!isMemberAdmin && isOwner) return env("Comando apenas para admins");
        let jsonn = require("./db/json/countmsg.json");
        let historico = `‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ *Hist√≥rico do grupo:* ${metadata.subject}\n‚ïû‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚ñΩ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚îÇ\n`;
        let members = [];
        for (let i = 0; i < jsonn.length; i++) {
          if (from == jsonn[i].groupId) {
            jsonn[i].numbers.map((index) => {
              let rankk = 1;
              members.push(index.jid);
              historico += `‚îÇüë§ *Numero:* @${
                index.jid.split("@")[0]
              }\n‚îÇüí¨ *Mensagens:* ${index.messages}\n‚îÇüë®üèΩ‚Äçüíª *Comandos:* ${
                index.cmd_messages
              }\n‚îÇ\n`;
            });
            historico += `‚îÇüë®üèΩ‚Äçüíª *Total de registros* : ${jsonn.length}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;
          }
        }
        conn.sendMessage(
          from,
          { text: historico.trim(), mentions: members },
          { quoted: mek }
        );
        break;

      case "vperfil":
        if (!isGroup) return env("Comando apenas para grupo");
        if (groupIdscount.indexOf(from) < 0)
          return env("Minha data base n√£o possu√≠ database desse grupo.");
        var ind = groupIdscount.indexOf(from);
        if (
          mek.message.extendedTextMessage === undefined ||
          mek.message.extendedTextMessage === null
        )
          return env("Marque um n√∫mero ");
        mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid;
        if (numbersIds.indexOf(mentioned[0]) >= 0) {
          var indnum = numbersIds.indexOf(mentioned[0]);
          mentions(
            `üîé *Usu√°rio:* @${
              mentioned[0].split("@")[0]
            }\nüí≠ *Total de Mensagens:* ${
              countMessage[ind].numbers[indnum].messages
            }\nüïµüèΩ *Comandos usados:* ${
              countMessage[ind].numbers[indnum].cmd_messages
            }`,
            mentioned,
            true
          );
        } else {
          mentions(
            `üîé *Usu√°rio:* @${
              mentioned[0].split("@")[0]
            }\nüí≠ *Total de Mensagens:* 0\nüïµüèΩ *Comandos usados:* 0`,
            mentioned,
            true
          );
        }
        break;

      case "perfil":
      case "me":
        if (!isGroup) return env("Comando apenas para grupo");
        let saldo = checkATMuser(sender);
        let pinha = (await conn.fetchStatus(sender)) || "Sem recado";
        const LevelMe = level.getLevelingLevel(sender, _level);
        let perfin = `*‚ï≠‚îÄ‚îÅ‚îÅ‚ïê‚ïê„Äò PERFIL „Äô‚ïê‚ïê‚îÅ‚îÅ‚îÄ‚îÄ*\n‚îÇ
‚îÇüîé *Usu√°rio:* @${sender.split("@")[0]}
‚îÇüë§ *Nome:* ${pushname}
‚îÇüí¨ *Recado:* ${pinha.status}
‚îÇüìù *Profiss√£o:* Desempregado
‚îÇüì± *Plataforma:* ${adivinha}
‚îÇüßß *Premium:* ${isPremium ? "‚úÖ" : "‚ùé"}
‚îÇüè¶ *Saldo:* ${saldo}
‚îÇüÜô *Level*:  ${LevelMe}
‚îÇüíπ *Patente:* ${role}
‚îÇ
‚îÇüë®üèΩ‚Äçüíª *Admin:* ${isMemberAdmin ? "‚úÖ" : "‚ùé"}
‚îÇüíé *Vip:* ${isPremium ? "‚úÖ" : "‚ùé"}
‚îÇüö∑ *Bloqueado:* ‚ùé\n‚îÇ\n‚ï∞‚îÄ‚îÅ‚îÅ‚ïê‚ïê‚îÅ‚îÅ ‚åØ ‚îÅ‚îÅ‚îÄ‚îÄ‚îÅ‚îÅ‚ïê‚ïê`;
        let perfilft = "";

        try {
          perfilft += await conn.profilePictureUrl(sender, "image");
        } catch (a) {
          perfilft +=
            "https://pps.whatsapp.net/v/t61.24694-24/237308573_143481851393318_5947555802364352058_n.jpg?stp=dst-jpg_s96x96&ccb=11-4&oh=1b22f035864d9ae2eee053bba2101b85&oe=6247B04E";
        }
        conn.sendMessage(
          from,
          { image: { url: perfilft }, caption: perfin, mentions: [sender] },
          { quoted: mek }
        );
        break;

      case "level":
        if (!isGroup) return env("Comando apenas para grupo");
        const LevelAtual = level.getLevelingLevel(sender, _level);
        env(`*Nome:* ${pushname}\n*Level:* ${LevelAtual}\n*Patente:* ${role}`);
        break;

      case "rankgm":
      case "rank":
      case "rankgp":
        if (!isGroup) return env("Comando apenas para grupo");
        var ind = groupIdscount.indexOf(from);
        if (countMessage[ind].numbers.length < 3)
          return env("Necessita de registro de 3 usuarios");
        countMessage[ind].numbers.sort((a, b) =>
          a.messages < b.messages ? 1 : -1
        );
        mentioned_jid = [];
        boardi = "üëë Ranking dos membros mais ativos:\n\n";
        try {
          for (let i = 0; i < 3; i++) {
            if (i == 0)
              boardi += `${i + 1}¬∫ ü•á : @${
                countMessage[ind].numbers[i].jid.split("@")[0]
              }\nMensagens: ${
                countMessage[ind].numbers[i].messages
              }\nComandos dados: ${
                countMessage[ind].numbers[i].cmd_messages
              }\n\n`;
            else if (i == 1)
              boardi += `${i + 1}¬∫ ü•à : @${
                countMessage[ind].numbers[i].jid.split("@")[0]
              }\nMensagens: ${
                countMessage[ind].numbers[i].messages
              }\nComandos dados: ${
                countMessage[ind].numbers[i].cmd_messages
              }\n\n`;
            else if (i == 2)
              boardi += `${i + 1}¬∫ ü•â : @${
                countMessage[ind].numbers[i].jid.split("@")[0]
              }\nMensagens: ${
                countMessage[ind].numbers[i].messages
              }\nComandos dados: ${
                countMessage[ind].numbers[i].cmd_messages
              }\n\n`;

            mentioned_jid.push(countMessage[ind].numbers[i].jid);
          }
          mention(boardi, mentioned_jid, true);
        } catch (err) {
          console.log(err);
          await conn.sendMessage(
            from,
            `√© necess√°rio 3 jogadores para se construir um ranking`,
            text,
            { quoted: mek }
          );
        }
        break;

      case "setnome":
        if (!texto) return env("Coloque a descri√ß√£o na frente do comando");
        if (!isGroup) return env("Comando apenas para grupo");
        if (isMemberAdmin && isOwner) return env("voce nao √© adm");
        await conn.groupUpdateSubject(from, `${texto}`);
        env("Nome do grupo alterado com sucesso");
        break;

      case "setdesc":
        if (!isMemberAdmin && isOwner) return env("voce nao √© adm");
        if (!isGroup) return env("Comando apenas para grupo");
        if (!texto) return env("Coloque a descri√ß√£o na frente do comando");
        await conn.groupUpdateDescription(from, `${texto}`);
        env("Descri√ß√£o alterada com sucesso");
        break;

      case "rmghostoff":
        if (args.length < 1)
          return env(
            `Determine quanta s msg m√≠nimas para banir... Exemplo: ${prefixobot}rmghost 3`
          );
        if (!isGroup) return env("Comando apenas para grupo");
        if (!isMemberAdmin && isOwner) return env("voce nao √© adm");
        if (!isBotAdm) return env("Bot nao √© adm");
        if (groupIdscount.indexOf(from) >= 0) {
          for (let obj of groupMembers) {
            if (numbersIds.indexOf(obj.id) >= 0) {
              var indnum = numbersIds.indexOf(obj.id);
              if (countMessage[ind].numbers[indnum].messages <= args[0]) {
                if (MemberAdmin.includes(obj.id)) {
                  mentions(
                    `@${obj.id} ta liberado da inspe√ß√£o por ser admin`,
                    [obj.id],
                    true
                  );
                } else {
                  conn.groupParticipantsUpdate(from, [obj.id], "remove");
                }
              }
            } else {
              if (MemberAdmin.includes(obj.id)) {
                mentions(
                  `@${obj.id} ta liberado da inspe√ß√£o por ser admin`,
                  [obj.id],
                  true
                );
              } else {
                conn.groupParticipantsUpdate(from, [obj.id], "remove");
              }
            }
          }
        }
        break;
      case "open":
      case "abrir":
      case "closed":
      case "fechar":
        if (!isGroup) return env("Comando apenas para grupo");
        if (!isMemberAdmin && isOwner) return env("voce nao √© adm");
        if (!isBotAdm) return env("Bot nao √© adm");
        if (command == "open") {
          await conn.groupSettingUpdate(from, "not_announcement");
        } else if (command == "closed") {
          await conn.groupSettingUpdate(from, "announcement");
        }
        break;

      case "releaseconfig":
      case "notreleaseconfig":
      case "liberarconfig":
      case "naoliberarconfig":
        if (!isGroup) return env("Comando apenas para grupo");
        if (!isMemberAdmin && isOwner) return env("voce nao √© adm");
        if (!isBotAdm) return env("Bot nao √© adm");
        if (command == "releaseconfig") {
          await conn.groupSettingUpdate(from, "unlocked");
        } else if (command == "notreleaseconfig") {
          await conn.groupSettingUpdate(from, "locked");
        } else if (command == "liberarconfig") {
          await conn.groupSettingUpdate(from, "unlocked");
        } else if (command == "naoliberarconfig") {
          await conn.groupSettingUpdate(from, "locked");
        }
        env("Configura√ß√£o do grupo alterada com sucesso");
        break;

      case "infogrupo":
      case "infogp":
      case "infogroup":
        var pinga = `Nome do grupo: ${metadata.subject}
Id do grupo: ${metadata.id}
Dono do grupo: ${metadata.owner}

Descri√ß√£o: ${metadata.desc}`;

        let ppimg = "";

        try {
          ppimg += await conn.profilePictureUrl(from);
        } catch (a) {
          ppimg +=
            "https://pps.whatsapp.net/v/t61.24694-24/237308573_143481851393318_5947555802364352058_n.jpg?stp=dst-jpg_s96x96&ccb=11-4&oh=1b22f035864d9ae2eee053bba2101b85&oe=6247B04E";
        }

        conn.sendMessage(from, {
          image: { url: ppimg },
          caption: pinga,
          buttons: [
            {
              buttonId: `${prefixobot}admins`,
              buttonText: { displayText: "Admins" },
              type: 1,
            },
          ],
          headerType: 4,
        });
        break;

      case "admins":
        teks = `Admins do ${metadata.subject}\n\n`;
        no = 0;
        for (let admon of isAdmins) {
          no += 1;
          teks += `@${admon.split("@")[0]}\n`;
        }
        mention(teks, isAdmins, true);
        break;

      case "rstlink":
      case "redefinirlink":
        if (!isGroup) return env("Comando apenas para grupo");
        if (!isMemberAdmin && isOwner) return env("voce nao √© adm");
        if (!isBotAdm) return env("Bot nao √© adm");
        var code = await conn.groupRevokeInvite(from);
        env("Link do grupo alterado com sucesso‚úì");
        console.log(
          "\033[0;31m" +
            `Link do grupo alterado com sucesso: https://chat.whatsapp.com/${code}` +
            "\033[0m"
        );
        break;
      case "leave":
        if (!isGroup) return env("Comando apenas para grupo");
        if (!isMemberAdmin && isOwner) return env("voce nao √© adm");
        conn.groupLeave(from);
        break;
      case "leavegp":
        let textoleave = `Mensagem autom√°tica
 
Ola, tempo de licen√ßa desse grupo acabou, caso queira renova-la fale com meu dono pelo n√∫mero a baixoüëáüèª
https://wa.me/554497433716`;
        let groupJid = texto;
        if (!groupJid) groupJid = from;
        if (!groupJid.endsWith("@g.us"))
          return env("isso n√£o √© um id de grupo!");
        try {
          conn.sendMessage(
            groupJid,
            { text: textoleave, mentions: allMembers },
            { quoted: whatsapp }
          );
          setTimeout(() => {
            conn.groupLeave(groupJid);
          }, 1500);
          env("Saindo do grupo!");
        } catch (err) {
          await env("N√£o fui poss√≠vel sair do grupo.");
        }
        break;
      case "hidetag":
      case "totag":
      case "marcar":
        const toti = args.join(" ") || BotName;
        if (
          ((isMedia && !mek.message.videoMessage) || isQuotedSticker) &&
          args.length == 0
        ) {
          media = isQuotedSticker
            ? mek.message.extendedTextMessage.contextInfo.quotedMessage
                .stickerMessage
            : mek.message.stickerMessage;
          rane = getRandom("." + (await getExtension(media.mimetype)));
          img = await getFileBuffer(media, "sticker");
          fs.writeFileSync(rane, img);
          fig = fs.readFileSync(rane);
          var options = {
            sticker: fig,
            mentions: groupMembers.map((i) => i.id),
          };
          conn.sendMessage(from, options);
        } else if (
          ((isMedia && !mek.message.videoMessage) || isQuotedImage) &&
          args.length == 0
        ) {
          media = isQuotedImage
            ? mek.message.extendedTextMessage.contextInfo.quotedMessage
                .imageMessage
            : mek.message.imageMessage;
          rane = getRandom("." + (await getExtension(media.mimetype)));
          img = await getFileBuffer(media, "image");
          fs.writeFileSync(rane, img);
          buff = fs.readFileSync(rane);
          conn.sendMessage(
            from,
            {
              image: buff,
              caption: toti,
              mentions: groupMembers.map((i) => i.id),
            },
            { quoted: mek }
          );
        } else if (
          ((isMedia && !mek.message.videoMessage) || isQuotedVideo) &&
          args.length == 0
        ) {
          media = isQuotedVideo
            ? mek.message.extendedTextMessage.contextInfo.quotedMessage
                .videoMessage
            : mek.message.videoMessage;
          rane = getRandom("." + (await getExtension(media.mimetype)));
          vid = await getFileBuffer(media, "video");
          fs.writeFileSync(rane, vid);
          buff = fs.readFileSync(rane);
          conn.sendMessage(
            from,
            {
              video: buff,
              caption: toti,
              mimetype: "video/mp4",
              mentions: groupMembers.map((i) => i.id),
            },
            { quoted: mek }
          );
        } else if (
          ((isMedia && !mek.message.videoMessage) || isQuotedAudio) &&
          args.length == 0
        ) {
          media = isQuotedAudio
            ? mek.message.extendedTextMessage.contextInfo.quotedMessage
                .audioMessage
            : mek.message.audioMessage;
          rane = getRandom("." + (await getExtension(media.mimetype)));
          aud = await getFileBuffer(media, "audio");
          fs.writeFileSync(rane, aud);
          buff = fs.readFileSync(rane);
          conn.sendMessage(
            from,
            {
              audio: buff,
              mimetype: "audio/mp4",
              ptt: true,
              mentions: groupMembers.map((i) => i.id),
            },
            { quoted: mek }
          );
        } else if (
          ((isMedia && !mek.message.videoMessage) || isQuotedDocument) &&
          args.length == 0
        ) {
          media = isQuotedDocument
            ? mek.message.extendedTextMessage.contextInfo.quotedMessage
                .documentMessage
            : mek.message.documentMessage;
          rane = getRandom("." + (await getExtension(media.mimetype)));
          doc = await getFileBuffer(media, "document");
          fs.writeFileSync(rane, doc);
          buff = fs.readFileSync(rane);
          conn.sendMessage(
            from,
            {
              document: buff,
              mimetype: "text/plain",
              mentions: groupMembers.map((i) => i.id),
            },
            { quoted: mek }
          );
        } else if (budy) {
          if (q.length < 1) return env("Citar oq?");
          //if(q.startsWith('/'))return env('sai dae arrombado')
          conn.sendMessage(
            from,
            { text: texto, mentions: groupMembers.map((i) => i.id) },
            { quoted: mek }
          );
        } else {
          env(
            `Responder imagem/documento/gif/adesivo/√°udio/v√≠deo com legenda ${
              prefixobot + command
            }`
          );
        }
        break;

      case "notif":
      case "aviso":
        if (!isGroup) return env("Comando apenas para grupo");
        if (!isMemberAdmin && isOwner) return env("voce nao √© adm");
        if (!texto)
          return env(
            `Coloque o aviso na frente do comando.\nExemplo de como se usar: ${
              prefixobot + command
            } hoje a noite n√£o haver√° sol.`
          );
        teks = `üîî Notifica√ß√£o  de @${
          sender.split("@")[0]
        }\n\nüì®Mensagem: *${texto}*`;
        grouup = await conn.groupMetadata(from);
        member = grouup["participants"];
        jids = [];
        member.map(async (adm) => {
          jids.push(adm.id.replace("c.us", "s.whatsapp.net"));
        });
        await conn.sendMessage(
          from,
          { text: teks, mentions: jids },
          { quoted: mek }
        );
        break;

      case "demote":
      case "rebaixar":
        if (!isGroup) return env("Comando apenas para grupo");
        if (!isMemberAdmin && isOwner) return env("voce nao √© adm");
        if (!isBotAdm) return env("Bot nao √© adm");
        num = `${body.slice(9)}`;
        if (
          mek.message.extendedTextMessage === undefined ||
          mek.message.extendedTextMessage === null
        )
          return env(
            "informe quem devo rebaixar de cargo, marcado a mensagem da pessoa..."
          );
        if (num.length < 1) {
          var mentioned =
            mek.message.extendedTextMessage.contextInfo.participant;
          conn.groupParticipantsUpdate(from, [`${mentioned}`], "demote");
        } else {
          id = [`${num.replace("@", "")}@s.whatsapp.net`];
          conn.groupParticipantsUpdate(from, id, "demote");
        }
        env("Cargo removido com sucesso");
        break;

      case "promote":
      case "promover":
      case "pm":
        if (!isGroup) return env("Comando apenas para grupo");
        if (!isMemberAdmin && isOwner) return env("voce nao √© adm");
        if (!isBotAdm) return env("Bot nao √© adm");
        if (
          mek.message.extendedTextMessage === undefined ||
          mek.message.extendedTextMessage === null
        )
          return env(
            "informe quem devo promover, marcado a mensagem da pessoa..."
          );
        num = `${body.slice(9)}`;
        if (num.length < 1) {
          var mentioned =
            mek.message.extendedTextMessage.contextInfo.participant;
          conn.groupParticipantsUpdate(from, [`${mentioned}`], "promote");
        } else {
          id = [`${num.replace("@", "")}@s.whatsapp.net`];
          conn.groupParticipantsUpdate(from, id, "promote");
        }
        env("Promovido cargo com sucesso");
        break;

      case "ban":
      case "rm":
      case "banir":
        if (!isGroup) return env("Comando apenas para grupo");
        if (!isMemberAdmin && isOwner) return env("voce nao √© adm");
        if (!isBotAdm) return env("Bot nao √© adm");
        num = `${body.slice(9)}`;
        if (
          mek.message.extendedTextMessage === undefined ||
          mek.message.extendedTextMessage === null
        )
          return env(
            "informe quem devo banir, marcado a mensagem da pessoa..."
          );
        if (num.length < 1) {
          var mentioned =
            mek.message.extendedTextMessage.contextInfo.participant;
          conn.groupParticipantsUpdate(from, [`${mentioned}`], "remove");
        } else {
          if (num == IsDonoGo)
            return env("N√£o e poss√≠vel banir o propriet√°rio do grupo");
          id = [`${num.replace("@", "")}@s.whatsapp.net`];
          conn.groupParticipantsUpdate(from, id, "remove");
        }
        env("Banido com sucesso");
        break;
      case "add":
        if (!isGroup) return env("Comando apenas para grupo");
        if (!isMemberAdmin && isOwner) return env("voce nao √© adm");
        if (!isBotAdm) return env("Bot nao √© adm");
        if (
          mek.message.extendedTextMessage === undefined ||
          mek.message.extendedTextMessage === null
        )
          return env(
            "informe quem devo adicionar no grupo novamente, marcado a mensagem da pessoa..."
          );
        num = `${body.slice(9)}`;
        if (num.length < 1) {
          var mentioned =
            mek.message.extendedTextMessage.contextInfo.participant;
          conn.groupParticipantsUpdate(from, [`${mentioned}`], "add");
        } else {
          id = [`${num.replace("@", "")}@s.whatsapp.net`];
          conn.groupParticipantsUpdate(from, id, "add");
        }
        env("Adicionado com sucesso");
        break;
      //FIM
      case "tomp3":
        if (!isQuotedVideo) return env("Marque o video pfv");
        env("perai");
        encmedia = isQuotedVideo
          ? info.extendedTextMessage.contextInfo.quotedMessage.videoMessage
          : info.videoMessage;
        rane = getRandom("." + (await getExtension(encmedia.Mimetype)));
        buffimg = await getFileBuffer(encmedia, "video");
        fs.writeFileSync(rane, buffimg);
        media = rane;
        ran = getRandom(".mp4");
        exec(`ffmpeg -i ${media} ${ran}`, (err) => {
          fs.unlinkSync(media);
          if (err) return env("Falha ao converter v√≠deo para mp3");
          buffer = fs.readFileSync(ran);
          conn.sendMessage(
            from,
            { audio: buffer, mimetype: "audio/mp4" },
            { quoted: mek }
          );
          fs.unlinkSync(ran);
        });
        break;
      case "togif":
        if (!isQuotedSticker) return env("Marque uma figurinha");
        buff = await getFileBuffer(
          info.extendedTextMessage.contextInfo.quotedMessage.stickerMessage,
          "sticker"
        );
        env("Convertendo a figurinha em GIF...");
        a = await webp_mp4(buff);
        mp4 = await getBuffer(a);
        conn.sendMessage(
          from,
          { video: mp4, gifPlayback: true, filename: `stick.gif` },
          { quoted: mek }
        );
        //fs.unlinkSync(buff)
        break;
      case "toimg":
        if (!isQuotedSticker) return env("Marque uma figurinha");
        buff = await getFileBuffer(
          mek.message.extendedTextMessage.contextInfo.quotedMessage
            .stickerMessage,
          "sticker"
        );
        env("perai");
        try {
          conn.sendMessage(from, { image: buff }, { quoted: whatsapp });
        } catch (e) {
          console.log(e);
          env("Erro ao converter figurinha para imagem");
        }
        break;
        case "take":
          if (!isPremium) return env('tu n √© vip')
        if (!isQuotedSticker) return env("Marque uma figurinha");
        buff = await getFileBuffer(
          mek.message.extendedTextMessage.contextInfo.quotedMessage
            .stickerMessage,
          "sticker"
        );
        if (!q.includes('|')) return env("vc tem que separa com | a frase!")
            const text1 = q.split('|')[0]
            const text2 = q.split('|')[1]
        const renome = {
          type: 'full',
          
          pack: `${text1}`,
          author: `${text2}`,
          categories: [
          'üåπ'
          ]
          }
        fig_enviar = await createSticker(buff, renome)
       conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        break
      case "packsfigu":
      case "packfigu":
      case "figupack":
      case "figupacks":
        var sections = [
          {
            title: "Plaquinha",
            rows: [
              {
                title: `Figurinhas aleat√≥rio de Meme`,
                rowId: `${prefixobot}figumeme`,
              },
              {
                title: `Figurinhas aleat√≥rio de Anime`,
                rowId: `${prefixobot}figuanime`,
              },
              {
                title: `Figurinhas aleat√≥rio de Sticker`,
                rowId: `${prefixobot}figudesenho`,
              },
              {
                title: `Figurinhas aleat√≥rio de Roblox`,
                rowId: `${prefixobot}figuroblox`,
              },
              {
                title: `Figurinhas aleat√≥rio de Raiva`,
                rowId: `${prefixobot}figuraiva`,
              },
              {
                title: `Figurinhas aleat√≥rio Engra√ßadas`,
                rowId: `${prefixobot}figuengracado`,
              },
              {
                title: `Figurinhas aleat√≥rio de Beb√™`,
                rowId: `${prefixobot}figubb`,
              },
            ],
          },
        ];
        var listMessage = {
          text: "Escolha um tema de figurinha.",
          footer: "Selecione o tema abaixo.",
          buttonText: "Escolha o tema da sua Figurinha.",
          sections,
        };
        const sendfigus = await conn.sendMessage(from, listMessage, {
          quoted: mek,
        });
        break;

      case "figumeme":
      case "figmeme":
        const memez = `${Math.floor(Math.random() * 130)}`;
        const memeu = `${Math.floor(Math.random() * 130)}`;
        const memep = `${Math.floor(Math.random() * 130)}`;
        const memei = `${Math.floor(Math.random() * 130)}`;

        
        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figumemes/${memez}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figumemes/${memeu}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figumemes/${memep}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figumemes/${memei}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        setTimeout(() => {
          conn.sendMessage(
            from,
            {
              text: "Deseja mais figurinhas de meme?",
              footer: `Escolha uma op√ß√£o abaixo.`,
              buttons: [
                {
                  buttonId: `${prefixobot}figumeme`,
                  buttonText: { displayText: "MAIS FIGURINHA" },
                  type: 1,
                },
              ],
            },
            { quoted: mek }
          );
        }, 2090);
        break;

      case "figudesenho":
        const desenhoa = `${Math.floor(Math.random() * 102)}`;
        const desenhoe = `${Math.floor(Math.random() * 102)}`;
        const desenhoi = `${Math.floor(Math.random() * 102)}`;
        const desenhoo = `${Math.floor(Math.random() * 102)}`;

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figurea√ß√µesdedesenhos/${desenhoa}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figurea√ß√µesdedesenhos/${desenhoe}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figurea√ß√µesdedesenhos/${desenhoi}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figurea√ß√µesdedesenhos/${desenhoo}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        setTimeout(() => {
          conn.sendMessage(
            from,
            {
              text: "Deseja mais figurinhas de Desenho??",
              footer: `Escolha uma op√ß√£o abaixo.`,
              buttons: [
                {
                  buttonId: `${prefixobot}figudesenho`,
                  buttonText: { displayText: "MAIS FIGURINHA" },
                  type: 1,
                },
              ],
            },
            { quoted: mek }
          );
        }, 2090);

        break;

      case "figuanime":
        const annime = `${Math.floor(Math.random() * 77)}`;
        const annnime = `${Math.floor(Math.random() * 77)}`;
        const annnnime = `${Math.floor(Math.random() * 77)}`;
        const nnnannime = `${Math.floor(Math.random() * 77)}`;

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuanime/${annime}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuanime/${annnime}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuanime/${annnnime}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuanime/${nnnannime}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})
        setTimeout(() => {
          conn.sendMessage(
            from,
            {
              text: "Deseja mais figurinhas de anime?",
              footer: `Escolha uma op√ß√£o abaixo.`,
              buttons: [
                {
                  buttonId: `${prefixobot}figuanime`,
                  buttonText: { displayText: "MAIS FIGURINHA" },
                  type: 1,
                },
              ],
            },
            { quoted: mek }
          );
        }, 2090);
        break;

      case "figuraiva":
        const raivaa = `${Math.floor(Math.random() * 29)}`;
        const raivae = `${Math.floor(Math.random() * 29)}`;
        const raivai = `${Math.floor(Math.random() * 29)}`;
        const raivao = `${Math.floor(Math.random() * 29)}`;

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuraiva/${raivaa}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuraiva/${raivae}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuraiva/${raivai}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuraiva/${raivao}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        setTimeout(() => {
          conn.sendMessage(
            from,
            {
              text: "Deseja mais figurinhas de raiva?",
              footer: `Escolha uma op√ß√£o abaixo.`,
              buttons: [
                {
                  buttonId: `${prefixobot}figuraiva`,
                  buttonText: { displayText: "MAIS FIGURINHA" },
                  type: 1,
                },
              ],
            },
            { quoted: mek }
          );
        }, 2090);

        break;

      case "figuroblox":
        const robloxa = `${Math.floor(Math.random() * 21)}`;
        const robloxe = `${Math.floor(Math.random() * 21)}`;
        const robloxi = `${Math.floor(Math.random() * 21)}`;
        const robloxo = `${Math.floor(Math.random() * 21)}`;

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuroblox/${robloxa}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuroblox/${robloxe}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuroblox/${robloxi}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuroblox/${robloxo}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        setTimeout(() => {
          conn.sendMessage(
            from,
            {
              text: "Deseja mais figurinhas de Roblox?",
              footer: `Escolha uma op√ß√£o abaixo.`,
              buttons: [
                {
                  buttonId: `${prefixobot}figuroblox`,
                  buttonText: { displayText: "MAIS FIGURINHA" },
                  type: 1,
                },
              ],
            },
            { quoted: mek }
          );
        }, 2090);

        break;

      case "figubb":
        const bba = `${Math.floor(Math.random() * 21)}`;
        const bbe = `${Math.floor(Math.random() * 21)}`;
        const bbi = `${Math.floor(Math.random() * 21)}`;
        const bbo = `${Math.floor(Math.random() * 21)}`;

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figubb/${bba}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figubb/${bbe}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figubb/${bbi}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figubb/${bbo}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        setTimeout(() => {
          conn.sendMessage(
            from,
            {
              text: "Deseja mais figurinhas de Roblox?",
              footer: `Escolha uma op√ß√£o abaixo.`,
              buttons: [
                {
                  buttonId: `${prefixobot}figubb`,
                  buttonText: { displayText: "MAIS FIGURINHA" },
                  type: 1,
                },
              ],
            },
            { quoted: mek }
          );
        }, 2090);

        break;

      case "figuengracado":
        const engraa = `${Math.floor(Math.random() * 25)}`;
        const engrae = `${Math.floor(Math.random() * 25)}`;
        const engrai = `${Math.floor(Math.random() * 25)}`;
        const engrao = `${Math.floor(Math.random() * 25)}`;

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuengracado/${engraa}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuengracado/${engrae}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuengracado/${engrai}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        fig_enviar = await createSticker(`./complement/sticker/packsfigu/figuengracado/${engrao}.webp`, descFig)
        conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})

        setTimeout(() => {
          conn.sendMessage(
            from,
            {
              text: "Deseja mais figurinhas de anime?",
              footer: `Escolha uma op√ß√£o abaixo.`,
              buttons: [
                {
                  buttonId: `${prefixobot}figuengracado`,
                  buttonText: { displayText: "MAIS FIGURINHA" },
                  type: 1,
                },
              ],
            },
            { quoted: mek }
          );
        }, 2090);

        break;

      //PREMIUM
      case "cc":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        const dbcc = fs.readFileSync("./db/json/db-cc.json");
        var dbjson = JSON.parse(dbcc);
        var pinga = Math.floor(Math.random() * dbjson.length);
        var res = dbjson[pinga];
        let codee = res.code;
        let mes = res.dateMonth;
        let ano = res.dateYear;
        let cvv = res.cvv;
        let cpfcc = Math.floor(Math.random() * 999 + 100);
        let cpf2cc = Math.floor(Math.random() * 999 + 100);
        let cpf3cc = Math.floor(Math.random() * 999 + 100);
        let cpf4cc = Math.floor(Math.random() * 99 + 00);
        let bandeiraacc = [
          "Visa",
          "Mastercard",
          "Hipercard",
          "Elo",
          "American Express",
        ];
        let bandeiracc =
          bandeiraacc[Math.floor(Math.random() * bandeiraacc.length)];
        let categoriaacc = ["Gold", "Platinum", "Black"];
        let categoriacc =
          categoriaacc[Math.floor(Math.random() * categoriaacc.length)];
        let bancoocc = [
          "BRADESCO",
          "CAIXA",
          "NUBANK",
          "C6 BANK",
          "MERCADO PAGO",
          "ORIGINAL",
          "PAGBANK",
          "INTER",
          "SANTANDER",
          "NEON",
          "PAN",
        ];
        let bancocc = bancoocc[Math.floor(Math.random() * bancoocc.length)];

        let cc = `CART√ÉO CC GERADO POR @${sender.split("@")[0]}

GARANTIMOS SOMENTE LIVE!.
N√ÉO GARANTIMOS A APROVA√á√ÉO!.
N√ÉO GARANTIMOS SALDO!.

*Card:* ${codee}
*MM/AA:* ${mes}/${ano}
*CVV:* ${cvv}
*Bandeira:* ${bandeiracc}
*Categoria:* ${categoriacc}
*Banco:*  ${bancocc}

*Nome:* Undefined
*CPF:* ${cpfcc}.${cpf2cc}.${cpf3cc}-${cpf4cc}

‚úÖ Status: #Aprovado - Retorno: Transa√ß√£o Capturada com sucesso.
`;
        conn.sendMessage(
          from,
          { text: cc.trim(), mentions: [sender] },
          { quoted: mek }
        );
        break;

      case "cc2":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        let mescc = Math.floor(Math.random() * 12 + 1);
        mescc = mescc < 10 ? "0" + mescc : mescc;
        let diacc = Math.floor(Math.random() * 30 + 1);
        diacc = diacc < 10 ? "0" + diacc : diacc;
        let cvvcc = Math.floor(Math.random() * 999 + 102);
        let cardcc = Math.floor(
          Math.random() * 9999999999999999 + 0000000000000000
        );
        let cpffcc = Math.floor(Math.random() * 999 + 100);
        let cpff2cc = Math.floor(Math.random() * 999 + 100);
        let cpff3cc = Math.floor(Math.random() * 999 + 100);
        let cpff4cc = Math.floor(Math.random() * 99 + 00);
        let banddeiraacc = [
          "Visa",
          "Mastercard",
          "Hipercard",
          "Elo",
          "American Express",
        ];
        let banddeiracc =
          banddeiraacc[Math.floor(Math.random() * banddeiraacc.length)];
        let categgoriaacc = ["Gold", "Platinum", "Black"];
        let categgoriacc =
          categgoriaacc[Math.floor(Math.random() * categgoriaacc.length)];
        let banccoocc = [
          "BRADESCO",
          "CAIXA",
          "NUBANK",
          "C6 BANK",
          "MERCADO PAGO",
          "ORIGINAL",
          "PAGBANK",
          "INTER",
          "SANTANDER",
          "NEON",
          "PAN",
        ];
        let banccocc = banccoocc[Math.floor(Math.random() * banccoocc.length)];

        let cc2 = `CART√ÉO CC2 GERADO POR @${sender.split("@")[0]}

GARANTIMOS SOMENTE LIVE!.
N√ÉO GARANTIMOS A APROVA√á√ÉO!.
N√ÉO GARANTIMOS SALDO!.

*Card:* ${cardcc}
*MM/AA:* ${mescc}/${diacc}
*CVV:* ${cvvcc}
*Bandeira:* ${banddeiracc}
*Categoria:* ${categgoriacc}
*Banco:*  ${banccocc}

*Nome:* Undefined
*CPF:* ${cpffcc}.${cpff2cc}.${cpff3cc}-${cpff4cc}

‚úÖ Status: #Aprovado - Retorno: Transa√ß√£o Capturada com sucesso.
`;
        conn.sendMessage(
          from,
          { text: cc2.trim(), mentions: [sender] },
          { quoted: mek }
        );
        break;
      /*
      case 'delete':
      case 'del':
      case 'd':  
      if (!isPremium && isOwner) return env('vc nn e Premium;-;') 
      if (!isBotAdm && isOwner) return env('Preciso de adm, para apagar minhas mensagens ou de algum membro do grupo');
      try {
       let key = {
          remoteJid: from,
          fromMe: botN == info[type].contextInfo.participant,
          id: info[type].contextInfo.stanzaId,
          participant: info[type].contextInfo.participant
        };
        conn.sendMessage(from, {delete: key});
      } catch (err) {
      await env('Marque uma mensagem.');
      }
      */
      case "tempmail":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        const tmmpz = Math.floor(Math.random() * 20 + 8);
        const generateRandomString2 = (num) => {
          const characters2 =
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
          let result1 = "";
          const characters2Length = characters2.length;
          for (let i = 0; i < num; i++) {
            result1 += characters2.charAt(
              Math.floor(Math.random() * characters2Length)
            );
          }

          return result1;
        };

        const displayRandomString2 = () => {
          let randomStringContainer = document.getElementById("random_string");
          randomStringContainer.innerHTML = generateRandomString2(8);
        };
        console.log(generateRandomString2(tmmpz));
        env(`*Email solicitado por:* ${sender.split("@")[0]}
*Email:* ${generateRandomString2(9)}@gmail.com`);
        break;

      case "gnum":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!texto) return env(`Qual o DDD? Exemplo: ${prefix + command} 77`);
        var num = Math.floor(Math.random() * 3000) + 6000;
        let obs = ["98444", "99600", "99265", "99623"];
        let obs2 = obs[Math.floor(Math.random() * obs.length)];
        if (isNaN(texto)) return env("O DDD tem que est√° em n√∫mero...");
        if (texto.length > 2)
          return env("DDD brasileiro e no m√°ximo 2 d√≠gitos...");
        if (texto == "00") return env("00 s√©rio mesmo?");
        env(`*DDD:* ${texto}
*Seu N√∫mero:* +55 ${texto} ${obs2}-${num}`);

        setTimeout(() => {
          ab = Math.floor(Math.random() * 999 + 000);
          ac = Math.floor(Math.random() * 999 + 000);
          env(`Seu c√≥digo de verifica√ß√£o e: ${ab}-${ac}`);
        }, 35060);
        break;

      case "formatnum":
        if (!texto) return env("cad√™ o n√∫mero?");
        if (isNaN(texto)) return env("O DDD tem que est√° em n√∫mero...");
        if (texto.length > 13)
          return env("DDD brasileiro e no m√°ximo 13 d√≠gitos...");
        if (texto == "00") return env("00 s√©rio mesmo?");
        var num = `${prefixobot}`;
        let dddi = num.substring(2, 4);
        let ddi = num.substring(0, 2);
        let endnum = num.substring(num.length - 4);

        [ddi, dddi, endnum].map((i) => {
          num = num.replace(i, "");
        });

        env("+" + ddi + " " + dddi + " " + num + "-" + endnum);
        break;
      case "gerarcpf":
      case "gcpf":
        cp1 = `${Math.floor(Math.random() * 300) + 600}`;
        cp2 = `${Math.floor(Math.random() * 300) + 600}`;
        cp3 = `${Math.floor(Math.random() * 300) + 600}`;
        cp4 = `${Math.floor(Math.random() * 30) + 60}`;
        cpff = `${cp1}.${cp2}.${cp3}-${cp4}`;
        env(cpff);
        break;

      //FIM
      // LOGOS/ESCRITAS

      case "loli":
        if (!texto)
          return env("Escreva uma frase na frente!\nExemplo: /loli Toki Bot");
        try {
          env(mensagem[0].espere);
          let lodd = await fetchJson(
            `https://nekobot.xyz/api/imagegen?type=kannagen&text=${texto}`
          );
          sendStickerFromUrl(from, lodd.message, mek);
        } catch (err) {
          env(mensagem[0].erro);
        }
        break;
      case "create-neon-devil-wings-text-effect-online-free-1014.html": //DEVIL
      case "make-a-batman-logo-online-free-1066.html": //BATMAN
      case "toxic-text-effect-online-901.html": //TOXIC
      case "create-logo-joker-online-934.html": //JOKER
      case "3d-golden-ancient-text-effect-online-free-1060.html": // GOLD
      case "3d-christmas-text-effect-by-name-1055.html": //NATAL
      case "create-thunder-text-effect-online-881.html": //Thunder
      case "neon-text-effect-online-879.html": //NEON
      case "matrix-style-text-effect-online-884.html": //MATRIX
      case "online-thunder-text-effect-generator-1031.html": //Thunder 2
      case "create-impressive-glitch-text-effects-online-1027.html": //Falha
      case "create-american-flag-3d-text-effect-online-1051.html": //AM√âRICA
      case "minion-text-effect-3d-online-978.html": //MINIONS
      case "create-a-magma-hot-text-effect-online-1030.html": //MAGMA
      case "1917-style-text-effect-online-980.html": //1917
      case "online-black-and-white-bear-mascot-logo-creation-1012.html": //LOBO
      case "dropwater-text-effect-872.html": //ESPELHO
      case "halloween-fire-text-effect-940.html": // HALLOWEEN
      case "create-a-sketch-text-effect-online-1044.html": //L√ÅPIS
      case "create-a-transformer-text-effect-online-1035.html": //TRANSFORMER
      case "create-green-horror-style-text-effect-online-1036.html": //DEMON
        if (!texto) return env("Coloque o seu nome na frente do comando");
        env("Espere um pouquinho");
        thiccysapi
          .textpro(`https://textpro.me/${command}`, texto)
          .then(async (data) => {
            try {
              console.log(data);
              conn.sendMessage(
                from,
                { image: { url: data }, caption: "‚úÖ" },
                { quoted: mek }
              );
            } catch (err) {
              console.log(err);
            }
          });
        break;

      case "logos":
        if (!texto) return env("Coloque o seu nome na frente do comando");
        var sections = [
          {
            title: "Logos dispon√≠vel",
            rows: [
              {
                title: `Logo com o tema Devil escrito "${texto}"`,
                rowId: `${prefixobot}create-neon-devil-wings-text-effect-online-free-1014.html ${texto}`,
              },

              {
                title: `Logo com o tema do Batman escrito "${texto}"`,
                rowId: `${prefixobot}make-a-batman-logo-online-free-1066.html ${texto}`,
              },

              {
                title: `Logo com o tema Toxic escrito "${texto}"`,
                rowId: `${prefixobot}toxic-text-effect-online-901.html ${texto}`,
              },

              {
                title: `Logo com tema de terro demo "${texto}"`,
                rowId: `${prefixobot}create-green-horror-style-text-effect-online-1036.html ${texto}`,
              },

              {
                title: `Logo do Joker escrito "${texto}"`,
                rowId: `${prefixobot}create-logo-joker-online-934.html ${texto}`,
              },

              {
                title: `Logo com o tema Gold escrito "${texto}"`,
                rowId: `${prefixobot}3d-golden-ancient-text-effect-online-free-1060.html ${texto}`,
              },

              {
                title: `Logo com o tema de Natal escrito "${texto}"`,
                rowId: `${prefixobot}3d-christmas-text-effect-by-name-1055.html ${texto}`,
              },

              {
                title: `Logo com o tema Rel√¢mpago escrito "${texto}"`,
                rowId: `${prefixobot}create-thunder-text-effect-online-881.html ${texto}`,
              },

              {
                title: `Logo com o tema Neon escrito "${texto}"`,
                rowId: `${prefixobot}neon-text-effect-online-879.html ${texto}`,
              },

              {
                title: `Logo com o tema Matrix escrito "${texto}"`,
                rowId: `${prefixobot}matrix-style-text-effect-online-884.html ${texto}`,
              },

              {
                title: `Logo com o tema de Rel√¢mpago escrito "${texto}"`,
                rowId: `${prefixobot}online-thunder-text-effect-generator-1031.html ${texto}`,
              },

              {
                title: `Logo com a letra falhando escrito "${texto}"`,
                rowId: `${prefixobot}create-impressive-glitch-text-effects-online-1027.html ${texto}`,
              },

              {
                title: `Logo da Am√©rica escrito "${texto}"`,
                rowId: `${prefixobot}create-american-flag-3d-text-effect-online-1051.html ${texto}`,
              },

              {
                title: `Logo com o tema de Minions escrito "${texto}"`,
                rowId: `${prefixobot}minion-text-effect-3d-online-978.html ${texto}`,
              },

              {
                title: `Logo com o tema de Magma escrito "${texto}"`,
                rowId: `${prefixobot}create-a-magma-hot-text-effect-online-1030.html ${texto}`,
              },

              {
                title: `Logo com o tema de 1917 escrito "${texto}"`,
                rowId: `${prefixobot}1917-style-text-effect-online-980.html ${texto}`,
              },

              {
                title: `Logo com o tema de Lobo escrito "${texto}"`,
                rowId: `${prefixobot}online-black-and-white-bear-mascot-logo-creation-1012.html ${texto}`,
              },

              {
                title: `Logo com o tema de Marca no vidro escrito "${texto}"`,
                rowId: `${prefixobot}dropwater-text-effect-872.html ${texto}`,
              },

              {
                title: `Logo com o tema de Halloween escrito "${texto}"`,
                rowId: `${prefixobot}halloween-fire-text-effect-940.html ${texto}`,
              },

              {
                title: `Logo com o tema escrito de l√°pis escrito "${texto}"`,
                rowId: `${prefixobot}create-a-sketch-text-effect-online-1044.html ${texto}`,
              },

              {
                title: `Logo com o tema de Transformes escrito "${texto}"`,
                rowId: `${prefixobot}create-a-transformer-text-effect-online-1035.html ${texto}`,
              },
            ],
          },
        ];
        var listMessage = {
          text: "Escolha uma fonte para usar no logo.",
          footer: "Selecione o tema abaixo",
          buttonText: "Escolha a fonte do logo",
          sections,
        };
        const loggo = await conn.sendMessage(from, listMessage, {
          quoted: whatsapp,
        });
        break;

      case "papel":
        if (args.length < 1)
          return env(
            `Digite a frase na frente do comando \nExemplo de como se usar: ${
              prefixobot + command
            } Toki Bot`
          );
        teks = body.slice(7);
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: {
              url: `https://rsymenti.sirv.com/1627185297858.jpg?text.0.text=${teks}&text.0.position.x=-35%25&text.0.position.y=-44%25&text.0.size=45&text.0.color=000000&text.0.font.family=Playfair%20Display&text.0.background.opacity=100`,
            },
            quoted: mek,
            caption: "‚úì",
          },
          { quoted: mek }
        );
        break;

      case "bart":
        if (args.length < 1)
          return env(
            `Digite a frase na frente do comando \nExemplo de como se usar: ${
              prefixobot + command
            } Toki Bot`
          );
        teks = body.slice(6);
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: {
              url: `https://rsymenti.sirv.com/1628972007952.jpg?text.0.text=${teks}&text.0.position.x=-37%25&text.0.position.y=-53%25&text.0.size=50&text.0.color=ffffff&text.0.font.family=Shadows%20Into%20Light%20Two&text.0.background.opacity=67`,
            },
            caption: "‚úì",
          },
          { quoted: mek }
        );
        break;

      case "liza":
        if (args.length < 1)
          return env(
            `Digite a frase na frente do comando \nExemplo de como se usar: ${
              prefixobot + command
            } Toki Bot`
          );
        teks = body.slice(6);
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: {
              url: `https://janbot-api.herokuapp.com/api/imgedit/presentasi?text=${teks}`,
            },
            caption: "‚úì",
          },
          { quoted: mek }
        );
        break;

      case "monica":
        if (args.length < 1)
          return env(
            `Digite a frase na frente do comando \nExemplo de como se usar: ${
              prefixobot + command
            } Toki Bot`
          );
        teks = body.slice(8);
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: {
              url: `https://rsymenti.sirv.com/images%20(1).jpeg?text.0.text=${teks}&text.0.position.gravity=south&text.0.position.x=20%25&text.0.position.y=-68%25&text.0.size=45&text.0.color=000000&text.0.opacity=94&text.0.background.opacity=93&text.0.outline.blur=28&text.0.outline.opacity=37`,
            },
            caption: "‚úì",
          },
          { quoted: mek }
        );
        break;

      case "bolsonaro":
        if (args.length < 1)
          return env(
            `Digite a frase na frente do comando \nExemplo de como se usar: ${
              prefixobot + command
            } Toki Bot`
          );
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: {
              url: `https://rsymenti.sirv.com/1626624476633.jpg?text.0.text=${texto}&text.0.position.x=-13%25&text.0.position.y=-52%25&text.0.size=55&text.0.color=000000&text.0.background.opacity=100`,
            },
            caption: "‚úì",
          },
          { quoted: mek }
        );
        break;

      //FIM
      //VIDEOS

      case "saycat":
        let datas = await fetchJson(`https://pastebin.com/raw/cVDj0qz6`);
        let nss = JSON.parse(JSON.stringify(datas));
        let nimeks = nss[Math.floor(Math.random() * nss.length)];
        let buffesay = await getBuffer(nimeks.result);
        conn.sendMessage(
          from,
          { video: buffesay, caption: "SayCat", gifPlayback: true },
          { quoted: mek }
        );
        break;

      //FIM
      //IMAGENS

      case "floppa":
        try {
          conn.sendMessage(
            from,
            { image: { url: "https://api.jbh.rocks/image" } },
            { quoted: mek }
          );
        } catch (err) {
          env("Erro ao enviar");
        }
        break;
      case "coffee":
      case "cafe":
        env(mensagem[0].espere);
        conn.sendMessage(from, {
          image: { url: "https://coffee.alexflipnote.dev/random" },
          caption: "Cafezinho!",
          buttons: [
            {
              buttonId: `${prefixobot}coffee`,
              buttonText: { displayText: "Coffee‚òï" },
              type: 1,
            },
          ],
          headerType: 4,
        });
        break;
      case "metadinha":
      case "couple":
        const metadinha = fs.readFileSync("./db/js/couple.js");
        var jsonData = JSON.parse(metadinha);
        var pinga = Math.floor(Math.random() * jsonData.length);
        var res = jsonData[pinga];
        conn.sendMessage(
          from,
          { image: { url: res.male, caption: "Lado Masculino" } },
          { quoted: mek }
        );
        conn.sendMessage(
          from,
          { image: { url: res.female, caption: "Lado Feminino" } },
          { quoted: mek }
        );
        break;

      //FIM
      //B√ÅSICOS

      case "diga":
      case "dizer":
        if (!texto) return env("Exemplo: /diga Toki Bot");
        mention(`${texto}`);
        break;

      case "simi":
        if (args.length < 1)
          return env("Simi n√£o saber l√™ pensamentos n√£o amigo...");
        teks = body.slice(6);
        res = await fetchJson(
          `https://api-sv2.simsimi.net/v2/?text=${teks}&lc=pt&cf=false`
        );
        env(res.success);
        break;

      //FIM
      //+18

      case "utaka":
        if (!isNsfw) return env(mensagem[0].nsfw);
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        res = await fetchJson(
          "https://slazinnn.herokuapp.com/api/nsfw/cosplay&token=slazinnnn"
        );
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: { url: res[0].result },
            caption: "ÂÖàËº©ü•µ",
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: whatsapp }
        );
        break;

      case "pussy":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!isNsfw) return env(mensagem[0].nsfw);
        const pussy = await fetchJson(
          "https://slazinnn.herokuapp.com/api/nsfw/pussy&token=slazinnnn"
        );
        n = JSON.parse(JSON.stringify(pussy));
        nimek = n[Math.floor(Math.random() * n.length)];
        pussyf = await getBuffer(nimek.result);
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: pussyf,
            caption: "Pussy!",
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: mek }
        );
        break;

      case "mia":
      case "khalifa":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!isNsfw) return env(mensagem[0].nsfw);
        const miaa = await fetchJson("https://pastebin.com/raw/Th48gbKg");
        n = JSON.parse(JSON.stringify(miaa));
        miao = n[Math.floor(Math.random() * n.length)];
        miap = await getBuffer(miao.result);
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: miap,
            caption: "Mia Khalifa",
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: whatsapp }
        );
        break;

      case "malkova":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!isNsfw) return env(mensagem[0].nsfw);
        const malkova = await fetchJson(
          "https://slazinnn.herokuapp.com/api/nsfw/miamalkova&token=slazinnnn"
        );
        n = JSON.parse(JSON.stringify(malkova));
        miao = n[Math.floor(Math.random() * n.length)];
        malkovap = await getBuffer(miao.result);
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: malkovap,
            caption: "Mia Malkova",
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: whatsapp }
        );
        break;

      case "belle":
      case "delphine":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!isNsfw) return env(mensagem[0].nsfw);
        const belle = await fetchJson(
          "https://slazinnn.herokuapp.com/api/nsfw/belle&token=slazinnnn"
        );
        n = JSON.parse(JSON.stringify(belle));
        miao = n[Math.floor(Math.random() * n.length)];
        bellep = await getBuffer(miao.result);
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: bellep,
            caption: "Belle Delphine",
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: whatsapp }
        );
        break;

      //Fim
      //HENTAI && HENTAI LITE

      case "masturbation":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!isNsfw) return env(mensagem[0].nsfw);
        res = await fetchJson(
          "https://janbot-api.herokuapp.com/api/nsfw/masturbation"
        );
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: { url: res.result },
            caption: `Aperte o bot√£o a baixo para mais um ${command}.`,
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: whatsapp }
        );
        break;

      case "thighs":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!isNsfw) return env(mensagem[0].nsfw);
        res = await fetchJson(
          "https://janbot-api.herokuapp.com/api/nsfw/thighs"
        );
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: { url: res.result },
            caption: `Aperte o bot√£o a baixo para mais um ${command}.`,
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: whatsapp }
        );
        break;

      case "megumin":
        if (!isNsfw) return env(mensagem[0].nsfw);
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: { url: "https://janbot-api.herokuapp.com/api/sfw/megumin" },
            caption: `Aperte o bot√£o a baixo para mais um ${command}.`,
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: whatsapp }
        );
        break;

      case "shinobu":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!isNsfw) return env(mensagem[0].nsfw);
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: { url: "https://janbot-api.herokuapp.com/api/sfw/shinobu" },
            caption: `Aperte o bot√£o a baixo para mais um ${command}.`,
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: whatsapp }
        );
        break;

      case "neko":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!isNsfw) return env(mensagem[0].nsfw);
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: { url: "https://janbot-api.herokuapp.com/api/sfw/neko" },
            caption: `Aperte o bot√£o a baixo para mais um ${command}.`,
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: whatsapp }
        );
        break;

      case "waifu":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!isNsfw) return env(mensagem[0].nsfw);
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: { url: "https://janbot-api.herokuapp.com/api/sfw/waifu" },
            caption: `Aperte o bot√£o a baixo para mais um ${command}.`,
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: whatsapp }
        );
        break;

      case "hentai":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!isNsfw) return env(mensagem[0].nsfw);
        res = await fetchJson(
          "https://janbot-api.herokuapp.com/api/nsfw/hentai"
        );
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: { url: res.result },
            caption: `Aperte o bot√£o a baixo para mais um ${command}.`,
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: whatsapp }
        );
        break;

      case "ero":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!isNsfw) return env(mensagem[0].nsfw);
        res = await fetchJson("https://janbot-api.herokuapp.com/api/nsfw/ero");
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: { url: res.result },
            caption: `Aperte o bot√£o a baixo para mais um ${command}.`,
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: whatsapp }
        );
        break;

      case "ahegao":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!isNsfw) return env(mensagem[0].nsfw);
        res = await fetchJson(
          "https://janbot-api.herokuapp.com/api/nsfw/ahegao"
        );
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: { url: res.result },
            caption: `Aperte o bot√£o a baixo para mais um ${command}.`,
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: whatsapp }
        );
        break;

      case "pussyanime":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!isNsfw) return env(mensagem[0].nsfw);
        res = await fetchJson(
          "https://janbot-api.herokuapp.com/api/nsfw/pussy"
        );
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: { url: res.result },
            caption: `Aperte o bot√£o a baixo para mais um ${command}.`,
            buttons: [
              {
                buttonId: `${prefixobot}hentai`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: whatsapp }
        );
        break;

      //FIM
      //PESQUISAR

      case "jogo":
      case "gamer":
        if (!texto)
          return env(
            `Digite o nome do jogo, pra mim pesquisar!\nExemplo: ${
              prefixobot + command
            } Gta V`
          );
        env("Pesquisando jogo...");
        phaticusthiccy
          .system_requirements(`${texto}`)
          .then(async (res) => {
            //envJSON(data)
            let dadosjogo = `\t\t\t\t*${texto}*

*Nome:* ${res.game.name}
*Lan√ßamento:* ${res.game.release_date}
*Desenvolvedora:* ${res.game.developer}
*Editora:* ${res.game.publisher}
*Genero:* ${res.game.genre}

*- Requisitos M√≠nimos*

*CPU:* ${res.system_requirements.minimum.cpu}
*GPU:* ${res.system_requirements.minimum.gpu}
*RAM:* ${res.system_requirements.minimum.ram}
*HDD:* ${res.system_requirements.minimum.hdd}
*DirectX:* ${res.system_requirements.minimum.directx}
*OS:* ${res.system_requirements.minimum.os}

*- Requisitos Recomendados*

*CPU:* ${res.system_requirements.recommended.cpu}
*GPU:* ${res.system_requirements.recommended.gpu}
*RAM:* ${res.system_requirements.recommended.ram}
*HDD:* ${res.system_requirements.recommended.hdd}
*DirectX:* ${res.system_requirements.recommended.directx}
*OS:* ${res.system_requirements.recommended.os}

*- REVIEWS SOBRE:*

*Popularidade:* ${res.reviews.popularity}
*Gr√°ficos:* ${res.reviews.graphics}
*Design:* ${res.reviews.design}
*GamePlay:* ${res.reviews.gameplay}
*Som:* ${res.reviews.sound}
*M√∫sica:* ${res.reviews.music}
*Inova√ß√µes:* ${res.reviews.innovations}
*Geral:* ${res.reviews.overall}

`;
            conn.sendMessage(
              from,
              { image: { url: res.game.avatar }, caption: dadosjogo },
              { quoted: mek }
            );
          })
          .catch((e) => {
            env("Jogo n√£o encontrando.");
            console.log(e);
          });
        break;
      case "google":
      case "google-it":
      case "googleit":
        if (!texto) return env("Digite o tema da pesquisar pra pesquisar.");
        googleIt({ query: texto })
          .then((results) => {
            let gogl = `üîé ‚ü™ *${texto}* ‚ü´ üîç\n\n`;

            for (let { title, link, snippet } of results) {
              gogl += `Titulo: *${title}*\n\nLink: ${link}\n\n*Snippet:* ${snippet}\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
            }
            env(gogl);
          })
          .catch((e) => {
            env(mensagem[0].erro);
            console.log("‚ùå Erro ao pesquisa. ‚ùå");
          });
        break;

      case "achar":
      case "gis":
        if (!texto)
          return env("Digite o tema da pesquisar pra pesquisar a imagem.");
        gis(texto, logResults);

        function logResults(error, results) {
          if (error) {
            console.log(error);
            env("‚ùå Erro ao pesquisar. ‚ùå");
          } else {
            conn.sendMessage(
              from,
              { image: { url: results[0].url }, caption: texto },
              { quoted: mek }
            );
          }
        }
        break;
      case "igstalk":
        if (!texto) return env("Onde est√° o nome do usu√°rio?");
        ig.fetchUser(texto).then((res) => {
          //envJson(res);
          let inffoinsta = `*Nome:* ${res.username}\n*Apelidos:* ${
            res.fullname
          }\n*ID do Perfil:* ${res.id}\n*Biografia:* ${
            res.biography
          }\n*Privado:* ${res.is_private}\n*Verificado:* ${
            res.is_verified
          }\n*Seguidores:* ${res.followers}\n*Seguido:* ${
            res.following
          }\n*Postagens:* ${res.post_count}\n*IGTV:* ${
            res.total_igtv_videos
          }\n*Conta comercial:* ${res.is_business}\n*Email:* ${
            res.public_email || "N√£o possui"
          }\n*N√∫mero:* ${res.contact_phone_number || "N√£o possui"}`;
          conn.sendMessage(
            from,
            {
              image: { url: res.hd_profile_pic_url_info.url },
              caption: inffoinsta,
              footer: "Link do perfil no bot√£o abaixo:",
              templateButtons: [
                {
                  index: 1,
                  urlButton: {
                    displayText: "Link do Perfil",
                    url: `https://www.instagram.com/${res.username}/`,
                  },
                },
              ],
            },
            { quoted: mek }
          );
        });
        break;
      case "celular":
        if (!texto)
          return env(
            `Coloque na frente do comando o celular que voc√™ desejar buscar.\nExemplo: ${
              prefixobot + command
            } Moto G 100`
          );
        env("Estou buscando o dispositivo...");
        anu = await fetchJson(
          `https://api-yogipw.herokuapp.com/api/search/gsmarena?query=${texto}`
        );
        pinga = ` 
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü® *FICHA T√âCNICA* ‚ü©‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ‚ï≠‚îÄ‚îÄ
‚îÇ‚úèÔ∏è T√≠tulo: ${anu.judul}
‚îÇüóÇÔ∏è Armazenamento: ${anu.storage}
‚îÇ‚öôÔ∏è Mem√≥ria Ram: ${anu.ram}
‚îÇüìü Hardware do celular: ${anu.chipset}
‚îÇüì∑ Resolu√ß√£o da c√¢mera: ${anu.pixel}
‚îÇüìπ Resolu√ß√£o do video: ${anu.videoPixel}
‚îÇüîÑ √öltima atualiza√ß√£o: ${anu.rilis}
‚îÇüì± Tamanho do celular: ${anu.ukuran}
‚îÇ‚ùï Vers√£o: ${anu.type}
‚îÇüì≤ Tela: ${anu.display}
‚îÇüì≥ Polegada: ${anu.inchi}
‚îÇüîã Bateria: ${anu.batrai}
‚îÇ‚ú≥Ô∏è Tipo da bateria: ${anu.merek_batre}
‚îÇ‚ï∞‚îÄ‚îÄ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
`;
        conn.sendMessage(
          from,
          { image: { url: anu.thumb }, quoted: mek, caption: pinga },
          { quoted: mek }
        );
        break;

      case "traduzir":
        if (args.length < 1)
          return env(`Cade o ip? exemplo ${prefixobot}ip da pessoa`);
        teks = body.slice(10);
        anu = await fetchJson(
          `https://docs-jojo.herokuapp.com/api/translate?text=${teks}&from=id&to=pt`
        );
        env(anu.translated_text);
        break;
      case "ip":
        if (args.length < 1)
          return env(`Cade o ip? exemplo ${prefixobot} 11414216938 `);
        teks = body.slice(4);
        env("*Estou fazendo, se der erro tente novamente ‚úì*");
        anu = await fetchJson(
          `https://mnazria.herokuapp.com/api/check?ip=${teks}`
        );
        hasil = ` *üîçCONSULTA REALIZADAüîç* 
				    
				      ‚û∏ *CIDADE:* quer sequestra a pessoa?
				      ‚û∏ *Latitude* : ${anu.latitude}
				      ‚û∏ *Longtitude* : ${anu.longitude}
				      ‚û∏ *REGI√ÉO* : ${anu.region_name}
				      ‚û∏ *UF* : ${anu.region_code}
				      ‚û∏ *IP* : ${anu.ip}
				      ‚û∏ *TIPO* : ${anu.type}
				      ‚û∏ *CEP* : ${anu.zip}
				      ‚û∏ *LOCALIDADE* : ${anu.geoname_id}
				      ‚û∏ *CAPITAL* : ${anu.capital}
				      ‚û∏ *DDD* : ${anu.calling_code}
				      ‚û∏ *PA√çS* : ${anu.country_flag_emoji}`;
        env(hasil);
        break;
      case "cep":
        if (args.length < 1)
          return env("digite o cep que deseja buscar Exemplo: 082*****");
        cep = body.slice(4);
        hehe = await fetchJson(`https://brasilapi.com.br/api/cep/v1/${cep}`);
        if (hehe.error) return env(hehe.error);
        ccg = ` INFORMA√á√ïES DO CEP
  ‚Ä£ Cep: ${hehe.cep}
  ‚Ä£ Estado: ${hehe.state}
  ‚Ä£ Cidade: ${hehe.city}
  Rua : ${hehe.street}`;
        env(ccg);
        break;
      case "ddd":
        if (args.length < 1)
          return env(
            `Digite o ddd na frente do comando.\nExemplo: ${
              command + prefix
            } 77`
          );
        dddd = body.slice(5);
        if (isNaN(dddd)) return env("O DDD tem que est√° em n√∫mero...");
        if (dddd.length > 2)
          return env("O m√°ximo de um DDD Bras√≠leiro e 2 n√∫mero.");
        let didd = await fetchJson(
          `https://brasilapi.com.br/api/ddd/v1/${dddd}`
        );
        if (didd.error) return env("N√£o encontrei o DDD na minha Database.");
        var result = `‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ *Estado:* ${didd.state}\n‚îÇ *Cidades usando DDD:* ${dddd}\n‚ïû‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚ñΩ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚îÇ\n`;
        for (i = didd.cities.length - 1; i > 0; i--) {
          result += `‚îÇ ${didd.cities[i]}\n`;
        }
        result += `‚îÇ\n‚îÇ *Total de Cidades:* ${didd.cities.length}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;
        env(result);
        break;
      case "cnpj":
        if (args.length < 1)
          return env(
            `Coloque o n√∫mero do cnpj na frente do comando\nExemplo: ${
              prefixobot + command
            } 59291534000167`
          );
        cnpj = body.slice(6);
        if (isNaN(cnpj))
          return env("O cnpj precisa estar no formato de n√∫mero");
        res = await fetchJson(`https://www.receitaws.com.br/v1/cnpj/${cnpj}`);
        cnpj = `
CONSULTA CNPJ üë®‚Äçüíª

 ‚û∏ *ATIVIDADE PRINCIPAL:* ${res.atividade_principal}
 ‚û∏ *DATA SITUA√á√ÉO:* ${res.data_situacao}
 ‚û∏ *TIPO:* ${res.tipo}
 ‚û∏ *NOME:* ${res.nome}
 ‚û∏ *UF:* ${res.uf}
 ‚û∏ *TELEFONE:* ${res.telefone}
 ‚û∏ *SITUA√á√ÉO:* ${res.situacao}
 ‚û∏ *BAIRRO:* ${res.bairro} 
 ‚û∏ *RUA:* ${res.logradouro}
 ‚û∏ *N√öMERO:* ${res.numero}
 ‚û∏ *CEP :* ${res.cep}
 ‚û∏ *MUNIC√çPIO:* ${res.municipio}
 ‚û∏ *PORTE:* ${res.porte}
 ‚û∏ *ABERTURA:* ${res.abertura}
 ‚û∏ *NATUREZA JUR√çDICA:* ${res.natureza_juridica}
 ‚û∏ *FANTASIA:* ${res.fantasia}
 ‚û∏ *CNPJ:* ${res.cnpj}
 ‚û∏ *√öLTIMA ATUALIZA√á√ÉO:* ${res.ultima_atualizacao}
 ‚û∏ *STATUS:* ${res.status}
 ‚û∏ *COMPLEMENTO:* ${res.complemento}
 ‚û∏ *EMAIL:* ${res.email}`;
        if (res.Erro)
          return env(`N√£o achei nenhum resultado sobre o cnpj: ${teks}!`);
        env(cnpj);
        break;
      case "github":
        if (args.length < 1)
          return env(
            `Coloque o nome do perfil na frente do comando\nExemplo: ${
              prefixobot + command
            } coelho`
          );
        perfil = body.slice(8);
        anu = await fetchJson(
          `https://www.luc4rio-rest-api.tk/api/social/github?nomedeusuario=${perfil}`
        );
        GitHub = `üè∑Ô∏è Nome : ${anu.Nome_De_Usuario}\nüìÜ Criada em : *${anu.Criada_Em}*\nüí´ Ultima atualiza√ß√£o : *${anu.Ultima_Atualizacao}*\nüë§ Seguidores : *${anu.Total_De_Seguidores}*\nüë• Total de Repositorios : *${anu.Total_De_Seguidores}*\nüåç Seguindo : *${anu.Total_Seguindo} Pessoas*\nüìä Seguidores : \n*${anu.Link_De_Seguidores}*\nüìÅ Reposit√≥rio : \n*${anu.Link_Do_Repositorios}*`;
        if (anu.Erro)
          return env(`N√£o achei nenhum resultado sobre: ${perfil}!`);
        env(GitHub);
        break;
      case "wikipedia":
        teks = body.slice(11);
        res = await fetchJson(
          `https://www.luc4rio-rest-api.tk/api/educacional/wikipedia?pergunta=${teks}`
        );
        Wikipedia = `${res.Resultado}`;
        if (res.Erro) return env(`N√£o achei nenhum resultado sobre: ${teks}!`);
        env(Wikipedia);
        break;
      //FIM
      //DONWLOADS
        case 'ytsearch':
          case 'ytsrc':
          if (args.length < 1) return env(`Exemplo:\n${command} A vit√≥ria chegou`)
          async function ytsrcp() {
          let plistS = []
          let ppliet = await yts(q) 
          for(let a of ppliet.all) {
          /plistS.push({title: a.title, description: `Tipo: Audio > Canal: ${a.author.name}\n Dura√ß√£o: ${a.timestamp}`, rowId: `${prefix}down_a ${a.url}`}, {title: a.title, description: `Tipo: Video > Canal: ${a.author.name}\n Dura√ß√£o: ${a.timestamp}`, rowId: `${prefix}down_v ${a.url}`})/
          plistS.push({title: a.title, description: `Canal: ${a.author.name}\nDura√ß√£o: ${a.timestamp}`, rowId: `${prefixobot}ytmp3 ${a.url}`})
          }
          listMessage = {
          text: `Resultados sobre: ${q}`,
          footerText: `ASHLEY-MD`,
          buttonText: "Clique aqui!",
          sections: [{
          title: "Resultado da pesquisa:", 
          rows: plistS
          }
          ]
          }
          conn.sendMessage(from, listMessage)
          }
          ytsrcp().catch(e => {
          env2("Ocorreu um erro!", "‚ùå")
          console.log(e)
          })
          break

      case "play":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!texto)
          return env(
            `Exemplo de como se usar: ${prefixobot + command} a vit√≥ria chegou`
          );
        var pinga = require("yt-search");
        var pesquisa = await pinga(texto);
        var anu =
          pesquisa.videos[Math.floor(Math.random() * pesquisa.videos.length)];
        play = `üé¨ T√≠tulo : ${anu.title}
üÜî ID : ${anu.videoId}
‚è≥ Dura√ß√£o : ${anu.timestamp}
üîç Views : ${anu.views}
üìÜ Publicado: ${anu.ago}
üë§ Nome do canal : ${anu.author.name}
üì± Canal : ${anu.author.url}
üí¨ Descri√ß√£o : ${anu.description}
üìé Link do v√≠deo: ${anu.url}`;
        env(mensagem[0].espere);
        conn.sendMessage(
          from,
          {
            image: { url: anu.thumbnail },
            caption: play,
            buttons: [
              {
                buttonId: `${prefixobot}ytmp3 ${anu.title}`,
                buttonText: { displayText: "√Åudio üéµ" },
                type: 1,
              },
            ],
            headerType: 4,
          },
          { quoted: mek }
        );
        break;
        case 'ytmp3': 
        case 'ytaudio': 
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");                		    
        if (args.length < 1) return env(`Exemplo: ${prefixobot}ytmp3 plutao`)
        teks = args.join(' ')
        env2('Espere um pouco...', "‚è≥")
        if (!teks.endsWith("-doc")){
        res = await yts(`${teks}`).catch(e => {
        env('Qual e nome da m√∫sica?')
        })
        res = await ytmate.y2mateA(res.all[0].url).catch(e => {
        env2('ùêÖùêöùê•ùê°ùêö,ùê≠ùêûùêßùê≠ùêû ùêÆùê¨ùêöùê´ ùêßùê®ùêØùêöùê¶ùêûùêßùê≠ùêû', '‚ùå')
        })
      await conn.sendMessage(from, { audio: {url: res[0].link }, mimetype: 'audio/mp4' }, {quoted: mek})
        env2("prontinho", "‚úÖ");
        } 
        break
      case "ytaudio2":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!texto) return env(`Exemplo : ${prefixobot + command} a vit√≥ria`);
        if (!isUrl(args[0]) && !args[0].includes("https://youtube.com"))
          return env("Cad√™ o url do v√≠deo do YouTube");
        env("Espere um pouco, comando est√° em beta");
        var { aiovideodl } = require("./lib/scraper");
        var result = await aiovideodl(isUrl(texto));
        var { medias } = result;
        var quality = args[1] ? args[1] : "128kbps";
        var media = medias
          .filter(
            (v) =>
              v.videoAvailable == false &&
              v.audioAvailable == true &&
              v.quality == quality
          )
          .map((v) => v);
        if (media[0].formattedSize.split("MB")[0] >= 100.0)
          return env("File Melebihi Batas" + util.format(media));
        conn.sendMessage(
          from,
          {
            audio: { url: media[0].url },
            Mimetype: "audio/mp4",
            fileName: `${title}.mp3`,
          },
          { quoted: mek }
        );
        break;
      case "ytmp42":
      case "ytvideo2":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (!isUrl(args[0]) && !args[0].includes("https://youtube.com"))
          return env("Cad√™ o url do v√≠deo do YouTube");
        if (!texto)
          return `Exemplo : ${
            prefixobot + command
          } https://youtu.be/pOFHZ2I7m_4`;
        env("Espere um pouco, comando est√° em beta");
        var { aiovideodl } = require("./lib/scraper");
        var result = await aiovideodl(isUrl(texto)[0]);
        var { medias } = result;
        var quality = args[1] ? args[1] : "360p";
        var media = medias
          .filter(
            (v) =>
              v.videoAvailable == true &&
              v.audioAvailable == false &&
              v.quality == quality
          )
          .map((v) => v);
        if (media[0].formattedSize.split("MB")[0] >= 100.0)
          return env("File Melebihi Batas" + util.format(media));
        conn.sendMessage(
          from,
          {
            video: { url: media[0].url },
            fileName: `${title}.mp4`,
            Mimetype: "video/mp4",
            caption: " Pronto",
          },
          { quoted: mek }
        );
        break;
      case "xvideos":
        if (!isPremium && isOwner) return env("vc nn e Premium;-;");
        if (args.length < 1)
          return env(
            `Coloque o t√≠tulo do v√≠deo na frente do comando\nExemplo: ${
              prefixobot + command
            } Fam√≠lia sacana`
          );
        teks = body.slice(9);
        res = await fetchJson(
          `https://apis-carlos.herokuapp.com/api/xvideos?apikey=carlos&option=search&text=${teks}`
        );
        var resultFinal = "  *_PESQUISAS ENCONTRADAS_*\n\n";
        for (let i of res.result) {
          resultFinal += `   *_LINK E TITULO DAS PEQUISAS ABAIXO_*\n\n*Titulo ‚Üí* ${i.title}\n*Link ‚Üí* ${i.url}\n\n`;
        }
        console.log(res);
        env(resultFinal);
        break;
      //GRUPO
      case "rankgado":
      case "rankgados":
        if (!isGroup) return env("somente em grupo");
        try {
          var ddr = [];
          ret = "üêÇ Rank dos mais gados do grupo \n\n";
          for (i = 0; i < 5; i++) {
            r = Math.floor(
              Math.random() * groupMetadata.participants.length + 0
            );
            ret += `üêÇ‚ùß @${groupMembers[r].id.split("@")[0]}\n`;
            ddr.push(groupMembers[r].id);
          }
          conn.sendMessage(
            from,
            {
              text: ret.trim(),
              mentions: ddr,
              buttons: [
                {
                  buttonId: `${prefixobot + command}`,
                  buttonText: { displayText: "NEXT RANK ‚ò∞" },
                  type: 1,
                },
              ],
              headerType: 4,
            },
            { quoted: mek }
          );
        } catch (e) {
          console.log(e);
          env("Deu erro, tente novamente :/");
        }
        break;
      case "ranklindo":
      case "ranklindos":
        if (!isGroup) return env("somente em grupo");
        try {
          var ddr = [];
          ret = "ü§§ Rank dos mais lindos do grupo \n\n";
          for (i = 0; i < 5; i++) {
            r = Math.floor(
              Math.random() * groupMetadata.participants.length + 0
            );
            ret += `ü§§ @${groupMembers[r].id.split("@")[0]}\n`;
            ddr.push(groupMembers[r].id);
          }
          conn.sendMessage(
            from,
            {
              text: ret.trim(),
              mentions: ddr,
              buttons: [
                {
                  buttonId: `${prefixobot + command}`,
                  buttonText: { displayText: "NEXT RANK ‚ò∞" },
                  type: 1,
                },
              ],
              headerType: 4,
            },
            { quoted: mek }
          );
        } catch (e) {
          console.log(e);
          env("Deu erro, tente novamente :/");
        }
        break;
      case "rankbaiano":
      case "rankbaianos":
        if (!isGroup) return env("somente em grupo");
        try {
          var ddr = [];
          ret = "üõå Rank dos mais baianos do grupo \n\n";
          for (i = 0; i < 5; i++) {
            r = Math.floor(
              Math.random() * groupMetadata.participants.length + 0
            );
            ret += `üõå @${groupMembers[r].id.split("@")[0]}\n`;
            ddr.push(groupMembers[r].id);
          }
          conn.sendMessage(
            from,
            {
              text: ret.trim(),
              mentions: ddr,
              buttons: [
                {
                  buttonId: `${prefixobot + command}`,
                  buttonText: { displayText: "NEXT RANK ‚ò∞" },
                  type: 1,
                },
              ],
              headerType: 4,
            },
            { quoted: mek }
          );
        } catch (e) {
          console.log(e);
          env("Deu erro, tente novamente :/");
        }
        break;
      case "rankgay":
      case "rankgays":
        if (!isGroup) return env("somente em grupo");
        try {
          var ddr = [];
          ret = "üè≥Ô∏è‚Äçüåà Rank dos mais gays do grupo \n\n";
          for (i = 0; i < 5; i++) {
            r = Math.floor(
              Math.random() * groupMetadata.participants.length + 0
            );
            ret += `üè≥Ô∏è‚Äçüåà @${groupMembers[r].id.split("@")[0]}\n`;
            ddr.push(groupMembers[r].id);
          }
          conn.sendMessage(
            from,
            {
              text: ret.trim(),
              mentions: ddr,
              buttons: [
                {
                  buttonId: `${prefixobot + command}`,
                  buttonText: { displayText: "NEXT RANK ‚ò∞" },
                  type: 1,
                },
              ],
              headerType: 4,
            },
            { quoted: mek }
          );
        } catch (e) {
          console.log(e);
          env("Deu erro, tente novamente :/");
        }
        break;
      case "ranknazista":
      case "ranknazistas":
        if (!isGroup) return env("somente em grupo");
        try {
          var ddr = [];
          ret = "üá©üá™Rank dos mais nazistas do grupo \n\n";
          for (i = 0; i < 5; i++) {
            r = Math.floor(
              Math.random() * groupMetadata.participants.length + 0
            );
            ret += `üá©üá™ @${groupMembers[r].id.split("@")[0]}\n`;
            ddr.push(groupMembers[r].id);
          }
          conn.sendMessage(
            from,
            {
              text: ret.trim(),
              mentions: ddr,
              buttons: [
                {
                  buttonId: `${prefixobot + command}`,
                  buttonText: { displayText: "NEXT RANK ‚ò∞" },
                  type: 1,
                },
              ],
              headerType: 4,
            },
            { quoted: mek }
          );
        } catch (e) {
          console.log(e);
          env("Deu erro, tente novamente :/");
        }
        break;
      case "rankgostoso":
      case "rankgostosos":
        if (!isGroup) return env("somente em grupo");
        try {
          var ddr = [];
          ret = "üòãRank dos mais gostosos do grupo \n\n";
          for (i = 0; i < 5; i++) {
            r = Math.floor(
              Math.random() * groupMetadata.participants.length + 0
            );
            ret += `üòã @${groupMembers[r].id.split("@")[0]}\n`;
            ddr.push(groupMembers[r].id);
          }
          conn.sendMessage(
            from,
            {
              text: ret.trim(),
              mentions: ddr,
              buttons: [
                {
                  buttonId: `${prefixobot + command}`,
                  buttonText: { displayText: "NEXT RANK ‚ò∞" },
                  type: 1,
                },
              ],
              headerType: 4,
            },
            { quoted: mek }
          );
        } catch (e) {
          console.log(e);
          env("Deu erro, tente novamente :/");
        }
        break;
      case "rankfeio":
      case "rankfeios":
        if (!isGroup) return env("somente em grupo");
        try {
          var ddr = [];
          ret = "ü§ÆRank dos mais feios do grupo \n\n";
          for (i = 0; i < 5; i++) {
            r = Math.floor(
              Math.random() * groupMetadata.participants.length + 0
            );
            ret += `ü§Æ @${groupMembers[r].id.split("@")[0]}\n`;
            ddr.push(groupMembers[r].id);
          }
          conn.sendMessage(
            from,
            {
              text: ret.trim(),
              mentions: ddr,
              buttons: [
                {
                  buttonId: `${prefixobot + command}`,
                  buttonText: { displayText: "NEXT RANK ‚ò∞" },
                  type: 1,
                },
              ],
              headerType: 4,
            },
            { quoted: mek }
          );
        } catch (e) {
          console.log(e);
          env("Deu erro, tente novamente :/");
        }
        break;
      case "rankcorno":
      case "rankcornos":
        if (!isGroup) return env("somente em grupo");
        try {
          var ddr = [];
          ret = "üêÇRank dos mais gados do grupo \n\n";
          for (i = 0; i < 5; i++) {
            r = Math.floor(
              Math.random() * groupMetadata.participants.length + 0
            );
            ret += `üêÇ @${groupMembers[r].id.split("@")[0]}\n`;
            ddr.push(groupMembers[r].id);
          }
          conn.sendMessage(
            from,
            {
              text: ret.trim(),
              mentions: ddr,
              buttons: [
                {
                  buttonId: `${prefixobot + command}`,
                  buttonText: { displayText: "NEXT RANK ‚ò∞" },
                  type: 1,
                },
              ],
              headerType: 4,
            },
            { quoted: mek }
          );
        } catch (e) {
          console.log(e);
          env("Deu erro, tente novamente :/");
        }
        break;
      case "rankmacaco":
      case "rankmacacos":
        if (!isGroup) return env("somente em grupo");
        try {
          var ddr = [];
          ret = "üêíRank dos mais gados do grupo \n\n";
          for (i = 0; i < 5; i++) {
            r = Math.floor(
              Math.random() * groupMetadata.participants.length + 0
            );
            ret += `üêí @${groupMembers[r].id.split("@")[0]}\n`;
            ddr.push(groupMembers[r].id);
          }
          conn.sendMessage(
            from,
            {
              text: ret.trim(),
              mentions: ddr,
              buttons: [
                {
                  buttonId: `${prefixobot + command}`,
                  buttonText: { displayText: "NEXT RANK ‚ò∞" },
                  type: 1,
                },
              ],
              headerType: 4,
            },
            { quoted: mek }
          );
        } catch (e) {
          console.log(e);
          env("Deu erro, tente novamente :/");
        }
        break;
      case "morte":
        var idazin = `${Math.floor(Math.random() * 110)}`;
        var idade = idazin;
        var teks = body.slice(7);
        if (teks.length > 15)
          return env(
            `Se liga, esse nome nem existe.... Mais voc√™ morre aos ${idazin}`
          );
        if (args.length < 1)
          return env(`Pessoas com esse nome: ${pushname}
Tendem a morrer aos ${idade} anos de Idade.`);
        var pinga = `Pessoas com esse nome: ${teks}
Tendem a morrer aos ${idade} anos de Idade.`;
        env(pinga);
        break;
      case "gado":
      case "gada":
        if (args.length < 1) return env("marque seu amigo ou sua amiga com @");
        gadin = body.slice(6);
        let chifg = [];
        const chifr = [
          "ultra extreme gado",
          "Gado-Master",
          "Gado-Rei",
          "Gado",
          "Escravo-ceta",
          "Escravo-ceta Maximo",
          "Gacorno?",
          "Jogador De Forno Livre<3",
          "Mestre Do Frifai<3<3",
          "Gado-Manso",
          "Gado-Conformado",
          "Gado-Incubado",
          "Gado Deus",
          "Mestre dos Gados",
          "Topa tudo por buceta",
          "Gado Comum",
          "Mini Gadinho",
          "Gado Iniciante",
          "Gado Basico",
          "Gado Intermediario",
          "Gado Avan√ßado",
          "Gado Profisional",
          "Gado Mestre",
          "Gado Chifrudo",
          "Corno Conformado",
          "Corno HiperChifrudo",
          "Chifrudo Deus",
          "Mestre dos Chifrudos",
        ];
        const crifrudo = chifr[Math.floor(Math.random() * chifr.length)];
        let chif = `qual e a porcentagem dele de boi muhhh: ${gadin} \n\nA porcentagem de gado deleüêÇ: ${crifrudo}`;
        conn.sendMessage(from, { text: chif, mentions: [chifg] });
        break;
      case "gay":
        if (body.slice(5).trim() == "")
          env(`marque algu√©m usando @\nExemplo: ${prefixobot + command} @`);
        gadin = body.slice(5);
        let chiufg = [];
        const ti = [
          "4",
          "9",
          "17",
          "28",
          "34",
          "48",
          "59",
          "62",
          "74",
          "83",
          "97",
          "100",
          "29",
          "94",
          "75",
          "82",
          "41",
          "39",
        ];
        const kl = ti[Math.floor(Math.random() * ti.length)];
        pinga = `Qual e porcentagem de gay dele: ${gadin}\n\nA porcentagem de Z√© baitola dele e: ${kl}%`;
        conn.sendMessage(from, { text: pinga, mentions: [gadin] });
        break;
      case "pau":
      case "stick":
        randomp = `${Math.floor(Math.random() * 35)}`;
        const tamanho = randomp;
        if (tamanho < 13) {
          pp = "s√≥ a fimose";
        } else if (tamanho == 13) {
          pp = "passou da m√©diaüò≥";
        } else if (tamanho == 14) {
          pp = "passou da m√©diaüò≥";
        } else if (tamanho == 15) {
          pp = "eita, vai pegar manga?";
        } else if (tamanho == 16) {
          pp = "eita, vai pegar manga?";
        } else if (tamanho == 17) {
          pp = "calma man, a mina n√£o √© um po√ßoüò≥";
        } else if (tamanho == 18) {
          pp = "calma man, a mina n√£o √© um po√ßoüò≥";
        } else if (tamanho == 19) {
          pp = "calma man, a mina n√£o √© um po√ßoüò≥";
        } else if (tamanho == 20) {
          pp = "voc√™ tem um poste no meio das pernas";
        } else if (tamanho == 21) {
          pp = "voc√™ tem um poste no meio das pernas";
        } else if (tamanho == 22) {
          pp = "voc√™ tem um poste no meio das pernas";
        } else if (tamanho == 23) {
          pp = "voc√™ tem um poste no meio das pernas";
        } else if (tamanho == 24) {
          pp = "voc√™ tem um poste no meio das pernas";
        } else if (tamanho > 25) {
          pp = "vai procurar petr√≥leo com isso?";
        }
        hasil = `Seu pau tem ${randomp}cm\n\n${pp}`;
        env(hasil);
        break;
      case "chance":
        if (args.length < 1)
          return env(
            `Coloque deseja sabe na frente do comando\nExemplo de como se usar ${
              prefixobot + command
            } eu vou ser rico?`
          );
        jide = [];
        mentions: jids;
        teks = body.slice(8);
        var tii = [
          "4",
          "9",
          "17",
          "28",
          "34",
          "48",
          "59",
          "62",
          "74",
          "83",
          "97",
          "100",
          "29",
          "94",
          "75",
          "82",
          "41",
          "39",
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9",
          "10",
          "11",
          "12",
          "13",
          "14",
          "15",
          "16",
          "17",
          "18",
          "19",
          "20",
          "21",
          "21",
          "22",
          "23",
          "24",
          "25",
          "26",
          "27",
          "28",
          "29",
          "30",
          "31",
          "32",
          "33",
          "34",
          "35",
          "36",
          "37",
          "38",
          "39",
          "40",
          "41",
          "42",
          "43",
          "44",
          "45",
          "46",
          "47",
          "48",
          "49",
          "50",
          "51",
          "52",
          "53",
          "54",
          "55",
          "56",
          "57",
          "58",
          "59",
          "60",
          "61",
          "62",
          "63",
          "64",
          "65",
        ];
        var kkll = tii[Math.floor(Math.random() * tii.length)];
        pkt = `
A chance de ${teks}

A chance disso acontece e: ${kkll}%`;
        conn.sendMessage(from, { text: pkt, mentions: jids }, { quoted: mek });
        break;
      case "beijar":
        if (
          mek.message.extendedTextMessage === undefined ||
          mek.message.extendedTextMessage === null
        )
          return env("marque uma pessoa com @");
        if (!isGroup) return env("somente em grupo");
        var beijar = ["beijar", "beijar2", "beijar3"];
        var beijaar = beijar[Math.floor(Math.random() * beijar.length)];
        var num = mek.message.extendedTextMessage.contextInfo.mentionedJid[0];
        var pinga = `Ohw mds @${sender.split("@")[0]} deu um beijinho no @${
          num.split("@")[0]
        }üòç‚ù§`;
        await conn.sendMessage(
          from,
          {
            video: fs.readFileSync(`./complement/videos/beijar/${beijaar}.mp4`),
            caption: pinga,
            gifPlayback: true,
          },
          { quoted: mek }
        );
        break;
      case "tapa":
      case "slap":
        if (
          mek.message.extendedTextMessage === undefined ||
          mek.message.extendedTextMessage === null
        )
          return env("marque uma pessoa com @");
        if (!isGroup) return env("somente em grupo");
        var tapaa = ["tapa", "tapa2", "tapa3", "tapa4"];
        var tapa = tapaa[Math.floor(Math.random() * tapaa.length)];
        var num = mek.message.extendedTextMessage.contextInfo.mentionedJid[0];
        var pinga = `@${sender.split("@")[0]} deu um tapa no @${
          num.split("@")[0]
        }üëãüèª`;
        await conn.sendMessage(
          from,
          {
            video: fs.readFileSync(`./complement/videos/tapa/${tapa}.mp4`),
            caption: pinga,
            mentions: [sender],
            gifPlayback: true,
          },
          { quoted: mek }
        );
        break;
      case "abracar":
      case "abra√ßar":
        if (
          mek.message.extendedTextMessage === undefined ||
          mek.message.extendedTextMessage === null
        )
          return env("marque uma pessoa com @");
        if (!isGroup) return env("somente em grupo");
        var abracar = ["abracar", "abracar2", "abracar3"];
        var abrac = abracar[Math.floor(Math.random() * abracar.length)];
        var num = mek.message.extendedTextMessage.contextInfo.mentionedJid[0];
        var pinga = `@${sender.split("@")[0]} ùêÉùêÑùêî ùêîùêå ùêÄùêÅùêëùêÄùêÇùêé ùêçùêé @${
          num.split("@")[0]
        } ùêêùêîùêÑ ùêÖùêéùêÖùêé`;
        await conn.sendMessage(
          from,
          {
            video: fs.readFileSync(`./complement/videos/abracar/${abrac}.mp4`),
            caption: pinga,
            gifPlayback: true,
          },
          { quoted: mek }
        );
        break;
      //FIM
      //DINHEIRO
      case "saldo":
        var salldo = checkATMuser(sender);
        const limite = { salldo };
        if (limite < 100000) {
          status = "Classe m√©dia";
        } else if (limite == 1000000) {
          status = "Milion√°rio";
        } else if (limite == 1000000000) {
          status = "Bilion√°rio";
        } else if (limite == 100000) {
          status = "Classe pobre";
        }
        pinga = `‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ„Ö§„Ö§„Ö§STATUS BANC√ÅRIO„Ö§„Ö§„Ö§‚îÇ
‚ïû‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
‚îÇ
‚ïû‚û∏ üë§Nome: *${pushname}*
‚ïû‚û∏ üìûN√∫mero: *${sender.split("@")[0]}*
‚ïû‚û∏ üîçSitua√ß√£o Banc√°ria: *Regular*
‚ïû‚û∏ üåêInstitui√ß√£o: *RubyBank*
‚ïû‚û∏ ‚ô¶Ô∏èSaldo dispon√≠vel: *${salldo}*
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;
        conn.sendMessage(
          from,
          {
            text: pinga,
            footer: `Caso queira fazer transfer√™ncia, use o bot√£o a baixo`,
            buttons: [
              {
                buttonId: `${prefixobot}helptransf`,
                buttonText: { displayText: "FAZER TRANSFER√äNCIA" },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;
      case "pix":
        if (args.length < 1)
          return env(`Modo certo de se usar ${prefixobot}transferir @ | valor`);
        buttons = [
          {
            buttonId: `${prefixobot}saldo`,
            buttonText: { displayText: "Meu Saldo" },
            type: 1,
          },
        ];
        if (!q.includes("|"))
          return env(
            `Faltou por o valor... exemplo de como se usar: ${prefixobot}transferir @ | 2500\n n√£o esque√ßa de usar o |`
          );
        const tujuan = q.substring(0, q.indexOf("|") - 1);
        const jumblah = q.substring(q.lastIndexOf("|") + 1);
        if (isNaN(jumblah))
          return await env("O valor precisa est√° em n√∫meros...");
        if (jumblah < 50) return env(`transfr√™ncia m√≠nima e de 50 rubys`);
        if (checkATMuser(sender) < jumblah)
          return env(
            `Voc√™ n√£o tem rubins suficiente para fazer uma transfer√™ncia, voc√™ precisa ter no min√≠mo 1000 de rubi`
          );
        const tujuantf = `${tujuan.replace("@", "")}@s.whatsapp.net`;
        fee = 0.0 * jumblah; //IMPOSTO CADA 1 DE DINHERO, ALMENTA E CAI NA SUA CONTA, TODA VEZ QU√ä ALGU√âM FAZER TRANSFERENCIA
        hasiltf = jumblah - fee;
        addKoinUser(tujuantf, hasiltf);
        confirmATM(sender, jumblah);
        addKoinUser("554497433716@s.whatsapp.net", fee);
        pingaa = `*TRANSFER√äNCIA CONCLU√çDA*
Origem: *${sender.split("@")[0]}*
Destinat√°rio: *${tujuan}*
Valor transfer√™rido: *${jumblah}*
Institui√ß√£o: *RubyBank*
Tarifa sobre: *0,00*`;
        conn.sendMessage(
          from,
          {
            text: pingaa,
            footer: `Deseja v√™ seu saldo atualizado?`,
            buttons: [
              {
                buttonId: `${prefixobot}saldo`,
                buttonText: { displayText: "CONSULTA SALDO" },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;
      case "helptransf":
        pingu = `Para fazer uma transfer√™ncia de rubins para outra pessoa fa√ßa o seguinte, exemplo de como se usar: ${prefixobot}pix @ | 1000\n n√£o esque√ßa de usar o |`;
        conn.sendMessage(from, { text: pingu }, { quoted: mek });
        break;
      //JOGOS
      case "minerar":
        if (!isGroup) return env("Comando apenas para grupo");
        let minerar = Math.floor(Math.random() * 30);
        let textmi = [
          `Voc√™ minerando nas ilhas savitas encontrou ${minerar} rubys!üë∑‚õèÔ∏è`,
          `Voc√™ minerando no seu quintal achou ${minerar} rubys`,
          `Parab√©ns voc√™ achou ${minerar} ruby no quintal da vizinha?;-;`,
          `Voc√™ invadiu mina proibida, e quando tava fazendo minera√ß√£o achou ${minerar} rubys!‚õèÔ∏è`,
          `Voc√™ roubou ${minerar} rubys na mina de Minas gerais!üë∑‚õèÔ∏èüí∞`,
        ];
        const minerarresp = textmi[Math.floor(Math.random() * textmi.length)];
        addKoinUser(sender, minerar);
        conn.sendMessage(from, { text: minerarresp }, { quoted: mek });
        break;
      case "cavalo":
        if (!isGroup) return env("Comando apenas para grupo");
        dinheiroc = checkATMuser(sender);
        if (args[0] == "")
          return env("especifique a quantidade de Rubys para apostar.");
        if (isNaN(args[0])) return env("para apostar use apenas n√∫meros.");
        if (dinheiroc < 50)
          return env(
            `desculpe vc ainda n√£o pode apostarüòï somente com 50 Rubys.\n\nseu saldo √© de: ${dinheiroc}`
          );
        if (args[0] > dinheiroc)
          return env(
            `voc√™ n√£o pode apostar uma quantidade de dinheiro maior do que a qu√™ voc√™ tem, e nosso limite de apostas √© de *50* Rubys\n\nSeu saldo √© de: ${dinheiroc}`
          );
        if (args[0] < 50)
          return env(`o minimo para se apostar √© de 50 rubys`, { quoted: mek });
        let fase = Math.floor(Math.random() * 6) + 1;
        let n√£o_ganhou = -args[0];
        let ganhou = fase + parseInt(args[0]);
        if (fase == 1) {
          sendButtonText(
            `‚òÅ   ‚òÅ    ‚òÄ    ‚òÅ  ‚òÅÔ∏è\n` +
              `|           üêé                   |\n` +
              `|      üêé      üêé            |\n` +
              `|üêé                              |\n` +
              `|                      üèáüèºüî¥  |\n` +
              `üö©                           üö©`,
            `seu cavalo perdeu: ${n√£o_ganhou} rubys`,
            { quoted: mek }
          );
          addKoinUser(sender, n√£o_ganhou);
        } else if (fase == 2) {
          sendButtonText(
            `‚òÅ   ‚òÅ    ‚òÄ    ‚òÅ   ‚òÅ\n` +
              `|           üêé               |\n` +
              `|      üêé      üêé           |\n` +
              `| üêé                         |\n` +
              `|                   üêé       |\n` +
              `üö©                    üèáüèºüî¥ üö©`,
            `seu cavalo ganhou: ${ganhou} rubys`,
            { quoted: mek }
          );
          addKoinUser(sender, ganhou);
        } else if (fase == 3) {
          sendButtonText(
            `‚òÅ   ‚òÅ    ‚òÄ    ‚òÅ  ‚òÅÔ∏è\n` +
              `|           üêé                   |\n` +
              `|      üèáüèºüî¥     üêé          |\n` +
              `|üêé                              |\n` +
              `|                      üêé  |\n` +
              `üö©                           üö©`,
            `seu cavalo perdeu: ${n√£o_ganhou} rubys`,
            { quoted: mek }
          );
          addKoinUser(sender, n√£o_ganhou);
        } else if (fase == 4) {
          sendButtonText(
            `‚òÅ   ‚òÅ    ‚òÄ    ‚òÅ   ‚òÅ\n` +
              `|            üêé              |\n` +
              `|       üêé                   |\n` +
              `| üêé                     üêé |\n` +
              `|                üêé          |\n` +
              `üö©                 üèáüèºüî¥    üö©`,
            `seu cavalo ganhou: ${ganhou} rubys`,
            { quoted: mek }
          );
        } else if (fase == 5) {
          sendButtonText(
            `‚òÅ   ‚òÅ    ‚òÄ    ‚òÅ  ‚òÅÔ∏è\n` +
              `|           üêé                   |\n` +
              `|      üêé      üèáüèºüî¥          |\n` +
              `|üêé                              |\n` +
              `|                      üêé  |\n` +
              `üö©                           üö©`,
            `seu cavalo perdeu: ${n√£o_ganhou} rubys`,
            { quoted: mek }
          );
          addKoinUser(sender, n√£o_ganhou);
        } else if (fase == 6) {
          sendButtonText(
            `‚òÅ   ‚òÅ   ‚òÄ   ‚òÅ   ‚òÅ\n` +
              `|           üêé              |\n` +
              `|      üêé                   |\n` +
              `| üêé                     üêé |\n` +
              `|                     üêé     |\n` +
              `üö©            üèáüèºüî¥         üö©Ô∏è`,
            `seu cavalo ganhou: ${ganhou} rubys`,
            { quoted: mek }
          );
          addKoinUser(sender, ganhou);
        }
        break;
      case "apostar":
        if (!isGroup) return env("Comando apenas para grupo");
        const dinheiro = checkATMuser(sender);
        const checkxpr = checkATMuser(sender, dinheiro);
        const quantidader = `50`;
        if (checkxpr <= quantidader)
          return env(
            `desculpe vc ainda n√£o  pode apostarüòï somente com  ${quantidader} de Rubys.\n\nSuas Rubys: ${checkxpr}`
          );
        if (args.length !== 1)
          return env("Especifique a quantidade de Ruby para apostar.");
        if (Number(args[0]) >= checkxpr || Number(args[0]) >= dinheiro)
          return env(
            `Voc√™ n√£o pode apostar uma quantidade de dinheiro maior do que a voc√™ tem, e nosso limite de apostas √© de ${quantidader} dinheiro por vez!\n\nSeu dinheiro: ${checkxpr}`
          );
        if (Number(args[0]) < 50)
          return env(`O minimo para se apostar √© de 50 Rubys`);
        if (isNaN(args[0]))
          return env(
            "Para apostar use apenas n√∫meros, nada de inserir letras, a menos que queira perder todo o XP que tenha."
          );
        const double = Math.floor(Math.random() * 7) + 1;
        const nrolxp = Number(-args[0]);
        const prolxp = double + Number(args[0]);
        if (double == 1) {
          await env(
            `üî™BANG!!!üí£\n\nVoc√™ perdeu na roleta-russa, causando uma perca de ${nrolxp} em seu dinheiro.`
          );
          addKoinUser(sender, nrolxp, dinheiro);
          addKoinUser(`${OwnerNumber}@s.whatsapp.net`, prolxp);
        } else if (double == 2) {
          await env(
            `Voc√™ Ganhouü•≥\nSobreviveu ao tiro e recebeu ${prolxp} Rubys`
          );
          addKoinUser(sender, prolxp, dinheiro);
        } else if (double == 3) {
          await env(
            `Poxa voc√™ est√° sem sorteüòì\n\nVoc√™ perdeu ${nrolxp}\n√£o desista continue apostandoüòéü§ô`
          );
          addKoinUser(sender, nrolxp, dinheiro);
          addKoinUser(`${OwnerNumber}@s.whatsapp.net`, prolxp);
        } else if (double == 4) {
          await env(
            `Essa foi por pouco!!üò¨\n\nVoc√™ consegiu concluir o golpe e ganhou ${prolxp} Rubys`
          );
          addKoinUser(sender, prolxp, dinheiro);
        } else if (double == 5) {
          await env(
            `Voc√™ errou o cavaloÔ∏è\n\nAcabou perdendo ${nrolxp} em seu dinheiro, que tal..apostar mais alto??ü§´.`
          );
          addKoinUser(sender, nrolxp, dinheiro);
          addKoinUser(`${OwnerNumber}@s.whatsapp.net`, prolxp);
        } else if (double == 6) {
          await env(
            `ü•≥Aeeeeeeü•≥\n\nVoc√™ finalmente ganhou, receba seus ${prolxp} de Rubysüî∑Ô∏è`
          );
          addKoinUser(sender, prolxp, dinheiro);
        }
        break;
      case "jogodavelha":
      case "velha":
        if (!isGroup) return env("Comando apenas para grupo");
        if (!isGame) return env(mensagem[0].game);
        if (fs.existsSync(`./db/tictactoe/db/${from}.json`)) {
          const boardnow = setGame(`${from}`);
          const matrix = boardnow._matrix;
          const chatMove = `*üéÆ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏üïπÔ∏è*
     
[‚ùó] Algu√©m est√° jogando no momento...\n\n@${boardnow.X} VS @${boardnow.O}
     
‚ùå : @${boardnow.X}
‚≠ï : @${boardnow.O}
     
 Sua vez : @${boardnow.turn == "X" ? boardnow.X : boardnow.O}
     
${matrix[0][0]}  ${matrix[0][1]}  ${matrix[0][2]}
${matrix[1][0]}  ${matrix[1][1]}  ${matrix[1][2]}
${matrix[2][0]}  ${matrix[2][1]}  ${matrix[2][2]}
`;
          mention(chatMove);
          return;
        }
        if (argss.length === 1)
          return env(`*‚üÖ‚ùó‚üÜ Jogue com Alguem!!!!*
*para inicar a partida : ${prefixobot + command} @membro do gp*`);
        const boardnow = setGame(`${from}`);
        console.log(`Start Tictactore ${boardnow.session}`);
        boardnow.status = false;
        boardnow.X = sender.replace("@s.whatsapp.net", "");
        boardnow.O = argss[1].replace("@", "");
        fs.writeFileSync(
          `./db/tictactoe/db/${from}.json`,
          JSON.stringify(boardnow, null, 2)
        );
        const strChat = `*„Äéüìå·é¨’è·è¢·é¨·é°·é™Œù·é†œ¥ œ¥ œ¥·è¢œ¥Œù·é¨ŒùÕ≤·é¨‚öîÔ∏è„Äè*

@${sender.replace(
          "@s.whatsapp.net",
          ""
        )} _est√° te desafiando para uma partida de jogo da velha..._
_[ ${argss[1]} ] Use *„ÄéS„Äè* para aceitar ou *„ÄéN„Äè* para n√£o aceitar..._
     `;
        mention(strChat);
        break;
      case "resetarvelha":
      case "resetavelha":
      case "rst":
        if (!isGame) return env(mensagem[0].game);
        if (!isGroup) return env("Comando apenas para grupo");
        if (fs.existsSync("./db/tictactoe/db/" + from + ".json")) {
          fs.unlinkSync("./db/tictactoe/db/" + from + ".json");
          env(`Jogo da velha resetado com sucesso nesse grupo!`);
        } else {
          env(`N√£o a nenhuma sess√£o em andamento...`);
        }
        break;
      case "resetaki":
        if (!isGame) return env(mensagem[0].game);
        if (
          akinator[0][from] &&
          akinator[0][from].player != sender &&
          !isMemberAdmin &&
          isOwner
        )
          return env(
            "*N√£o √© voc√™ que est√° jogando*\n\nOu pe√ßa um admin para resetar o akineitor"
          );
        akinator[0][from] = undefined;
        fs.writeFileSync(
          "./db/json/akinator.json",
          JSON.stringify(akinator, null, 2)
        );
        buttons_opts = [
          {
            buttonId: "akinator sim",
            buttonText: { displayText: "Sim" },
            type: 1,
          },
          {
            buttonId: "akinator nao",
            buttonText: { displayText: "N√£o" },
            type: 1,
          },
        ];
        sendbuttonsMessage = {
          text: `*Jogo reiniciado com sucesso! Deseja jogar outra partida*`,
          footer: "Sim ou n√£o?",
          buttons: buttons_opts,
          headerType: 1,
        };
        conn.sendMessage(from, sendbuttonsMessage);
        break;
      case "respaki":
        if (!mek.message.listResponseMessage) return;
        if (akinator[0][from] && akinator[0][from].player != sender)
          return env("*N√£o √© voc√™ que est√° jogando*");
        if (args.length < 1) return;
        await akinator[0][from].game.step(args[0]);
        if (akinator[0][from].game.progress > 85) {
          await akinator[0][from].game.win();
          teks = `Por acaso seu personagem √© ${akinator[0][from].game.answers[0].name}?`;
          buttons_opts = [
            {
              buttonId: `${prefixobot}finaki sim`,
              buttonText: { displayText: "Sim" },
              type: 1,
            },
            {
              buttonId: `${prefixobot}finaki nao`,
              buttonText: { displayText: "N√£o" },
              type: 1,
            },
          ];
          sendbuttonsMessage = {
            image: {
              url: akinator[0][from].game.answers[0].absolute_picture_path,
            },
            caption: `J√° sei!\n\n${teks}`,
            footer: "Sim ou n√£o?",
            buttons: buttons_opts,
            headerType: 1,
          };
          conn.sendMessage(from, sendbuttonsMessage);
        } else {
          listMessage = {
            text: akinator[0][from].game.question,
            footer: "Mostrar op√ß√µes",
            buttonText: "Op√ß√µes",
            title: "Pergunta",
            sections: [
              {
                title: "Op√ß√µes",
                rows: [
                  {
                    rowId: `${prefixobot}respaki 0`,
                    title: "Sim",
                    description: "",
                  },
                  {
                    rowId: `${prefixobot}respaki 1`,
                    title: "N√£o",
                    description: "",
                  },
                  {
                    rowId: `${prefixobot}respaki 2`,
                    title: "N√£o sei",
                    description: "",
                  },
                  {
                    rowId: `${prefixobot}respaki 3`,
                    title: "Provavelmente sim",
                    description: "",
                  },
                  {
                    rowId: `${prefixobot}respaki 4`,
                    title: "Provavelmente n√£o",
                    description: "",
                  },
                ],
              },
            ],
          };
          conn.sendMessage(from, listMessage, { quoted: mek });
        }
        break;
      case "akinator":
        if (!isGame) return env(mensagem[0].game);
        buttons_opts = [
          {
            buttonId: `akinator sim`,
            buttonText: { displayText: "Sim" },
            type: 1,
          },
          {
            buttonId: `akinator nao`,
            buttonText: { displayText: "N√£o" },
            type: 1,
          },
        ];
        sendbuttonsMessage = {
          text: `Ol√°, sou o akinator ${pushname}\nDeseja jogar?`,
          footer: "Vamos jogar um jogo?",
          buttons: buttons_opts,
          headerType: 1,
        };
        conn.sendMessage(from, sendbuttonsMessage, { quoted: mek });
        break;
      case "cassino":
      case "slot":
        if (!isGame) return env(mensagem[0].game);
        if (!isGroup) return env("Comando apenas para grupo");
        var sotoy = [
          "üçä : üçí : üçê",
          "üçí : üçì : üçä",
          "üçá : üçá : üçá",
          "üçä : üçã : üçì",
          "üçì : üçí : üçê",
          "üçì : üçí : üçä",
          "üçä : üçã : üçì",
          "üçê : üçí : üçã",
          "üçê : üçê : üçê",
          "üçä : üçí : üçí",
          "üçì : üçì : üçá",
          "üçå : üçí : üçì",
          "üçê : üçì : üçì",
          "üçä : üçã : üçí",
          "üçã : üçã : üçå",
          "üçì : üçì : üçá",
          "üçì : üçê : üçá",
          "üçì : üçì : üçì",
          "üçí : üçí : üçí",
          "üçå : üçå : üçå",
        ];
        var somtoy = sotoy[Math.floor(Math.random() * sotoy.length)];
        var cassino = `[ CASSINO DE FRUTA ]\n-----------------\nüçã : üçå : üçç\n${somtoy}<=====\nüçã : üçå : üçç\n[  üé∞ | SLOTS ]\n\nInforma√ßoes : Se voc√™ pegar 3 iguais significa que voc√™ ganhou\n\nExemplo : üçå : üçå : üçå<=====`;
        conn.sendMessage(
          from,
          {
            text: cassino,
            footer:
              "Caso voc√™ queira jogar novamente, aperte o bot√£o a baixo!.",
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Jogar novamente Ô∏è" },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;
      case "cassino2":
      case "slot2":
        if (!isGame) return env(mensagem[0].game);
        if (!isGroup) return env("Comando apenas para grupo");
        var sotou = [
          "ü¶´ : üêøÔ∏è : üêì",
          "üêøÔ∏è : üê¨ : ü¶´",
          "üêá : üêá : üêá",
          "ü¶´ : ü¶≠ : üê¨",
          "üê¨ : üêøÔ∏è : üêì",
          "üê¨ : üêøÔ∏è : ü¶´",
          "ü¶´ : ü¶≠ : üê¨",
          "üêì : üêøÔ∏è : ü¶≠",
          "üêì : üêì : üêì",
          "ü¶´ : üêøÔ∏è : üêøÔ∏è",
          "üê¨ : üê¨ : üêá",
          "üêí : üêøÔ∏è : üê¨",
          "üêì : üê¨ : üê¨",
          "ü¶´ : ü¶≠ : üêøÔ∏è",
          "ü¶≠ : ü¶≠ : üêí",
          "üê¨ : üê¨ : üêá",
          "üê¨ : üêì : üêá",
          "üê¨ : üê¨ : üê¨",
          "üêøÔ∏è : üêøÔ∏è : üêøÔ∏è",
          "üêí : üêí : üêí",
        ];
        var somto = sotou[Math.floor(Math.random() * sotou.length)];
        var cassino2 = `[ CASSINO ANIMAL ]\n-----------------\nü¶≠ : üêí : üê¨\n${somto}<=====\nü¶≠ : üêí : üê¨\n[  üé∞ | SLOTS ]\n\nInforma√ßoes : Se voc√™ pegar 3 iguais significa que voc√™ ganhou\n\nExemplo : üêí : üêí : üêí<=====`;
        conn.sendMessage(
          from,
          {
            text: cassino2,
            footer:
              "Caso voc√™ queira jogar novamente, aperte o bot√£o a baixo!.",
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "Jogar novamente Ô∏è" },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;
      case "round6":
        if (!isGame) return env(mensagem[0].game);
        if (!isGroup) return env("Comando apenas para grupo");
        jogadorround = `${Math.floor(Math.random() * 456)}`;
        pinga = `Escolha qual forma voc√™ quer jogar.`;
        conn.sendMessage(
          from,
          {
            text: pinga,
            footer: `Voc√™ e o jogador n√∫mero: ${jogadorround}`,
            buttons: [
              {
                buttonId: `${prefixobot}round6_formas`,
                buttonText: { displayText: "‚òÇÔ∏è" },
                type: 1,
              },
              {
                buttonId: `${prefixobot}round7_formas`,
                buttonText: { displayText: "‚≠ï" },
                type: 1,
              },
              {
                buttonId: `${prefixobot}round8_formas`,
                buttonText: { displayText: "‚≠ê" },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;
      case "round6_formas":
      case "round7_formas":
      case "round8_formas":
        if (!isGame) return env(mensagem[0].game);
        if (!isGroup) return env("Comando apenas para grupo");
        var round6 = [
          `Voc√™ quebrou o biscoito e morreu`,
          `Voc√™ demorou para entregar seu biscoito e morreu`,
          `Voc√™ foi o primeiro a morrer`,
          ` Voc√™ foi o √∫ltimo a morrer`,
          `Voc√™ n√£o conseguiu entregar o biscoito a tempo, e morreu`,
          `Voc√™ entregou o biscoito faltando 5 segundos`,
          `Voc√™ foi o primeiro a entregar o biscoito`,
          `Voc√™ usou o isqueiro para queimar a agulha e cortar o biscoito e passou`,
          `Voc√™ morreu pq demorou para entregar o biscoito`,
        ];
        const round666 = round6[Math.floor(Math.random() * round6.length)];
        pinga = `${round666}\n`;
        conn.sendMessage(
          from,
          {
            text: pinga,
            footer: `Hora do ocorrido:\nDia do acontecimento: ${data}`,
            buttons: [
              {
                buttonId: `${prefixobot}round6`,
                buttonText: { displayText: "TENTA NOVAMENTE" },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;
      case "tac":
        if (!isGame) return env(mensagem[0].game);
        if (!isGroup) return env("Comando apenas para grupo");
        var taac = [
          "Tac... N√£o disparou",
          "Tac... N√£o disparou,ainda...",
          "Tacüí• Disparou e voc√™ morreu",
          "Tacüí•Disparou mas a bala pegou de rasp√£o",
          "A arma falhou",
          "Tac... Por pouco que n√£o dispara...",
          "Tac... A arma estava descarregada",
        ];
        const baoo = taac[Math.floor(Math.random() * taac.length)];
        pinga = `${baoo}`;
        conn.sendMessage(
          from,
          {
            text: pinga,
            footer: `Hora do ocorrido: ${hora()},\nDia do acontecimento: ${data}`,
            buttons: [
              {
                buttonId: `${prefixobot + command}`,
                buttonText: { displayText: "TENTA NOVAMENTE" },
                type: 1,
              },
            ],
          },
          { quoted: mek }
        );
        break;
      case "euja":
      case "euja2":
      case "euja3":
        if (!isGame) return env(mensagem[0].game);
        if (!isGroup) return env("Comando apenas para grupo");
        const jaja = [
          "Eu nunca usei o Tinder.",
          "Eu nunca fui expulso da sala de aula.",
          "Eu nunca fiquei preso no elevador.",
          "Eu nunca apareci na TV.",
          "Chupei o pau do amigo achando que era um picol√©",
          "Eu nunca corri da pol√≠cia.",
          "Eu nunca levei um tapa no rosto.",
          "Eu nunca segurei a m√£o da pessoa errada na rua.",
          "Eu nunca comi comida que caiu no ch√£o.",
          "Nunca beijei algu√©m que eu n√£o conhecia.",
          "Eu nunca dei um beijo triplo.",
          "Eu nunca dormi no √¥nibus e perdi o meu ponto.",
          "Eu nunca vomitei e tive que engolir.",
          "Eu nunca entrei em casa pela janela.",
          "Nunca me senti atra√≠do(a) pelo pai/m√£e de algum amigo.",
          "Eu nunca quebrei um osso.",
          "Eu nunca participei de uma briga.",
          "Eu nunca fingi que estava passando mal para matar aula.",
          "Eu nunca fugi de casa.",
          "Eu nunca sa√≠ na rua de pijama.",
          "Nunca me apaixonei √† primeira vista.",
          "Nunca beijei minha melhor amiga.",
          "Nunca andei de cavalo.",
          "Eu nunca dei um tapa no rosto de algu√©m.",
          "Eu nunca chorei no transporte p√∫blico.",
          "Eu nunca tive um v√≠deo constrangedor postado na internet.",
          "Eu nunca criei uma conta fake nas redes sociais.",
          "Eu nunca tive uma experi√™ncia paranormal",
          "Eu nunca passei mais de dois dias sem tomar banho.",
          "Eu nunca olhei o celular de algu√©m sem que a pessoa soubesse.",
          "Eu nunca me gabei por algo que n√£o fiz.",
          "Eu nunca menti tanto sobre alguma coisa que acreditei que fosse verdade.",
          "Eu nunca fiquei com mais de uma pessoa ao mesmo tempo.",
          "Eu nunca roubei um objeto ou comida de alguma loja, ou mercado",
          "Eu nunca entrei numa festa sem ser convidada",
          "Eu nunca quebrei algo e coloquei a culpa em outra pessoa",
          "Eu nunca desmaiei na rua.",
          "Nunca peguei carona com estranhos.",
          "Eu nunca desmaiei na rua.",
        ];
        var jale = jaja[Math.floor(Math.random() * jaja.length)];
        pinga = `${jale}\n`;
        conn.sendMessage(
          from,
          {
            text: pinga,
            footer: `Verdade acima de todo!`,
            templateButtons: [
              {
                index: 3,
                quickReplyButton: {
                  displayText: "EU J√Å",
                  id: `${prefixobot}euja`,
                },
              },
              {
                index: 4,
                quickReplyButton: {
                  displayText: "EU NUNCA",
                  id: `${prefixobot}euja2`,
                },
              },
              {
                index: 5,
                quickReplyButton: {
                  displayText: "N RESPONDE/PR√ìXIMA PERGUNTA",
                  id: `${prefixobot}euja3`,
                },
              },
            ],
          },
          { quoted: mek }
        );
        break;
      case "rr":
        if (!isGame) return env(mensagem[0].game);
        if (!isGroup) return env("Comando apenas para grupo");
        if (!isBotAdm) return env("Bot nao √© adm");
        words = [
          "A ARMA ESTAVA DESCARREGADA",
          "O TIRO PASSOU DE RASP√ÉO",
          "A ARMA FALHOU",
          "A ARMA ESTAVA DESCARREGADA",
          "BOOM VOC√ä MORREUüí•",
          "O TIRO PASSOU DE RASP√ÉO",
          "A ARMA FALHOU",
          "BOOM VOC√ä MORREUüí•",
          "A ARMA ESTAVA DESCARREGADA",
          "O TIRO PASSOU DE RASP√ÉO",
          "A ARMA FALHOU",
          "BOOM VOC√ä MORREUüí•",
        ];
        random = words[Math.floor(Math.random() * words.length)];
        if (random == "BOOM VOC√ä MORREUüí•") {
          env(random);
          conn.groupParticipantsUpdate(from, [sender], "remove");
          conn.sendMessage(
            owner[0],
            `    [ *_ALERTA_* ]\n\n ‚Üí esse maluko aqui levou ban no jogo \".rr\"\ncaso ele n√£o volte esse √© o numero dele: ${
              sender.split("@")[0]
            }`
          );
        } else {
          env(random);
        }
        break;
      //FIM
      //PLAQUINHA
      case "plaquinha":
        if (!isNsfw) return env(mensagem[0].nsfw);
        if (!texto)
          return env(
            `Coloque o nome da plaquinha na frente do comando\nExemplo de como se usar: ${
              prefixobot + command
            } Toki`
          );
        var sections = [
          {
            title: "Plaquinha",
            rows: [
              {
                title: `Plaquinha  com o nome "${texto}" no peito`,
                rowId: `${prefixobot}plaqui ${texto}`,
              },
              {
                title: `Plaquinha2 com o nome "${texto}" na bunda`,
                rowId: `${prefixobot}plaqui2 ${texto}`,
              },
              {
                title: `Plaquinha3 com o nome "${texto}" na bunda`,
                rowId: `${prefixobot}plaqui3 ${texto}`,
              },
              {
                title: `Plaquinha4 com o nome "${texto}" na bunda`,
                rowId: `${prefixobot}plaqui4 ${texto}`,
              },
            ],
          },
        ];
        var listMessage = {
          text: "Escolha um tema para sua plaquinha.",
          footer: "Selecione o tema abaixo",
          buttonText: "Escolha o tema da sua plaquinha",
          sections,
        };
        const sendMsg = await conn.sendMessage(from, listMessage);
        break;
      case "plaqui":
        if (!isNsfw) return env(mensagem[0].nsfw);
        if (args.length < 1)
          return env(
            `Digite seu nome/nick na frente do comando\nExemplo de como se usar: ${
              prefixobot + command
            } Joazin`
          );
        teks = body.slice(8);
        env(mensagem[0].espere);
        conn.sendMessage(from, {
          image: {
            url: `https://ubbornag.sirv.com/Screenshot_20210513-151821.png?text.0.text=${teks}&text.0.position.x=-40%25&text.0.position.y=-65%25&text.0.size=30&text.0.color=000000&text.0.opacity=53&text.0.font.family=Shadows%20Into%20Light%20Two&text.0.outline.blur=15`,
          },
          caption: "‚úì",
        });
        break;
      case "plaqui2":
        if (!isNsfw) return env(mensagem[0].nsfw);
        if (args.length < 1)
          return env(
            `Digite seu nome/nick na frente do comando\nExemplo de como se usar: ${
              prefixobot + command
            } Joazin`
          );
        teks = body.slice(9);
        env(mensagem[0].espere);
        conn.sendMessage(from, {
          image: {
            url: `https://ubbornag.sirv.com/Screenshot_20210513-151821.png?text.0.text=${teks}&text.0.position.x=-40%25&text.0.position.y=-65%25&text.0.size=30&text.0.color=000000&text.0.opacity=53&text.0.font.family=Shadows%20Into%20Light%20Two&text.0.outline.blur=15`,
          },
          caption: "‚úì",
        });
        break;
      case "plaqui3":
        if (!isNsfw) return env(mensagem[0].nsfw);
        if (args.length < 1)
          return env(
            `Digite seu nome/nick na frente do comando\nExemplo de como se usar: ${
              prefixobot + command
            } Joazin`
          );
        teks = body.slice(9);
        env(mensagem[0].espere);
        conn.sendMessage(from, {
          image: {
            url: `https://clutamac.sirv.com/1011b781-bab1-49e3-89db-ee2c064868fa%20(1).jpg?text.0.text=${teks}&text.0.position.gravity=northwest&text.0.position.x=22%25&text.0.position.y=60%25&text.0.size=18&text.0.color=000000&text.0.opacity=47&text.0.font.family=Roboto%20Mono&text.0.font.style=italic`,
          },
          caption: "‚úì",
        });
        break;
      case "plaqui4":
        if (!isNsfw) return env(mensagem[0].nsfw);
        if (args.length < 1)
          return env(
            `Digite seu nome/nick na frente do comando\nExemplo de como se usar: ${
              prefixobot + command
            } Joazin`
          );
        teks = body.slice(9);
        env(mensagem[0].espere);
        conn.sendMessage(from, {
          image: {
            url: `https://rsymenti.sirv.com/IMG-20210724-WA0303.jpg?text.0.text=${teks}&text.0.position.x=-20%25&text.0.position.y=-38%25&text.0.size=30&text.0.color=000000&text.0.opacity=93&text.0.font.family=Rock%20Salt&text.0.outline.color=ff0000&text.0.outline.blur=6&text.0.outline.opacity=73`,
          },
          caption: "‚úì",
        });
        break;
      //FERRAMENTAS
      case "parimp":
      case "imppar":
        if (!texto) return env("Coloque um numero na frente do comando.");
        if (isNaN(texto)) return env("Coloque somente n√∫meros.");
        function parimp(n) {
          if (n % 2 == 0) {
            return "O n√∫mero e *Par*";
          } else {
            return "O n√∫mero e *Impar*";
          }
        }
        let respi = parimp(texto);
        env(respi);
        break;
      case "rea√ßao":
      case "reaction":
      case "reagir":
        if (!texto) return env("Qual Emoji voc√™ quer reagir na mensagem?");
        if (texto.length < 1) return env("1 emoji apenas");
        if (
          mek.message.extendedTextMessage === undefined ||
          mek.message.extendedTextMessage === null
        )
          return env("Marque uma mensagem!");
        const reactionMessage = {
          react: {
            text: texto,
            key: {
              remoteJid: from,
              id: mek.message.extendedTextMessage.contextInfo.stanzaId,
              participant:
                mek.message.extendedTextMessage.contextInfo.participant,
            },
          },
        };
        conn.sendMessage(from, reactionMessage);
        break;
      case "fotogb":
        if (!texto) return env("Coloque quantos gigas na foto voc√™ quer");
        if (isNaN(texto)) return env("Apenas n√∫meros.");
        let giguin = texto;
        imagee =
          info.extendedTextMessage.contextInfo.quotedMessage.imageMessage;
        imagee.fileLength = `${giguin}000000000`;
        imagee.caption = "sexo kkk";
        conn.relayMessage(
          from,
          { imageMessage: imagee },
          {
            messageId: require("crypto")
              .randomBytes(6)
              .toString("hex")
              .toUpperCase(),
            additionalAttributes: {},
          }
        );
        break;
      case "audiogb":
        if (!texto) return env("Coloque quantos gigas na foto voc√™ quer");
        if (isNaN(texto)) return env("Apenas n√∫meros.");
        let giiguin = texto;
        audioo =
          info.extendedTextMessage.contextInfo.quotedMessage.audioMessage;
        audioo.fileLength = `${giiguin}000000000`;
        audioo.seconds = 999999999;
        conn.relayMessage(
          from,
          { audioMessage: audioo },
          {
            messageId: require("@adiwajshing/baileys").generateMessageID(),
            additionalAttributes: {},
          }
        );
        break;
      case "cpf":
        const dbcpf = JSON.parse(fs.readFileSync("./db/json/dbcpf.json"));
        cpf = args.join(" ");
        const getcpf = (cpf) => {
          let position = false;
          Object.keys(dbcpf).forEach((i) => {
            if (dbcpf[i].cpf === cpf) {
              position = i;
            }
          });
          if (position !== false) {
            return dbcpf[position];
          }
        };
        getcpf(cpf).then((e) => {
          if (e.erro) return env("cpf n√£o encontrado");
          env(`cpf encontrado nome m√£e: ${e.nomeMae}`);
        });
        break;
      case "fakemgsg":
        if (
          mek.message.extendedTextMessage === undefined ||
          mek.message.extendedTextMessage === null
        )
          return env("marque uma pessoa com @");
        if (!texto.includes("|")) return env("use *|* junto ao comando");
        numi = mek.message.extendedTextMessage.contextInfo.mentionedJid[0];
        var pargi = body.slice(23);
        var msg1i = pargi.split("|")[0];
        var msg2i = pargi.split("|")[1];
        if (msg1i.trim() == "") return env("coloque algo antes do *|*");
        if (msg2i.trim() == "") return env("coloque algo depois do *|*");
        conn.sendMessage(from, msg2i.trim(), MessageType.text, {
          contextInfo: {
            participant: numi,
            quotedMessage: {
              extendedTextMessage: { text: msg1i.trim() },
            },
          },
        });
        addFilter(from);
        break;
      case "fakemsg":
        if (body.slice(9).trim() == "")
          env("Pra quem voc√™ quer fazer o fakemsg??");
        [msgbot, msgpe] = body.slice(9).split("|");
        if (!msgbot || !msgpe) return env("Use | ao meio do comando");

        const ta = mek.message.extendedTextMessage.contextInfo.participant;
        let content = {
          key: {
            participant: ta,
          },
          message: {
            conversation: msgbot,
          },
        };
        conn.sendMessage(from, { text: msgpe }, { quoted: content });
        break;
      case "pinterest":
        if (args.length < 1)
          return env(
            `coloque o voc√™ deseja pesquisa na frente do comando\nExemplo de como se usar ${
              prefixobot + command
            } Naruto`
          );
        pesq = body.slice(11);
        {
          env("espere");
          const { pinterest } = require("./lib/scraper");
          anu = await pinterest(texto);
          result = anu[Math.floor(Math.random() * anu.length)];
          conn.sendMessage(from, {
            image: { url: result },
            caption: "‚úÖ",
            buttons: [
              {
                buttonId: `${prefixobot + command} ${pesq}`,
                buttonText: { displayText: "Pr√≥xima imagem" },
                type: 1,
              },
            ],
            headerType: 4,
          });
        }
        break;
      case "wallpaper":
        {
          if (!texto) return env("Qual o tema?");
          env("espere um pouquinho");
          piing = "${result.image[2] || result.image[1] || result.image[0]}";
          let { wallpaper } = require("./lib/scraper");
          anu = await wallpaper(texto);
          result = anu[Math.floor(Math.random() * anu.length)];
          let buttons = [
            {
              buttonId: `${prefixobot + command} ${texto}`,
              buttonText: { displayText: "Pr√≥xima imagem" },
              type: 1,
            },
          ];
          let buttonMessage = {
            image: { url: result.image[0] },
            caption: `Tema : ${result.title}\n Categoria : ${result.type}\n`,
            footer: "Caso queira outra imagem aperte o bot√£o abaixo",
            buttons: buttons,
            headerType: 4,
          };
          conn.sendMessage(from, buttonMessage, { quoted: mek });
        }
        break;
      case "personagem":
        var sections = [
          {
            title: "Plaquinha",
            rows: [
              {
                title: `Naruto Uzumaki`,
                rowId: `${prefixobot}pinterest Naruto Uzumaki`,
              },
              {
                title: `Sasuke Uchiha`,
                rowId: `${prefixobot}pinterest Sasuke Uchiha`,
              },
              {
                title: `Sakura Haruno`,
                rowId: `${prefixobot}pinterest Sakura Haruno`,
              },
              {
                title: `Kakashi Hatake`,
                rowId: `${prefixobot}pinterest Kakashi Hatakw`,
              },
            ],
          },
        ];
        var listMessage = {
          text: "Escolha um personagem no bot√£o abaixo",
          footer: "Selecione o personagem",
          buttonText: "Escolha um Personagem",
          sections,
        };
        const pesquisin = await conn.sendMessage(from, listMessage);
        break;
      case "semoji":
        if (!texto) return env("Qual emoji?");
        var sections = [
          {
            title: "Emojis:",
            rows: [
              {
                title: `Emoji "${texto}" da Apple.`,
                rowId: `${prefixobot + "emooji" + " " + texto + "/" + "apple"}`,
              },
              {
                title: `Emoji "${texto}" do Google.`,
                rowId: `${
                  prefixobot + "emooji" + " " + texto + "/" + "google"
                }`,
              },
              {
                title: `Emoji "${texto}" da Samsung.`,
                rowId: `${
                  prefixobot + "emooji" + " " + texto + "/" + "samsung"
                }`,
              },
              {
                title: `Emoji "${texto}" da Microsoft.`,
                rowId: `${
                  prefixobot + "emooji" + " " + texto + "/" + "microsoft"
                }`,
              },
              {
                title: `Emoji "${texto}" do Whatsapp.`,
                rowId: `${
                  prefixobot + "emooji" + " " + texto + "/" + "whatsapp"
                }`,
              },
              {
                title: `Emoji "${texto}" do Twitter.`,
                rowId: `${
                  prefixobot + "emooji" + " " + texto + "/" + "twitter"
                }`,
              },
              {
                title: `Emoji "${texto}" do Facebook.`,
                rowId: `${
                  prefixobot + "emooji" + " " + texto + "/" + "facebook"
                }`,
              },
              {
                title: `Emoji "${texto}" do Joypixels.`,
                rowId: `${
                  prefixobot + "emooji" + " " + texto + "/" + "joypixels"
                }`,
              },
              {
                title: `Emoji "${texto}" do Openmoji.`,
                rowId: `${
                  prefixobot + "emooji" + " " + texto + "/" + "openmoji"
                }`,
              },
              {
                title: `Emoji "${texto}" do Skype(Emoji Animado).`,
                rowId: `${prefixobot + "emooji" + " " + texto + "/" + "skype"}`,
              },
              {
                title: `Emoji "${texto}" do Emojidex.`,
                rowId: `${
                  prefixobot + "emooji" + " " + texto + "/" + "emojidex"
                }`,
              },
              {
                title: `Emoji "${texto}" do Emojipedia.`,
                rowId: `${
                  prefixobot + "emooji" + " " + texto + "/" + "Emojipedia"
                }`,
              },
              {
                title: `Emoji "${texto}" do LG.`,
                rowId: `${prefixobot + "emooji" + " " + texto + "/" + "lg"}`,
              },
              {
                title: `Emoji "${texto}" do Noto Emoji.`,
                rowId: `${
                  prefixobot + "emooji" + " " + texto + "/" + "notoemoji"
                }`,
              },
            ],
          },
        ];
        var listMessage = {
          text: "Escolha um tema de figurinha.",
          footer: "Selecione o tema abaixo.",
          buttonText: "Escolha o tema da sua Figurinha.",
          sections,
        };
        const sendemoji = await conn.sendMessage(from, listMessage, {
          quoted: mek,
        });
        break;
      case "emooji":
        if (!q) return env(`Exemplo: ${prefixobot}emoji ‚òπÔ∏è/whatsapp`);
        emot = q.split("/")[0];
        jemot = q.split("/")[1];
        if (jemot == "apple") {
          idemot = 0;
        } else if (jemot == "google") {
          idemot = 1;
        } else if (jemot == "samsung") {
          idemot = 2;
        } else if (jemot == "microsoft") {
          idemot = 3;
        } else if (jemot == "whatsapp") {
          idemot = 4;
        } else if (jemot == "twitter") {
          idemot = 5;
        } else if (jemot == "facebook") {
          idemot = 6;
        } else if (jemot == "skype") {
          idemot = 7;
        } else if (jemot == "joypixels") {
          idemot = 8;
        } else if (jemot == "openmoji") {
          idemot = 9;
        } else if (jemot == "notoemoji") {
          idemot = 10;
        } else if (jemot == "Emojipedia") {
          idemot = 11;
        } else if (jemot == "lg") {
          idemot = 12;
        } else {
          return env(`....`);
        }
        env("perai");
        if (idemot == undefined) return;
        emoji.get(emot).then((emoji) => {
          console.log(emoji.images[idemot]);
          sendStickerFromUrl(from, emoji.images[idemot].url, mek);
        });
        break;
case 'misturar':
  if(!q.includes("+")) return env(`trem ta faltando esse (+), vou te dar um exemplo..\nExemplo: ${prefix+command} üòí+üòÅ`)
  txt = q.replace(" +", "+").replace("+ ", "+").replace(" + ", "+")
  let [emj1, emj2] = txt.split("+")
  try {
      const a = new Date().getTime()
      const downloader = new Downloader({
          url: `https://aleatoryapi.herokuapp.com/api/emojimix?emoj=${encodeURI(emj1)}&emoj2=${encodeURI(emj2)}&apikey=${keyale}`, //If the file name already exists, a new file with the name 200MB1.zip is created.
          directory: "./temp", //This folder will be created, if it doesn't exist.
          fileName: a + ".jpg" //The file name.
      });
      try {
          await downloader.download();
          const fig_enviar = await createSticker(`./temp/${a}.jpg`, descFig)
          conn.sendMessage(from, {sticker: fig_enviar}, {quoted: mek})
          fs.unlink(`./temp/${a}.jpg`, () => { })
      }  
      catch (error) {
          conn.sendMessage(from, "esse n√£o tem desculpe..");
          fs.unlink(`./temp/${a}.jpg`, () => { })
      }
  } catch (err) {
      console.log(err)
  } 
  break
      case "calcular":
        datas = body.slice(10);
        if (!/\+|√∑|√ó|-/gi.test(datas))
          return env("use os simbolos: + - √ó ou √∑");
        number1 = datas.split(/\+|√∑|√ó|-/gi)[0].replace(/ /gi, "");
        number2 = datas.split(/\+|√∑|√ó|-/gi)[1].replace(/ /gi, "");
        symbol = datas.match(/\+|√ó|√∑|-/gi)[0];
        if (isNaN(number1) || isNaN(number2)) return env("somente numeros!");
        if (symbol.startsWith("+")) {
          env(parseInt(number1) + parseInt(number2));
        } else if (symbol.startsWith("-")) {
          env(parseInt(number1) - parseInt(number2));
        } else if (symbol.startsWith("√ó")) {
          env(parseInt(number1) * parseInt(number2));
        } else if (symbol.startsWith("√∑")) {
          env(parseInt(number1) / parseInt(number2));
        }
        break;

      default:
    }
    //==============(ANTILINK)===============\\

    switch (ants) {
    }

    //=======================================\\

    if (isAntiLink) {
      if (type == "stickerMessage")
        if (type == "audioMessage")
          if (type == "imageMessage")
            if (
              budy.includes("https://") ||
              budy.includes(".net") ||
              budy.includes(".com") ||
              budy.includes("//s.kwai.app/") ||
              budy.includes("//vm.tiktok") ||
              budy.includes("www.") ||
              budy.includes("chat.whatsapp") ||
              budy.includes(".xml") ||
              budy.includes("youtube.com") ||
              budy.includes("//t.me/") ||
              budy.includes(".css")
            ) {
              linkgpp = await conn.groupInviteCode(from);
              if (budy.match(`${linkgpp}`))
                return env("Link do nosso grupo, n√£o irei remover.. ");
              if (!isGroup)
                if (isGroupAdmins)
                  return env(
                    `*Vc √© admin do gp,fica tranquilo que n√£o irei te banir.*`
                  );
              setTimeout(() => {}, 1100);
              setTimeout(() => {
                conn.groupParticipantsUpdate(from, [sender], "remove");
              }, 1000);
            }
    }
    //========================================\\
  });
}

connect();
