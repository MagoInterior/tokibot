case 'ytaudio2':                 		     	
                if (!texto) return env(`Exemplo : ${prefixobot + command} a vitória`)
                if (!isUrl(args[0]) && !args[0].includes('https://youtube.com')) return env('Cadê o url do vídeo do YouTube')
                env('Espere um pouco, comando está em beta')
		            var { aiovideodl } = require('./lib/scraper')
                var result = await aiovideodl(isUrl(texto))
                var { medias } = result
                var quality = args[1] ? args[1] : '128kbps'                
                var media = medias.filter(v => v.videoAvailable == false && v.audioAvailable == true && v.quality == quality).map(v => v)
                if (media[0].formattedSize.split('MB')[0] >= 100.00) return env('File Melebihi Batas'+util.format(media))
                conn.sendMessage(from, { audio: { url: media[0].url }, Mimetype: 'audio/mp4', fileName: `${title}.mp3` }, { quoted: mek })            
            break
              case 'covid':
        anu = await fetchJson(`https://www.luc4rio-rest-api.tk/api/consultas/covid/mundial`)
        silas = `
╭═══════════════⊷
╰╮ Covid Mundo
  │
╭┤➩ Total de casos: ${anu.Total_Casos}
┃│➩ Total de casos ativos: ${anu.Total_Casos_Ativos}
┃│➩ Total de casos criticos: ${anu.Total_Casos_Criticos}
┃│➩ Total de casos hoje: ${anu.Total_Casos_Hoje}
┃│➩ Total de mortes: ${anu.Total_Mortes}
┃│➩ Total de mortes hoje: ${anu.Total_Mortes_Hoje}
┃│➩ Total de recuperados: ${anu.Total_Recuperados}
┃╰═════════════⊷
╰══════「★」═════⊷`
        env(silas)
        break

      case 'covidsigla':
        if (args.length < 1) return env(`Coloque a sigla do estado na frente\nExemplo de como se usar: ${prefixobot + command} ba`)
        cep = body.slice(12)
        anu = await fetchJson(`https://www.luc4rio-rest-api.tk/api/consultas/covid/brasil?estado=${cep}`)
        CovidSla = `
╭═══════════════⊷
╰╮ Covid Mundo
╭┤➩ Sigla do estado: ${anu.Sigla_Do_Estado}
┃│➩ Estado: ${anu.Estado_Informado}
┃│➩ Casos desconhecidos: ${anu.Casos_Desconhecidos}
┃│➩ Casos encontrados: ${anu.Casos_Encontrados}
┃│➩ Mortes encontradas: ${anu.Mortes_Encontradas}
┃│➩ Previsões Econtradas: ${anu.Previsoes_Encontradas}
┃╰═════════════⊷
╰══════「★」═════⊷`
        env(CovidSla)
        break
         case 'renomear':
      case 'rename':
      case 'roubar':
      case 'take':
        if (!isQuotedSticker) return env('Marque uma figurinha...')
        encmediats = await getFileBuffer(info.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, 'sticker')
        let klls = q
        let packk = klls.split("/")[0];
        let authorr2 = klls.split("/")[1];
        if (!q) return env('*E o autor e o nome do pacote?*')
        if (!packk) return env(`*Por favor escreve o formato certo: ${prefix + command} sad/bla*`)
        if (!authorr2) return env(`*por favor escreve o formato certo: ${prefixobot + command} Toki/Bot*`)
        env('perai')
        bas664 = `data:image/jpeg;base64,${encmediats.toString('base64')}`
        let maantap = await convertSticker(bas664, `${authorr2}`, `${packk}`)
        let ssti = new Buffer.from(maantap, 'base64');
        conn.sendMessage(from, { sticker: stti, contextInfo: { externalAdReply: { title: `${packk}|${authorr2}`, body: "", previewType: "PHOTO", thumbnail: ssti } } }, { quoted: mek })
          .catch((err) => {
            env(`❎ Error, tenta mais tarde`);
          })
        break
          case 'placameme':
      case 'placas':
        const plca = fs.readFileSync('./db/js/placas.js');
        var jsonData = JSON.parse(plca);
        var pinga = Math.floor(Math.random() * jsonData.length);
        conn.sendMessage(from, { image: { url: result, caption: 'Gay' } }, { quoted: imagemek });
        break
         case 'playvid':
      case 'ytmp4':
        if (!texto) return env(`Exemplo de como se usar: ${prefixobot + command} a vitória chegou`)
        env('Espere um pouco, comando está em beta')
        teks = args.join(' ')
        if (!teks.endsWith("-doc")) {
          res = await yts(`${teks}`).catch(e => {
            env('Erro ao mandar mídia')
          })
          res = await y2mateV(res.all[0].url).catch(e => {
            env('Não encontrei nenhum resultado.')
          })
          conn.sendMessage(from, { video: { url: res[0].link }, fileName: `silas.mp4`, Mimetype: 'video/mp4', caption: 'Pronto' }, { quoted: mek })
        }
        break